
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008764  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408764  00408764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040876c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002f8  204009d0  0040913c  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400cc8  00409434  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cc8  0040b434  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015337  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002df7  00000000  00000000  00035d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000054a6  00000000  00000000  00038b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a00  00000000  00000000  0003e02b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0003ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020941  00000000  00000000  0003f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000df13  00000000  00000000  0005fd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008feef  00000000  00000000  0006dc17  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000033c8  00000000  00000000  000fdb08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 2c 40 20 09 27 40 00 b9 27 40 00 b9 27 40 00     .,@ .'@..'@..'@.
  400010:	b9 27 40 00 b9 27 40 00 b9 27 40 00 00 00 00 00     .'@..'@..'@.....
	...
  40002c:	b9 27 40 00 b9 27 40 00 00 00 00 00 b9 27 40 00     .'@..'@......'@.
  40003c:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  40004c:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  40005c:	b9 27 40 00 b9 27 40 00 00 00 00 00 c1 22 40 00     .'@..'@......"@.
  40006c:	d9 22 40 00 f1 22 40 00 b9 27 40 00 b9 27 40 00     ."@.."@..'@..'@.
  40007c:	b9 27 40 00 09 23 40 00 21 23 40 00 b9 27 40 00     .'@..#@.!#@..'@.
  40008c:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  40009c:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  4000ac:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  4000bc:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  4000cc:	b9 27 40 00 00 00 00 00 b9 27 40 00 00 00 00 00     .'@......'@.....
  4000dc:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  4000ec:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  4000fc:	b9 27 40 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .'@..'@..'@..'@.
  40010c:	b9 27 40 00 b9 27 40 00 00 00 00 00 00 00 00 00     .'@..'@.........
  40011c:	00 00 00 00 b9 27 40 00 b9 27 40 00 b9 27 40 00     .....'@..'@..'@.
  40012c:	b9 27 40 00 b9 27 40 00 00 00 00 00 b9 27 40 00     .'@..'@......'@.
  40013c:	b9 27 40 00                                         .'@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040876c 	.word	0x0040876c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040876c 	.word	0x0040876c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040876c 	.word	0x0040876c
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	685b      	ldr	r3, [r3, #4]
  4001b8:	f003 0302 	and.w	r3, r3, #2
  4001bc:	2b00      	cmp	r3, #0
  4001be:	d001      	beq.n	4001c4 <spi_get_peripheral_select_mode+0x18>
		return 1;
  4001c0:	2301      	movs	r3, #1
  4001c2:	e000      	b.n	4001c6 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  4001c4:	2300      	movs	r3, #0
	}
}
  4001c6:	4618      	mov	r0, r3
  4001c8:	370c      	adds	r7, #12
  4001ca:	46bd      	mov	sp, r7
  4001cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d0:	4770      	bx	lr
	...

004001d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4001dc:	6878      	ldr	r0, [r7, #4]
  4001de:	4b03      	ldr	r3, [pc, #12]	; (4001ec <sysclk_enable_peripheral_clock+0x18>)
  4001e0:	4798      	blx	r3
}
  4001e2:	bf00      	nop
  4001e4:	3708      	adds	r7, #8
  4001e6:	46bd      	mov	sp, r7
  4001e8:	bd80      	pop	{r7, pc}
  4001ea:	bf00      	nop
  4001ec:	004025fd 	.word	0x004025fd

004001f0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001f0:	b580      	push	{r7, lr}
  4001f2:	b082      	sub	sp, #8
  4001f4:	af00      	add	r7, sp, #0
  4001f6:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001f8:	687b      	ldr	r3, [r7, #4]
  4001fa:	4a09      	ldr	r2, [pc, #36]	; (400220 <spi_enable_clock+0x30>)
  4001fc:	4293      	cmp	r3, r2
  4001fe:	d103      	bne.n	400208 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  400200:	2015      	movs	r0, #21
  400202:	4b08      	ldr	r3, [pc, #32]	; (400224 <spi_enable_clock+0x34>)
  400204:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400206:	e006      	b.n	400216 <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <spi_enable_clock+0x38>)
  40020c:	4293      	cmp	r3, r2
  40020e:	d102      	bne.n	400216 <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  400210:	202a      	movs	r0, #42	; 0x2a
  400212:	4b04      	ldr	r3, [pc, #16]	; (400224 <spi_enable_clock+0x34>)
  400214:	4798      	blx	r3
}
  400216:	bf00      	nop
  400218:	3708      	adds	r7, #8
  40021a:	46bd      	mov	sp, r7
  40021c:	bd80      	pop	{r7, pc}
  40021e:	bf00      	nop
  400220:	40008000 	.word	0x40008000
  400224:	004001d5 	.word	0x004001d5
  400228:	40058000 	.word	0x40058000

0040022c <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  40022c:	b480      	push	{r7}
  40022e:	b083      	sub	sp, #12
  400230:	af00      	add	r7, sp, #0
  400232:	6078      	str	r0, [r7, #4]
  400234:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400236:	687b      	ldr	r3, [r7, #4]
  400238:	685b      	ldr	r3, [r3, #4]
  40023a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	685a      	ldr	r2, [r3, #4]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	041b      	lsls	r3, r3, #16
  40024a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40024e:	431a      	orrs	r2, r3
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	605a      	str	r2, [r3, #4]
}
  400254:	bf00      	nop
  400256:	370c      	adds	r7, #12
  400258:	46bd      	mov	sp, r7
  40025a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40025e:	4770      	bx	lr

00400260 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400260:	b580      	push	{r7, lr}
  400262:	b084      	sub	sp, #16
  400264:	af00      	add	r7, sp, #0
  400266:	6078      	str	r0, [r7, #4]
  400268:	4608      	mov	r0, r1
  40026a:	4611      	mov	r1, r2
  40026c:	461a      	mov	r2, r3
  40026e:	4603      	mov	r3, r0
  400270:	807b      	strh	r3, [r7, #2]
  400272:	460b      	mov	r3, r1
  400274:	707b      	strb	r3, [r7, #1]
  400276:	4613      	mov	r3, r2
  400278:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40027a:	f643 2398 	movw	r3, #15000	; 0x3a98
  40027e:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400280:	e006      	b.n	400290 <spi_write+0x30>
		if (!timeout--) {
  400282:	68fb      	ldr	r3, [r7, #12]
  400284:	1e5a      	subs	r2, r3, #1
  400286:	60fa      	str	r2, [r7, #12]
  400288:	2b00      	cmp	r3, #0
  40028a:	d101      	bne.n	400290 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  40028c:	2301      	movs	r3, #1
  40028e:	e020      	b.n	4002d2 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	691b      	ldr	r3, [r3, #16]
  400294:	f003 0302 	and.w	r3, r3, #2
  400298:	2b00      	cmp	r3, #0
  40029a:	d0f2      	beq.n	400282 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40029c:	6878      	ldr	r0, [r7, #4]
  40029e:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <spi_write+0x7c>)
  4002a0:	4798      	blx	r3
  4002a2:	4603      	mov	r3, r0
  4002a4:	2b00      	cmp	r3, #0
  4002a6:	d00e      	beq.n	4002c6 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002a8:	887a      	ldrh	r2, [r7, #2]
  4002aa:	787b      	ldrb	r3, [r7, #1]
  4002ac:	041b      	lsls	r3, r3, #16
  4002ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4002b2:	4313      	orrs	r3, r2
  4002b4:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  4002b6:	783b      	ldrb	r3, [r7, #0]
  4002b8:	2b00      	cmp	r3, #0
  4002ba:	d006      	beq.n	4002ca <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  4002bc:	68bb      	ldr	r3, [r7, #8]
  4002be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4002c2:	60bb      	str	r3, [r7, #8]
  4002c4:	e001      	b.n	4002ca <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  4002c6:	887b      	ldrh	r3, [r7, #2]
  4002c8:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	68ba      	ldr	r2, [r7, #8]
  4002ce:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  4002d0:	2300      	movs	r3, #0
}
  4002d2:	4618      	mov	r0, r3
  4002d4:	3710      	adds	r7, #16
  4002d6:	46bd      	mov	sp, r7
  4002d8:	bd80      	pop	{r7, pc}
  4002da:	bf00      	nop
  4002dc:	004001ad 	.word	0x004001ad

004002e0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  4002e0:	b480      	push	{r7}
  4002e2:	b085      	sub	sp, #20
  4002e4:	af00      	add	r7, sp, #0
  4002e6:	60f8      	str	r0, [r7, #12]
  4002e8:	60b9      	str	r1, [r7, #8]
  4002ea:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	2b00      	cmp	r3, #0
  4002f0:	d00c      	beq.n	40030c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002f2:	68fb      	ldr	r3, [r7, #12]
  4002f4:	68ba      	ldr	r2, [r7, #8]
  4002f6:	320c      	adds	r2, #12
  4002f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4002fc:	f043 0101 	orr.w	r1, r3, #1
  400300:	68fb      	ldr	r3, [r7, #12]
  400302:	68ba      	ldr	r2, [r7, #8]
  400304:	320c      	adds	r2, #12
  400306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  40030a:	e00b      	b.n	400324 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40030c:	68fb      	ldr	r3, [r7, #12]
  40030e:	68ba      	ldr	r2, [r7, #8]
  400310:	320c      	adds	r2, #12
  400312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400316:	f023 0101 	bic.w	r1, r3, #1
  40031a:	68fb      	ldr	r3, [r7, #12]
  40031c:	68ba      	ldr	r2, [r7, #8]
  40031e:	320c      	adds	r2, #12
  400320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400324:	bf00      	nop
  400326:	3714      	adds	r7, #20
  400328:	46bd      	mov	sp, r7
  40032a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40032e:	4770      	bx	lr

00400330 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  400330:	b480      	push	{r7}
  400332:	b085      	sub	sp, #20
  400334:	af00      	add	r7, sp, #0
  400336:	60f8      	str	r0, [r7, #12]
  400338:	60b9      	str	r1, [r7, #8]
  40033a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	2b00      	cmp	r3, #0
  400340:	d00c      	beq.n	40035c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400342:	68fb      	ldr	r3, [r7, #12]
  400344:	68ba      	ldr	r2, [r7, #8]
  400346:	320c      	adds	r2, #12
  400348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40034c:	f043 0102 	orr.w	r1, r3, #2
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	68ba      	ldr	r2, [r7, #8]
  400354:	320c      	adds	r2, #12
  400356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  40035a:	e00b      	b.n	400374 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40035c:	68fb      	ldr	r3, [r7, #12]
  40035e:	68ba      	ldr	r2, [r7, #8]
  400360:	320c      	adds	r2, #12
  400362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400366:	f023 0102 	bic.w	r1, r3, #2
  40036a:	68fb      	ldr	r3, [r7, #12]
  40036c:	68ba      	ldr	r2, [r7, #8]
  40036e:	320c      	adds	r2, #12
  400370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400374:	bf00      	nop
  400376:	3714      	adds	r7, #20
  400378:	46bd      	mov	sp, r7
  40037a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40037e:	4770      	bx	lr

00400380 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400380:	b480      	push	{r7}
  400382:	b085      	sub	sp, #20
  400384:	af00      	add	r7, sp, #0
  400386:	60f8      	str	r0, [r7, #12]
  400388:	60b9      	str	r1, [r7, #8]
  40038a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40038c:	687b      	ldr	r3, [r7, #4]
  40038e:	2b04      	cmp	r3, #4
  400390:	d118      	bne.n	4003c4 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400392:	68fb      	ldr	r3, [r7, #12]
  400394:	68ba      	ldr	r2, [r7, #8]
  400396:	320c      	adds	r2, #12
  400398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40039c:	f023 0108 	bic.w	r1, r3, #8
  4003a0:	68fb      	ldr	r3, [r7, #12]
  4003a2:	68ba      	ldr	r2, [r7, #8]
  4003a4:	320c      	adds	r2, #12
  4003a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4003aa:	68fb      	ldr	r3, [r7, #12]
  4003ac:	68ba      	ldr	r2, [r7, #8]
  4003ae:	320c      	adds	r2, #12
  4003b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4003b4:	f043 0104 	orr.w	r1, r3, #4
  4003b8:	68fb      	ldr	r3, [r7, #12]
  4003ba:	68ba      	ldr	r2, [r7, #8]
  4003bc:	320c      	adds	r2, #12
  4003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  4003c2:	e02a      	b.n	40041a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	2b00      	cmp	r3, #0
  4003c8:	d118      	bne.n	4003fc <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4003ca:	68fb      	ldr	r3, [r7, #12]
  4003cc:	68ba      	ldr	r2, [r7, #8]
  4003ce:	320c      	adds	r2, #12
  4003d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4003d4:	f023 0108 	bic.w	r1, r3, #8
  4003d8:	68fb      	ldr	r3, [r7, #12]
  4003da:	68ba      	ldr	r2, [r7, #8]
  4003dc:	320c      	adds	r2, #12
  4003de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4003e2:	68fb      	ldr	r3, [r7, #12]
  4003e4:	68ba      	ldr	r2, [r7, #8]
  4003e6:	320c      	adds	r2, #12
  4003e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4003ec:	f023 0104 	bic.w	r1, r3, #4
  4003f0:	68fb      	ldr	r3, [r7, #12]
  4003f2:	68ba      	ldr	r2, [r7, #8]
  4003f4:	320c      	adds	r2, #12
  4003f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4003fa:	e00e      	b.n	40041a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	2b08      	cmp	r3, #8
  400400:	d10b      	bne.n	40041a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400402:	68fb      	ldr	r3, [r7, #12]
  400404:	68ba      	ldr	r2, [r7, #8]
  400406:	320c      	adds	r2, #12
  400408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40040c:	f043 0108 	orr.w	r1, r3, #8
  400410:	68fb      	ldr	r3, [r7, #12]
  400412:	68ba      	ldr	r2, [r7, #8]
  400414:	320c      	adds	r2, #12
  400416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40041a:	bf00      	nop
  40041c:	3714      	adds	r7, #20
  40041e:	46bd      	mov	sp, r7
  400420:	f85d 7b04 	ldr.w	r7, [sp], #4
  400424:	4770      	bx	lr

00400426 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400426:	b480      	push	{r7}
  400428:	b085      	sub	sp, #20
  40042a:	af00      	add	r7, sp, #0
  40042c:	60f8      	str	r0, [r7, #12]
  40042e:	60b9      	str	r1, [r7, #8]
  400430:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400432:	68fb      	ldr	r3, [r7, #12]
  400434:	68ba      	ldr	r2, [r7, #8]
  400436:	320c      	adds	r2, #12
  400438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40043c:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  400440:	68fb      	ldr	r3, [r7, #12]
  400442:	68ba      	ldr	r2, [r7, #8]
  400444:	320c      	adds	r2, #12
  400446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40044a:	68fb      	ldr	r3, [r7, #12]
  40044c:	68ba      	ldr	r2, [r7, #8]
  40044e:	320c      	adds	r2, #12
  400450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  400454:	687b      	ldr	r3, [r7, #4]
  400456:	ea42 0103 	orr.w	r1, r2, r3
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	68ba      	ldr	r2, [r7, #8]
  40045e:	320c      	adds	r2, #12
  400460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400464:	bf00      	nop
  400466:	3714      	adds	r7, #20
  400468:	46bd      	mov	sp, r7
  40046a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40046e:	4770      	bx	lr

00400470 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400470:	b480      	push	{r7}
  400472:	b085      	sub	sp, #20
  400474:	af00      	add	r7, sp, #0
  400476:	6078      	str	r0, [r7, #4]
  400478:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40047a:	683a      	ldr	r2, [r7, #0]
  40047c:	687b      	ldr	r3, [r7, #4]
  40047e:	4413      	add	r3, r2
  400480:	1e5a      	subs	r2, r3, #1
  400482:	687b      	ldr	r3, [r7, #4]
  400484:	fbb2 f3f3 	udiv	r3, r2, r3
  400488:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40048a:	68fb      	ldr	r3, [r7, #12]
  40048c:	2b00      	cmp	r3, #0
  40048e:	dd02      	ble.n	400496 <spi_calc_baudrate_div+0x26>
  400490:	68fb      	ldr	r3, [r7, #12]
  400492:	2bff      	cmp	r3, #255	; 0xff
  400494:	dd02      	ble.n	40049c <spi_calc_baudrate_div+0x2c>
		return -1;
  400496:	f04f 33ff 	mov.w	r3, #4294967295
  40049a:	e001      	b.n	4004a0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  40049c:	68fb      	ldr	r3, [r7, #12]
  40049e:	b21b      	sxth	r3, r3
}
  4004a0:	4618      	mov	r0, r3
  4004a2:	3714      	adds	r7, #20
  4004a4:	46bd      	mov	sp, r7
  4004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004aa:	4770      	bx	lr

004004ac <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4004ac:	b480      	push	{r7}
  4004ae:	b085      	sub	sp, #20
  4004b0:	af00      	add	r7, sp, #0
  4004b2:	60f8      	str	r0, [r7, #12]
  4004b4:	60b9      	str	r1, [r7, #8]
  4004b6:	4613      	mov	r3, r2
  4004b8:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4004ba:	79fb      	ldrb	r3, [r7, #7]
  4004bc:	2b00      	cmp	r3, #0
  4004be:	d102      	bne.n	4004c6 <spi_set_baudrate_div+0x1a>
        return -1;
  4004c0:	f04f 33ff 	mov.w	r3, #4294967295
  4004c4:	e01b      	b.n	4004fe <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4004c6:	68fb      	ldr	r3, [r7, #12]
  4004c8:	68ba      	ldr	r2, [r7, #8]
  4004ca:	320c      	adds	r2, #12
  4004cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004d0:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  4004d4:	68fb      	ldr	r3, [r7, #12]
  4004d6:	68ba      	ldr	r2, [r7, #8]
  4004d8:	320c      	adds	r2, #12
  4004da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4004de:	68fb      	ldr	r3, [r7, #12]
  4004e0:	68ba      	ldr	r2, [r7, #8]
  4004e2:	320c      	adds	r2, #12
  4004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4004e8:	79fb      	ldrb	r3, [r7, #7]
  4004ea:	021b      	lsls	r3, r3, #8
  4004ec:	b29b      	uxth	r3, r3
  4004ee:	ea42 0103 	orr.w	r1, r2, r3
  4004f2:	68fb      	ldr	r3, [r7, #12]
  4004f4:	68ba      	ldr	r2, [r7, #8]
  4004f6:	320c      	adds	r2, #12
  4004f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4004fc:	2300      	movs	r3, #0
}
  4004fe:	4618      	mov	r0, r3
  400500:	3714      	adds	r7, #20
  400502:	46bd      	mov	sp, r7
  400504:	f85d 7b04 	ldr.w	r7, [sp], #4
  400508:	4770      	bx	lr
	...

0040050c <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  40050c:	b480      	push	{r7}
  40050e:	b083      	sub	sp, #12
  400510:	af00      	add	r7, sp, #0
  400512:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  400514:	4a04      	ldr	r2, [pc, #16]	; (400528 <gfx_mono_set_framebuffer+0x1c>)
  400516:	687b      	ldr	r3, [r7, #4]
  400518:	6013      	str	r3, [r2, #0]
}
  40051a:	bf00      	nop
  40051c:	370c      	adds	r7, #12
  40051e:	46bd      	mov	sp, r7
  400520:	f85d 7b04 	ldr.w	r7, [sp], #4
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204009ec 	.word	0x204009ec

0040052c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  40052c:	b480      	push	{r7}
  40052e:	b083      	sub	sp, #12
  400530:	af00      	add	r7, sp, #0
  400532:	4603      	mov	r3, r0
  400534:	71fb      	strb	r3, [r7, #7]
  400536:	460b      	mov	r3, r1
  400538:	71bb      	strb	r3, [r7, #6]
  40053a:	4613      	mov	r3, r2
  40053c:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40053e:	4b08      	ldr	r3, [pc, #32]	; (400560 <gfx_mono_framebuffer_put_byte+0x34>)
  400540:	681a      	ldr	r2, [r3, #0]
  400542:	79fb      	ldrb	r3, [r7, #7]
  400544:	01db      	lsls	r3, r3, #7
  400546:	4619      	mov	r1, r3
  400548:	79bb      	ldrb	r3, [r7, #6]
  40054a:	440b      	add	r3, r1
  40054c:	4413      	add	r3, r2
  40054e:	797a      	ldrb	r2, [r7, #5]
  400550:	701a      	strb	r2, [r3, #0]
}
  400552:	bf00      	nop
  400554:	370c      	adds	r7, #12
  400556:	46bd      	mov	sp, r7
  400558:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop
  400560:	204009ec 	.word	0x204009ec

00400564 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400564:	b480      	push	{r7}
  400566:	b083      	sub	sp, #12
  400568:	af00      	add	r7, sp, #0
  40056a:	4603      	mov	r3, r0
  40056c:	460a      	mov	r2, r1
  40056e:	71fb      	strb	r3, [r7, #7]
  400570:	4613      	mov	r3, r2
  400572:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400574:	4b07      	ldr	r3, [pc, #28]	; (400594 <gfx_mono_framebuffer_get_byte+0x30>)
  400576:	681a      	ldr	r2, [r3, #0]
  400578:	79fb      	ldrb	r3, [r7, #7]
  40057a:	01db      	lsls	r3, r3, #7
  40057c:	4619      	mov	r1, r3
  40057e:	79bb      	ldrb	r3, [r7, #6]
  400580:	440b      	add	r3, r1
  400582:	4413      	add	r3, r2
  400584:	781b      	ldrb	r3, [r3, #0]
}
  400586:	4618      	mov	r0, r3
  400588:	370c      	adds	r7, #12
  40058a:	46bd      	mov	sp, r7
  40058c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	204009ec 	.word	0x204009ec

00400598 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400598:	b590      	push	{r4, r7, lr}
  40059a:	b085      	sub	sp, #20
  40059c:	af00      	add	r7, sp, #0
  40059e:	4604      	mov	r4, r0
  4005a0:	4608      	mov	r0, r1
  4005a2:	4611      	mov	r1, r2
  4005a4:	461a      	mov	r2, r3
  4005a6:	4623      	mov	r3, r4
  4005a8:	71fb      	strb	r3, [r7, #7]
  4005aa:	4603      	mov	r3, r0
  4005ac:	71bb      	strb	r3, [r7, #6]
  4005ae:	460b      	mov	r3, r1
  4005b0:	717b      	strb	r3, [r7, #5]
  4005b2:	4613      	mov	r3, r2
  4005b4:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4005b6:	79fa      	ldrb	r2, [r7, #7]
  4005b8:	797b      	ldrb	r3, [r7, #5]
  4005ba:	4413      	add	r3, r2
  4005bc:	2b80      	cmp	r3, #128	; 0x80
  4005be:	dd06      	ble.n	4005ce <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  4005c0:	79fb      	ldrb	r3, [r7, #7]
  4005c2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  4005c6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  4005ca:	3380      	adds	r3, #128	; 0x80
  4005cc:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  4005ce:	79bb      	ldrb	r3, [r7, #6]
  4005d0:	08db      	lsrs	r3, r3, #3
  4005d2:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  4005d4:	79ba      	ldrb	r2, [r7, #6]
  4005d6:	7bfb      	ldrb	r3, [r7, #15]
  4005d8:	00db      	lsls	r3, r3, #3
  4005da:	1ad3      	subs	r3, r2, r3
  4005dc:	2201      	movs	r2, #1
  4005de:	fa02 f303 	lsl.w	r3, r2, r3
  4005e2:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  4005e4:	797b      	ldrb	r3, [r7, #5]
  4005e6:	2b00      	cmp	r3, #0
  4005e8:	d066      	beq.n	4006b8 <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4005ea:	793b      	ldrb	r3, [r7, #4]
  4005ec:	2b01      	cmp	r3, #1
  4005ee:	d01c      	beq.n	40062a <gfx_mono_generic_draw_horizontal_line+0x92>
  4005f0:	2b02      	cmp	r3, #2
  4005f2:	d05b      	beq.n	4006ac <gfx_mono_generic_draw_horizontal_line+0x114>
  4005f4:	2b00      	cmp	r3, #0
  4005f6:	d03b      	beq.n	400670 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  4005f8:	e05f      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  4005fa:	79fa      	ldrb	r2, [r7, #7]
  4005fc:	797b      	ldrb	r3, [r7, #5]
  4005fe:	4413      	add	r3, r2
  400600:	b2da      	uxtb	r2, r3
  400602:	7bfb      	ldrb	r3, [r7, #15]
  400604:	4611      	mov	r1, r2
  400606:	4618      	mov	r0, r3
  400608:	4b2d      	ldr	r3, [pc, #180]	; (4006c0 <gfx_mono_generic_draw_horizontal_line+0x128>)
  40060a:	4798      	blx	r3
  40060c:	4603      	mov	r3, r0
  40060e:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  400610:	7b7a      	ldrb	r2, [r7, #13]
  400612:	7bbb      	ldrb	r3, [r7, #14]
  400614:	4313      	orrs	r3, r2
  400616:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400618:	79fa      	ldrb	r2, [r7, #7]
  40061a:	797b      	ldrb	r3, [r7, #5]
  40061c:	4413      	add	r3, r2
  40061e:	b2d9      	uxtb	r1, r3
  400620:	7b7a      	ldrb	r2, [r7, #13]
  400622:	7bf8      	ldrb	r0, [r7, #15]
  400624:	2300      	movs	r3, #0
  400626:	4c27      	ldr	r4, [pc, #156]	; (4006c4 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400628:	47a0      	blx	r4
		while (length-- > 0) {
  40062a:	797b      	ldrb	r3, [r7, #5]
  40062c:	1e5a      	subs	r2, r3, #1
  40062e:	717a      	strb	r2, [r7, #5]
  400630:	2b00      	cmp	r3, #0
  400632:	d1e2      	bne.n	4005fa <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  400634:	e041      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400636:	79fa      	ldrb	r2, [r7, #7]
  400638:	797b      	ldrb	r3, [r7, #5]
  40063a:	4413      	add	r3, r2
  40063c:	b2da      	uxtb	r2, r3
  40063e:	7bfb      	ldrb	r3, [r7, #15]
  400640:	4611      	mov	r1, r2
  400642:	4618      	mov	r0, r3
  400644:	4b1e      	ldr	r3, [pc, #120]	; (4006c0 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400646:	4798      	blx	r3
  400648:	4603      	mov	r3, r0
  40064a:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  40064c:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400650:	43db      	mvns	r3, r3
  400652:	b25a      	sxtb	r2, r3
  400654:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400658:	4013      	ands	r3, r2
  40065a:	b25b      	sxtb	r3, r3
  40065c:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40065e:	79fa      	ldrb	r2, [r7, #7]
  400660:	797b      	ldrb	r3, [r7, #5]
  400662:	4413      	add	r3, r2
  400664:	b2d9      	uxtb	r1, r3
  400666:	7b7a      	ldrb	r2, [r7, #13]
  400668:	7bf8      	ldrb	r0, [r7, #15]
  40066a:	2300      	movs	r3, #0
  40066c:	4c15      	ldr	r4, [pc, #84]	; (4006c4 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  40066e:	47a0      	blx	r4
		while (length-- > 0) {
  400670:	797b      	ldrb	r3, [r7, #5]
  400672:	1e5a      	subs	r2, r3, #1
  400674:	717a      	strb	r2, [r7, #5]
  400676:	2b00      	cmp	r3, #0
  400678:	d1dd      	bne.n	400636 <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  40067a:	e01e      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  40067c:	79fa      	ldrb	r2, [r7, #7]
  40067e:	797b      	ldrb	r3, [r7, #5]
  400680:	4413      	add	r3, r2
  400682:	b2da      	uxtb	r2, r3
  400684:	7bfb      	ldrb	r3, [r7, #15]
  400686:	4611      	mov	r1, r2
  400688:	4618      	mov	r0, r3
  40068a:	4b0d      	ldr	r3, [pc, #52]	; (4006c0 <gfx_mono_generic_draw_horizontal_line+0x128>)
  40068c:	4798      	blx	r3
  40068e:	4603      	mov	r3, r0
  400690:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400692:	7b7a      	ldrb	r2, [r7, #13]
  400694:	7bbb      	ldrb	r3, [r7, #14]
  400696:	4053      	eors	r3, r2
  400698:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40069a:	79fa      	ldrb	r2, [r7, #7]
  40069c:	797b      	ldrb	r3, [r7, #5]
  40069e:	4413      	add	r3, r2
  4006a0:	b2d9      	uxtb	r1, r3
  4006a2:	7b7a      	ldrb	r2, [r7, #13]
  4006a4:	7bf8      	ldrb	r0, [r7, #15]
  4006a6:	2300      	movs	r3, #0
  4006a8:	4c06      	ldr	r4, [pc, #24]	; (4006c4 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  4006aa:	47a0      	blx	r4
		while (length-- > 0) {
  4006ac:	797b      	ldrb	r3, [r7, #5]
  4006ae:	1e5a      	subs	r2, r3, #1
  4006b0:	717a      	strb	r2, [r7, #5]
  4006b2:	2b00      	cmp	r3, #0
  4006b4:	d1e2      	bne.n	40067c <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  4006b6:	e000      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  4006b8:	bf00      	nop
	}
}
  4006ba:	3714      	adds	r7, #20
  4006bc:	46bd      	mov	sp, r7
  4006be:	bd90      	pop	{r4, r7, pc}
  4006c0:	00400c31 	.word	0x00400c31
  4006c4:	00400bad 	.word	0x00400bad

004006c8 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4006c8:	b590      	push	{r4, r7, lr}
  4006ca:	b085      	sub	sp, #20
  4006cc:	af00      	add	r7, sp, #0
  4006ce:	4604      	mov	r4, r0
  4006d0:	4608      	mov	r0, r1
  4006d2:	4611      	mov	r1, r2
  4006d4:	461a      	mov	r2, r3
  4006d6:	4623      	mov	r3, r4
  4006d8:	71fb      	strb	r3, [r7, #7]
  4006da:	4603      	mov	r3, r0
  4006dc:	71bb      	strb	r3, [r7, #6]
  4006de:	460b      	mov	r3, r1
  4006e0:	717b      	strb	r3, [r7, #5]
  4006e2:	4613      	mov	r3, r2
  4006e4:	713b      	strb	r3, [r7, #4]
	if (length == 0) {
  4006e6:	797b      	ldrb	r3, [r7, #5]
  4006e8:	2b00      	cmp	r3, #0
  4006ea:	d059      	beq.n	4007a0 <gfx_mono_generic_draw_vertical_line+0xd8>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  4006ec:	79ba      	ldrb	r2, [r7, #6]
  4006ee:	797b      	ldrb	r3, [r7, #5]
  4006f0:	4413      	add	r3, r2
  4006f2:	b2db      	uxtb	r3, r3
  4006f4:	3b01      	subs	r3, #1
  4006f6:	73fb      	strb	r3, [r7, #15]

	if (y == y2) {
  4006f8:	79ba      	ldrb	r2, [r7, #6]
  4006fa:	7bfb      	ldrb	r3, [r7, #15]
  4006fc:	429a      	cmp	r2, r3
  4006fe:	d106      	bne.n	40070e <gfx_mono_generic_draw_vertical_line+0x46>
		gfx_mono_draw_pixel(x, y, color);
  400700:	793a      	ldrb	r2, [r7, #4]
  400702:	79b9      	ldrb	r1, [r7, #6]
  400704:	79fb      	ldrb	r3, [r7, #7]
  400706:	4618      	mov	r0, r3
  400708:	4b27      	ldr	r3, [pc, #156]	; (4007a8 <gfx_mono_generic_draw_vertical_line+0xe0>)
  40070a:	4798      	blx	r3
		return;
  40070c:	e049      	b.n	4007a2 <gfx_mono_generic_draw_vertical_line+0xda>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
  40070e:	7bfb      	ldrb	r3, [r7, #15]
  400710:	2b1e      	cmp	r3, #30
  400712:	d901      	bls.n	400718 <gfx_mono_generic_draw_vertical_line+0x50>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
  400714:	231f      	movs	r3, #31
  400716:	73fb      	strb	r3, [r7, #15]
	}

	gfx_coord_t y1page = y / 8;
  400718:	79bb      	ldrb	r3, [r7, #6]
  40071a:	08db      	lsrs	r3, r3, #3
  40071c:	73bb      	strb	r3, [r7, #14]
	gfx_coord_t y2page = y2 / 8;
  40071e:	7bfb      	ldrb	r3, [r7, #15]
  400720:	08db      	lsrs	r3, r3, #3
  400722:	737b      	strb	r3, [r7, #13]

	uint8_t y1bitpos = y & 0x07;
  400724:	79bb      	ldrb	r3, [r7, #6]
  400726:	f003 0307 	and.w	r3, r3, #7
  40072a:	733b      	strb	r3, [r7, #12]
	uint8_t y2bitpos = y2 & 0x07;
  40072c:	7bfb      	ldrb	r3, [r7, #15]
  40072e:	f003 0307 	and.w	r3, r3, #7
  400732:	72fb      	strb	r3, [r7, #11]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  400734:	7b3b      	ldrb	r3, [r7, #12]
  400736:	22ff      	movs	r2, #255	; 0xff
  400738:	fa02 f303 	lsl.w	r3, r2, r3
  40073c:	72bb      	strb	r3, [r7, #10]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  40073e:	7afb      	ldrb	r3, [r7, #11]
  400740:	f1c3 0307 	rsb	r3, r3, #7
  400744:	22ff      	movs	r2, #255	; 0xff
  400746:	fa42 f303 	asr.w	r3, r2, r3
  40074a:	727b      	strb	r3, [r7, #9]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  40074c:	7bba      	ldrb	r2, [r7, #14]
  40074e:	7b7b      	ldrb	r3, [r7, #13]
  400750:	429a      	cmp	r2, r3
  400752:	d10a      	bne.n	40076a <gfx_mono_generic_draw_vertical_line+0xa2>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
  400754:	7aba      	ldrb	r2, [r7, #10]
  400756:	7a7b      	ldrb	r3, [r7, #9]
  400758:	4013      	ands	r3, r2
  40075a:	723b      	strb	r3, [r7, #8]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  40075c:	793b      	ldrb	r3, [r7, #4]
  40075e:	7a3a      	ldrb	r2, [r7, #8]
  400760:	79f9      	ldrb	r1, [r7, #7]
  400762:	7bb8      	ldrb	r0, [r7, #14]
  400764:	4c11      	ldr	r4, [pc, #68]	; (4007ac <gfx_mono_generic_draw_vertical_line+0xe4>)
  400766:	47a0      	blx	r4
  400768:	e01b      	b.n	4007a2 <gfx_mono_generic_draw_vertical_line+0xda>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  40076a:	793b      	ldrb	r3, [r7, #4]
  40076c:	7aba      	ldrb	r2, [r7, #10]
  40076e:	79f9      	ldrb	r1, [r7, #7]
  400770:	7bb8      	ldrb	r0, [r7, #14]
  400772:	4c0e      	ldr	r4, [pc, #56]	; (4007ac <gfx_mono_generic_draw_vertical_line+0xe4>)
  400774:	47a0      	blx	r4

		while (++y1page < y2page) {
  400776:	e005      	b.n	400784 <gfx_mono_generic_draw_vertical_line+0xbc>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  400778:	793b      	ldrb	r3, [r7, #4]
  40077a:	79f9      	ldrb	r1, [r7, #7]
  40077c:	7bb8      	ldrb	r0, [r7, #14]
  40077e:	22ff      	movs	r2, #255	; 0xff
  400780:	4c0a      	ldr	r4, [pc, #40]	; (4007ac <gfx_mono_generic_draw_vertical_line+0xe4>)
  400782:	47a0      	blx	r4
		while (++y1page < y2page) {
  400784:	7bbb      	ldrb	r3, [r7, #14]
  400786:	3301      	adds	r3, #1
  400788:	73bb      	strb	r3, [r7, #14]
  40078a:	7bba      	ldrb	r2, [r7, #14]
  40078c:	7b7b      	ldrb	r3, [r7, #13]
  40078e:	429a      	cmp	r2, r3
  400790:	d3f2      	bcc.n	400778 <gfx_mono_generic_draw_vertical_line+0xb0>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400792:	793b      	ldrb	r3, [r7, #4]
  400794:	7a7a      	ldrb	r2, [r7, #9]
  400796:	79f9      	ldrb	r1, [r7, #7]
  400798:	7b78      	ldrb	r0, [r7, #13]
  40079a:	4c04      	ldr	r4, [pc, #16]	; (4007ac <gfx_mono_generic_draw_vertical_line+0xe4>)
  40079c:	47a0      	blx	r4
  40079e:	e000      	b.n	4007a2 <gfx_mono_generic_draw_vertical_line+0xda>
		return;
  4007a0:	bf00      	nop
	}
}
  4007a2:	3714      	adds	r7, #20
  4007a4:	46bd      	mov	sp, r7
  4007a6:	bd90      	pop	{r4, r7, pc}
  4007a8:	00400b11 	.word	0x00400b11
  4007ac:	00400c5d 	.word	0x00400c5d

004007b0 <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4007b0:	b590      	push	{r4, r7, lr}
  4007b2:	b083      	sub	sp, #12
  4007b4:	af00      	add	r7, sp, #0
  4007b6:	4604      	mov	r4, r0
  4007b8:	4608      	mov	r0, r1
  4007ba:	4611      	mov	r1, r2
  4007bc:	461a      	mov	r2, r3
  4007be:	4623      	mov	r3, r4
  4007c0:	71fb      	strb	r3, [r7, #7]
  4007c2:	4603      	mov	r3, r0
  4007c4:	71bb      	strb	r3, [r7, #6]
  4007c6:	460b      	mov	r3, r1
  4007c8:	717b      	strb	r3, [r7, #5]
  4007ca:	4613      	mov	r3, r2
  4007cc:	713b      	strb	r3, [r7, #4]
	gfx_mono_draw_horizontal_line(x, y, width, color);
  4007ce:	7e3b      	ldrb	r3, [r7, #24]
  4007d0:	797a      	ldrb	r2, [r7, #5]
  4007d2:	79b9      	ldrb	r1, [r7, #6]
  4007d4:	79f8      	ldrb	r0, [r7, #7]
  4007d6:	4c11      	ldr	r4, [pc, #68]	; (40081c <gfx_mono_generic_draw_rect+0x6c>)
  4007d8:	47a0      	blx	r4
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
  4007da:	79ba      	ldrb	r2, [r7, #6]
  4007dc:	793b      	ldrb	r3, [r7, #4]
  4007de:	4413      	add	r3, r2
  4007e0:	b2db      	uxtb	r3, r3
  4007e2:	3b01      	subs	r3, #1
  4007e4:	b2d9      	uxtb	r1, r3
  4007e6:	7e3b      	ldrb	r3, [r7, #24]
  4007e8:	797a      	ldrb	r2, [r7, #5]
  4007ea:	79f8      	ldrb	r0, [r7, #7]
  4007ec:	4c0b      	ldr	r4, [pc, #44]	; (40081c <gfx_mono_generic_draw_rect+0x6c>)
  4007ee:	47a0      	blx	r4

	gfx_mono_draw_vertical_line(x, y, height, color);
  4007f0:	7e3b      	ldrb	r3, [r7, #24]
  4007f2:	793a      	ldrb	r2, [r7, #4]
  4007f4:	79b9      	ldrb	r1, [r7, #6]
  4007f6:	79f8      	ldrb	r0, [r7, #7]
  4007f8:	4c09      	ldr	r4, [pc, #36]	; (400820 <gfx_mono_generic_draw_rect+0x70>)
  4007fa:	47a0      	blx	r4
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
  4007fc:	79fa      	ldrb	r2, [r7, #7]
  4007fe:	797b      	ldrb	r3, [r7, #5]
  400800:	4413      	add	r3, r2
  400802:	b2db      	uxtb	r3, r3
  400804:	3b01      	subs	r3, #1
  400806:	b2d8      	uxtb	r0, r3
  400808:	7e3b      	ldrb	r3, [r7, #24]
  40080a:	793a      	ldrb	r2, [r7, #4]
  40080c:	79b9      	ldrb	r1, [r7, #6]
  40080e:	4c04      	ldr	r4, [pc, #16]	; (400820 <gfx_mono_generic_draw_rect+0x70>)
  400810:	47a0      	blx	r4
}
  400812:	bf00      	nop
  400814:	370c      	adds	r7, #12
  400816:	46bd      	mov	sp, r7
  400818:	bd90      	pop	{r4, r7, pc}
  40081a:	bf00      	nop
  40081c:	00400599 	.word	0x00400599
  400820:	004006c9 	.word	0x004006c9

00400824 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  400824:	b590      	push	{r4, r7, lr}
  400826:	b083      	sub	sp, #12
  400828:	af00      	add	r7, sp, #0
  40082a:	4604      	mov	r4, r0
  40082c:	4608      	mov	r0, r1
  40082e:	4611      	mov	r1, r2
  400830:	461a      	mov	r2, r3
  400832:	4623      	mov	r3, r4
  400834:	71fb      	strb	r3, [r7, #7]
  400836:	4603      	mov	r3, r0
  400838:	71bb      	strb	r3, [r7, #6]
  40083a:	460b      	mov	r3, r1
  40083c:	717b      	strb	r3, [r7, #5]
  40083e:	4613      	mov	r3, r2
  400840:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  400842:	793b      	ldrb	r3, [r7, #4]
  400844:	2b00      	cmp	r3, #0
  400846:	d00f      	beq.n	400868 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400848:	e008      	b.n	40085c <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  40084a:	79ba      	ldrb	r2, [r7, #6]
  40084c:	793b      	ldrb	r3, [r7, #4]
  40084e:	4413      	add	r3, r2
  400850:	b2d9      	uxtb	r1, r3
  400852:	7e3b      	ldrb	r3, [r7, #24]
  400854:	797a      	ldrb	r2, [r7, #5]
  400856:	79f8      	ldrb	r0, [r7, #7]
  400858:	4c05      	ldr	r4, [pc, #20]	; (400870 <gfx_mono_generic_draw_filled_rect+0x4c>)
  40085a:	47a0      	blx	r4
	while (height-- > 0) {
  40085c:	793b      	ldrb	r3, [r7, #4]
  40085e:	1e5a      	subs	r2, r3, #1
  400860:	713a      	strb	r2, [r7, #4]
  400862:	2b00      	cmp	r3, #0
  400864:	d1f1      	bne.n	40084a <gfx_mono_generic_draw_filled_rect+0x26>
  400866:	e000      	b.n	40086a <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  400868:	bf00      	nop
	}
}
  40086a:	370c      	adds	r7, #12
  40086c:	46bd      	mov	sp, r7
  40086e:	bd90      	pop	{r4, r7, pc}
  400870:	00400599 	.word	0x00400599

00400874 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  400874:	b580      	push	{r7, lr}
  400876:	b086      	sub	sp, #24
  400878:	af00      	add	r7, sp, #0
  40087a:	603b      	str	r3, [r7, #0]
  40087c:	4603      	mov	r3, r0
  40087e:	71fb      	strb	r3, [r7, #7]
  400880:	460b      	mov	r3, r1
  400882:	71bb      	strb	r3, [r7, #6]
  400884:	4613      	mov	r3, r2
  400886:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  400888:	79bb      	ldrb	r3, [r7, #6]
  40088a:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  40088c:	797b      	ldrb	r3, [r7, #5]
  40088e:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400890:	683b      	ldr	r3, [r7, #0]
  400892:	7a1b      	ldrb	r3, [r3, #8]
  400894:	08db      	lsrs	r3, r3, #3
  400896:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400898:	683b      	ldr	r3, [r7, #0]
  40089a:	7a1b      	ldrb	r3, [r3, #8]
  40089c:	f003 0307 	and.w	r3, r3, #7
  4008a0:	b2db      	uxtb	r3, r3
  4008a2:	2b00      	cmp	r3, #0
  4008a4:	d002      	beq.n	4008ac <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  4008a6:	7cfb      	ldrb	r3, [r7, #19]
  4008a8:	3301      	adds	r3, #1
  4008aa:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  4008ac:	7cfb      	ldrb	r3, [r7, #19]
  4008ae:	b29a      	uxth	r2, r3
  4008b0:	683b      	ldr	r3, [r7, #0]
  4008b2:	7a5b      	ldrb	r3, [r3, #9]
  4008b4:	b29b      	uxth	r3, r3
  4008b6:	fb12 f303 	smulbb	r3, r2, r3
  4008ba:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  4008bc:	79fb      	ldrb	r3, [r7, #7]
  4008be:	6839      	ldr	r1, [r7, #0]
  4008c0:	7a89      	ldrb	r1, [r1, #10]
  4008c2:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  4008c4:	b29b      	uxth	r3, r3
  4008c6:	fb12 f303 	smulbb	r3, r2, r3
  4008ca:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  4008cc:	683b      	ldr	r3, [r7, #0]
  4008ce:	685a      	ldr	r2, [r3, #4]
  4008d0:	89bb      	ldrh	r3, [r7, #12]
  4008d2:	4413      	add	r3, r2
  4008d4:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  4008d6:	683b      	ldr	r3, [r7, #0]
  4008d8:	7a5b      	ldrb	r3, [r3, #9]
  4008da:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  4008dc:	2300      	movs	r3, #0
  4008de:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  4008e0:	683b      	ldr	r3, [r7, #0]
  4008e2:	7a1b      	ldrb	r3, [r3, #8]
  4008e4:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  4008e6:	2300      	movs	r3, #0
  4008e8:	747b      	strb	r3, [r7, #17]
  4008ea:	e01e      	b.n	40092a <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4008ec:	7c7b      	ldrb	r3, [r7, #17]
  4008ee:	f003 0307 	and.w	r3, r3, #7
  4008f2:	b2db      	uxtb	r3, r3
  4008f4:	2b00      	cmp	r3, #0
  4008f6:	d105      	bne.n	400904 <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4008f8:	697b      	ldr	r3, [r7, #20]
  4008fa:	781b      	ldrb	r3, [r3, #0]
  4008fc:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  4008fe:	697b      	ldr	r3, [r7, #20]
  400900:	3301      	adds	r3, #1
  400902:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  400904:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400908:	2b00      	cmp	r3, #0
  40090a:	da05      	bge.n	400918 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40090c:	7bf9      	ldrb	r1, [r7, #15]
  40090e:	7c3b      	ldrb	r3, [r7, #16]
  400910:	2201      	movs	r2, #1
  400912:	4618      	mov	r0, r3
  400914:	4b0e      	ldr	r3, [pc, #56]	; (400950 <gfx_mono_draw_char_progmem+0xdc>)
  400916:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400918:	7c3b      	ldrb	r3, [r7, #16]
  40091a:	3301      	adds	r3, #1
  40091c:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  40091e:	7bbb      	ldrb	r3, [r7, #14]
  400920:	005b      	lsls	r3, r3, #1
  400922:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  400924:	7c7b      	ldrb	r3, [r7, #17]
  400926:	3301      	adds	r3, #1
  400928:	747b      	strb	r3, [r7, #17]
  40092a:	7c7a      	ldrb	r2, [r7, #17]
  40092c:	7afb      	ldrb	r3, [r7, #11]
  40092e:	429a      	cmp	r2, r3
  400930:	d3dc      	bcc.n	4008ec <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  400932:	7bfb      	ldrb	r3, [r7, #15]
  400934:	3301      	adds	r3, #1
  400936:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400938:	79bb      	ldrb	r3, [r7, #6]
  40093a:	743b      	strb	r3, [r7, #16]
		rows_left--;
  40093c:	7cbb      	ldrb	r3, [r7, #18]
  40093e:	3b01      	subs	r3, #1
  400940:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  400942:	7cbb      	ldrb	r3, [r7, #18]
  400944:	2b00      	cmp	r3, #0
  400946:	d1c9      	bne.n	4008dc <gfx_mono_draw_char_progmem+0x68>
}
  400948:	bf00      	nop
  40094a:	3718      	adds	r7, #24
  40094c:	46bd      	mov	sp, r7
  40094e:	bd80      	pop	{r7, pc}
  400950:	00400b11 	.word	0x00400b11

00400954 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400954:	b590      	push	{r4, r7, lr}
  400956:	b085      	sub	sp, #20
  400958:	af02      	add	r7, sp, #8
  40095a:	603b      	str	r3, [r7, #0]
  40095c:	4603      	mov	r3, r0
  40095e:	71fb      	strb	r3, [r7, #7]
  400960:	460b      	mov	r3, r1
  400962:	71bb      	strb	r3, [r7, #6]
  400964:	4613      	mov	r3, r2
  400966:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400968:	683b      	ldr	r3, [r7, #0]
  40096a:	7a1a      	ldrb	r2, [r3, #8]
  40096c:	683b      	ldr	r3, [r7, #0]
  40096e:	7a5c      	ldrb	r4, [r3, #9]
  400970:	7979      	ldrb	r1, [r7, #5]
  400972:	79b8      	ldrb	r0, [r7, #6]
  400974:	2300      	movs	r3, #0
  400976:	9300      	str	r3, [sp, #0]
  400978:	4623      	mov	r3, r4
  40097a:	4c09      	ldr	r4, [pc, #36]	; (4009a0 <gfx_mono_draw_char+0x4c>)
  40097c:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  40097e:	683b      	ldr	r3, [r7, #0]
  400980:	781b      	ldrb	r3, [r3, #0]
  400982:	2b00      	cmp	r3, #0
  400984:	d000      	beq.n	400988 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  400986:	e006      	b.n	400996 <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  400988:	797a      	ldrb	r2, [r7, #5]
  40098a:	79b9      	ldrb	r1, [r7, #6]
  40098c:	79f8      	ldrb	r0, [r7, #7]
  40098e:	683b      	ldr	r3, [r7, #0]
  400990:	4c04      	ldr	r4, [pc, #16]	; (4009a4 <gfx_mono_draw_char+0x50>)
  400992:	47a0      	blx	r4
		break;
  400994:	bf00      	nop
	}
}
  400996:	bf00      	nop
  400998:	370c      	adds	r7, #12
  40099a:	46bd      	mov	sp, r7
  40099c:	bd90      	pop	{r4, r7, pc}
  40099e:	bf00      	nop
  4009a0:	00400825 	.word	0x00400825
  4009a4:	00400875 	.word	0x00400875

004009a8 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4009a8:	b590      	push	{r4, r7, lr}
  4009aa:	b087      	sub	sp, #28
  4009ac:	af00      	add	r7, sp, #0
  4009ae:	60f8      	str	r0, [r7, #12]
  4009b0:	607b      	str	r3, [r7, #4]
  4009b2:	460b      	mov	r3, r1
  4009b4:	72fb      	strb	r3, [r7, #11]
  4009b6:	4613      	mov	r3, r2
  4009b8:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  4009ba:	7afb      	ldrb	r3, [r7, #11]
  4009bc:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  4009be:	68fb      	ldr	r3, [r7, #12]
  4009c0:	781b      	ldrb	r3, [r3, #0]
  4009c2:	2b0a      	cmp	r3, #10
  4009c4:	d109      	bne.n	4009da <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  4009c6:	7dfb      	ldrb	r3, [r7, #23]
  4009c8:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  4009ca:	687b      	ldr	r3, [r7, #4]
  4009cc:	7a5a      	ldrb	r2, [r3, #9]
  4009ce:	7abb      	ldrb	r3, [r7, #10]
  4009d0:	4413      	add	r3, r2
  4009d2:	b2db      	uxtb	r3, r3
  4009d4:	3301      	adds	r3, #1
  4009d6:	72bb      	strb	r3, [r7, #10]
  4009d8:	e00f      	b.n	4009fa <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  4009da:	68fb      	ldr	r3, [r7, #12]
  4009dc:	781b      	ldrb	r3, [r3, #0]
  4009de:	2b0d      	cmp	r3, #13
  4009e0:	d00b      	beq.n	4009fa <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4009e2:	68fb      	ldr	r3, [r7, #12]
  4009e4:	7818      	ldrb	r0, [r3, #0]
  4009e6:	7aba      	ldrb	r2, [r7, #10]
  4009e8:	7af9      	ldrb	r1, [r7, #11]
  4009ea:	687b      	ldr	r3, [r7, #4]
  4009ec:	4c08      	ldr	r4, [pc, #32]	; (400a10 <gfx_mono_draw_string+0x68>)
  4009ee:	47a0      	blx	r4
			x += font->width;
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	7a1a      	ldrb	r2, [r3, #8]
  4009f4:	7afb      	ldrb	r3, [r7, #11]
  4009f6:	4413      	add	r3, r2
  4009f8:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  4009fa:	68fb      	ldr	r3, [r7, #12]
  4009fc:	3301      	adds	r3, #1
  4009fe:	60fb      	str	r3, [r7, #12]
  400a00:	68fb      	ldr	r3, [r7, #12]
  400a02:	781b      	ldrb	r3, [r3, #0]
  400a04:	2b00      	cmp	r3, #0
  400a06:	d1da      	bne.n	4009be <gfx_mono_draw_string+0x16>
}
  400a08:	bf00      	nop
  400a0a:	371c      	adds	r7, #28
  400a0c:	46bd      	mov	sp, r7
  400a0e:	bd90      	pop	{r4, r7, pc}
  400a10:	00400955 	.word	0x00400955

00400a14 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400a14:	b580      	push	{r7, lr}
  400a16:	b082      	sub	sp, #8
  400a18:	af00      	add	r7, sp, #0
  400a1a:	4603      	mov	r3, r0
  400a1c:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400a1e:	79fb      	ldrb	r3, [r7, #7]
  400a20:	f003 030f 	and.w	r3, r3, #15
  400a24:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400a26:	79fb      	ldrb	r3, [r7, #7]
  400a28:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400a2c:	b2db      	uxtb	r3, r3
  400a2e:	4618      	mov	r0, r3
  400a30:	4b02      	ldr	r3, [pc, #8]	; (400a3c <ssd1306_set_page_address+0x28>)
  400a32:	4798      	blx	r3
	
}
  400a34:	bf00      	nop
  400a36:	3708      	adds	r7, #8
  400a38:	46bd      	mov	sp, r7
  400a3a:	bd80      	pop	{r7, pc}
  400a3c:	0040139d 	.word	0x0040139d

00400a40 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400a40:	b580      	push	{r7, lr}
  400a42:	b082      	sub	sp, #8
  400a44:	af00      	add	r7, sp, #0
  400a46:	4603      	mov	r3, r0
  400a48:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400a4a:	79fb      	ldrb	r3, [r7, #7]
  400a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400a50:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400a52:	79fb      	ldrb	r3, [r7, #7]
  400a54:	091b      	lsrs	r3, r3, #4
  400a56:	b2db      	uxtb	r3, r3
  400a58:	f043 0310 	orr.w	r3, r3, #16
  400a5c:	b2db      	uxtb	r3, r3
  400a5e:	4618      	mov	r0, r3
  400a60:	4b06      	ldr	r3, [pc, #24]	; (400a7c <ssd1306_set_column_address+0x3c>)
  400a62:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400a64:	79fb      	ldrb	r3, [r7, #7]
  400a66:	f003 030f 	and.w	r3, r3, #15
  400a6a:	b2db      	uxtb	r3, r3
  400a6c:	4618      	mov	r0, r3
  400a6e:	4b03      	ldr	r3, [pc, #12]	; (400a7c <ssd1306_set_column_address+0x3c>)
  400a70:	4798      	blx	r3
}
  400a72:	bf00      	nop
  400a74:	3708      	adds	r7, #8
  400a76:	46bd      	mov	sp, r7
  400a78:	bd80      	pop	{r7, pc}
  400a7a:	bf00      	nop
  400a7c:	0040139d 	.word	0x0040139d

00400a80 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400a80:	b580      	push	{r7, lr}
  400a82:	b082      	sub	sp, #8
  400a84:	af00      	add	r7, sp, #0
  400a86:	4603      	mov	r3, r0
  400a88:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400a8a:	79fb      	ldrb	r3, [r7, #7]
  400a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400a90:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400a92:	79fb      	ldrb	r3, [r7, #7]
  400a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400a98:	b2db      	uxtb	r3, r3
  400a9a:	4618      	mov	r0, r3
  400a9c:	4b02      	ldr	r3, [pc, #8]	; (400aa8 <ssd1306_set_display_start_line_address+0x28>)
  400a9e:	4798      	blx	r3
}
  400aa0:	bf00      	nop
  400aa2:	3708      	adds	r7, #8
  400aa4:	46bd      	mov	sp, r7
  400aa6:	bd80      	pop	{r7, pc}
  400aa8:	0040139d 	.word	0x0040139d

00400aac <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400aac:	b590      	push	{r4, r7, lr}
  400aae:	b083      	sub	sp, #12
  400ab0:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400ab2:	4812      	ldr	r0, [pc, #72]	; (400afc <gfx_mono_ssd1306_init+0x50>)
  400ab4:	4b12      	ldr	r3, [pc, #72]	; (400b00 <gfx_mono_ssd1306_init+0x54>)
  400ab6:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400ab8:	4b12      	ldr	r3, [pc, #72]	; (400b04 <gfx_mono_ssd1306_init+0x58>)
  400aba:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400abc:	2000      	movs	r0, #0
  400abe:	4b12      	ldr	r3, [pc, #72]	; (400b08 <gfx_mono_ssd1306_init+0x5c>)
  400ac0:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400ac2:	2300      	movs	r3, #0
  400ac4:	71fb      	strb	r3, [r7, #7]
  400ac6:	e012      	b.n	400aee <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400ac8:	2300      	movs	r3, #0
  400aca:	71bb      	strb	r3, [r7, #6]
  400acc:	e008      	b.n	400ae0 <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400ace:	79b9      	ldrb	r1, [r7, #6]
  400ad0:	79f8      	ldrb	r0, [r7, #7]
  400ad2:	2301      	movs	r3, #1
  400ad4:	2200      	movs	r2, #0
  400ad6:	4c0d      	ldr	r4, [pc, #52]	; (400b0c <gfx_mono_ssd1306_init+0x60>)
  400ad8:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400ada:	79bb      	ldrb	r3, [r7, #6]
  400adc:	3301      	adds	r3, #1
  400ade:	71bb      	strb	r3, [r7, #6]
  400ae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400ae4:	2b00      	cmp	r3, #0
  400ae6:	daf2      	bge.n	400ace <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400ae8:	79fb      	ldrb	r3, [r7, #7]
  400aea:	3301      	adds	r3, #1
  400aec:	71fb      	strb	r3, [r7, #7]
  400aee:	79fb      	ldrb	r3, [r7, #7]
  400af0:	2b03      	cmp	r3, #3
  400af2:	d9e9      	bls.n	400ac8 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400af4:	bf00      	nop
  400af6:	370c      	adds	r7, #12
  400af8:	46bd      	mov	sp, r7
  400afa:	bd90      	pop	{r4, r7, pc}
  400afc:	204009f0 	.word	0x204009f0
  400b00:	0040050d 	.word	0x0040050d
  400b04:	004012ed 	.word	0x004012ed
  400b08:	00400a81 	.word	0x00400a81
  400b0c:	00400bad 	.word	0x00400bad

00400b10 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  400b10:	b590      	push	{r4, r7, lr}
  400b12:	b085      	sub	sp, #20
  400b14:	af00      	add	r7, sp, #0
  400b16:	4603      	mov	r3, r0
  400b18:	71fb      	strb	r3, [r7, #7]
  400b1a:	460b      	mov	r3, r1
  400b1c:	71bb      	strb	r3, [r7, #6]
  400b1e:	4613      	mov	r3, r2
  400b20:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b26:	2b00      	cmp	r3, #0
  400b28:	db38      	blt.n	400b9c <gfx_mono_ssd1306_draw_pixel+0x8c>
  400b2a:	79bb      	ldrb	r3, [r7, #6]
  400b2c:	2b1f      	cmp	r3, #31
  400b2e:	d835      	bhi.n	400b9c <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b30:	79bb      	ldrb	r3, [r7, #6]
  400b32:	08db      	lsrs	r3, r3, #3
  400b34:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  400b36:	79ba      	ldrb	r2, [r7, #6]
  400b38:	7bbb      	ldrb	r3, [r7, #14]
  400b3a:	00db      	lsls	r3, r3, #3
  400b3c:	1ad3      	subs	r3, r2, r3
  400b3e:	2201      	movs	r2, #1
  400b40:	fa02 f303 	lsl.w	r3, r2, r3
  400b44:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  400b46:	79fa      	ldrb	r2, [r7, #7]
  400b48:	7bbb      	ldrb	r3, [r7, #14]
  400b4a:	4611      	mov	r1, r2
  400b4c:	4618      	mov	r0, r3
  400b4e:	4b15      	ldr	r3, [pc, #84]	; (400ba4 <gfx_mono_ssd1306_draw_pixel+0x94>)
  400b50:	4798      	blx	r3
  400b52:	4603      	mov	r3, r0
  400b54:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400b56:	797b      	ldrb	r3, [r7, #5]
  400b58:	2b01      	cmp	r3, #1
  400b5a:	d004      	beq.n	400b66 <gfx_mono_ssd1306_draw_pixel+0x56>
  400b5c:	2b02      	cmp	r3, #2
  400b5e:	d011      	beq.n	400b84 <gfx_mono_ssd1306_draw_pixel+0x74>
  400b60:	2b00      	cmp	r3, #0
  400b62:	d005      	beq.n	400b70 <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400b64:	e013      	b.n	400b8e <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400b66:	7bfa      	ldrb	r2, [r7, #15]
  400b68:	7b7b      	ldrb	r3, [r7, #13]
  400b6a:	4313      	orrs	r3, r2
  400b6c:	73fb      	strb	r3, [r7, #15]
		break;
  400b6e:	e00e      	b.n	400b8e <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400b70:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400b74:	43db      	mvns	r3, r3
  400b76:	b25a      	sxtb	r2, r3
  400b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400b7c:	4013      	ands	r3, r2
  400b7e:	b25b      	sxtb	r3, r3
  400b80:	73fb      	strb	r3, [r7, #15]
		break;
  400b82:	e004      	b.n	400b8e <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400b84:	7bfa      	ldrb	r2, [r7, #15]
  400b86:	7b7b      	ldrb	r3, [r7, #13]
  400b88:	4053      	eors	r3, r2
  400b8a:	73fb      	strb	r3, [r7, #15]
		break;
  400b8c:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400b8e:	7bfa      	ldrb	r2, [r7, #15]
  400b90:	79f9      	ldrb	r1, [r7, #7]
  400b92:	7bb8      	ldrb	r0, [r7, #14]
  400b94:	2300      	movs	r3, #0
  400b96:	4c04      	ldr	r4, [pc, #16]	; (400ba8 <gfx_mono_ssd1306_draw_pixel+0x98>)
  400b98:	47a0      	blx	r4
  400b9a:	e000      	b.n	400b9e <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400b9c:	bf00      	nop
}
  400b9e:	3714      	adds	r7, #20
  400ba0:	46bd      	mov	sp, r7
  400ba2:	bd90      	pop	{r4, r7, pc}
  400ba4:	00400c31 	.word	0x00400c31
  400ba8:	00400bad 	.word	0x00400bad

00400bac <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400bac:	b590      	push	{r4, r7, lr}
  400bae:	b083      	sub	sp, #12
  400bb0:	af00      	add	r7, sp, #0
  400bb2:	4604      	mov	r4, r0
  400bb4:	4608      	mov	r0, r1
  400bb6:	4611      	mov	r1, r2
  400bb8:	461a      	mov	r2, r3
  400bba:	4623      	mov	r3, r4
  400bbc:	71fb      	strb	r3, [r7, #7]
  400bbe:	4603      	mov	r3, r0
  400bc0:	71bb      	strb	r3, [r7, #6]
  400bc2:	460b      	mov	r3, r1
  400bc4:	717b      	strb	r3, [r7, #5]
  400bc6:	4613      	mov	r3, r2
  400bc8:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400bca:	793b      	ldrb	r3, [r7, #4]
  400bcc:	f083 0301 	eor.w	r3, r3, #1
  400bd0:	b2db      	uxtb	r3, r3
  400bd2:	2b00      	cmp	r3, #0
  400bd4:	d00a      	beq.n	400bec <gfx_mono_ssd1306_put_byte+0x40>
  400bd6:	79ba      	ldrb	r2, [r7, #6]
  400bd8:	79fb      	ldrb	r3, [r7, #7]
  400bda:	4611      	mov	r1, r2
  400bdc:	4618      	mov	r0, r3
  400bde:	4b0f      	ldr	r3, [pc, #60]	; (400c1c <gfx_mono_ssd1306_put_byte+0x70>)
  400be0:	4798      	blx	r3
  400be2:	4603      	mov	r3, r0
  400be4:	461a      	mov	r2, r3
  400be6:	797b      	ldrb	r3, [r7, #5]
  400be8:	4293      	cmp	r3, r2
  400bea:	d012      	beq.n	400c12 <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400bec:	797a      	ldrb	r2, [r7, #5]
  400bee:	79b9      	ldrb	r1, [r7, #6]
  400bf0:	79fb      	ldrb	r3, [r7, #7]
  400bf2:	4618      	mov	r0, r3
  400bf4:	4b0a      	ldr	r3, [pc, #40]	; (400c20 <gfx_mono_ssd1306_put_byte+0x74>)
  400bf6:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400bf8:	79fb      	ldrb	r3, [r7, #7]
  400bfa:	4618      	mov	r0, r3
  400bfc:	4b09      	ldr	r3, [pc, #36]	; (400c24 <gfx_mono_ssd1306_put_byte+0x78>)
  400bfe:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400c00:	79bb      	ldrb	r3, [r7, #6]
  400c02:	4618      	mov	r0, r3
  400c04:	4b08      	ldr	r3, [pc, #32]	; (400c28 <gfx_mono_ssd1306_put_byte+0x7c>)
  400c06:	4798      	blx	r3

	ssd1306_write_data(data);
  400c08:	797b      	ldrb	r3, [r7, #5]
  400c0a:	4618      	mov	r0, r3
  400c0c:	4b07      	ldr	r3, [pc, #28]	; (400c2c <gfx_mono_ssd1306_put_byte+0x80>)
  400c0e:	4798      	blx	r3
  400c10:	e000      	b.n	400c14 <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400c12:	bf00      	nop
}
  400c14:	370c      	adds	r7, #12
  400c16:	46bd      	mov	sp, r7
  400c18:	bd90      	pop	{r4, r7, pc}
  400c1a:	bf00      	nop
  400c1c:	00400565 	.word	0x00400565
  400c20:	0040052d 	.word	0x0040052d
  400c24:	00400a15 	.word	0x00400a15
  400c28:	00400a41 	.word	0x00400a41
  400c2c:	00401441 	.word	0x00401441

00400c30 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400c30:	b580      	push	{r7, lr}
  400c32:	b082      	sub	sp, #8
  400c34:	af00      	add	r7, sp, #0
  400c36:	4603      	mov	r3, r0
  400c38:	460a      	mov	r2, r1
  400c3a:	71fb      	strb	r3, [r7, #7]
  400c3c:	4613      	mov	r3, r2
  400c3e:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c40:	79ba      	ldrb	r2, [r7, #6]
  400c42:	79fb      	ldrb	r3, [r7, #7]
  400c44:	4611      	mov	r1, r2
  400c46:	4618      	mov	r0, r3
  400c48:	4b03      	ldr	r3, [pc, #12]	; (400c58 <gfx_mono_ssd1306_get_byte+0x28>)
  400c4a:	4798      	blx	r3
  400c4c:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400c4e:	4618      	mov	r0, r3
  400c50:	3708      	adds	r7, #8
  400c52:	46bd      	mov	sp, r7
  400c54:	bd80      	pop	{r7, pc}
  400c56:	bf00      	nop
  400c58:	00400565 	.word	0x00400565

00400c5c <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400c5c:	b590      	push	{r4, r7, lr}
  400c5e:	b085      	sub	sp, #20
  400c60:	af00      	add	r7, sp, #0
  400c62:	4604      	mov	r4, r0
  400c64:	4608      	mov	r0, r1
  400c66:	4611      	mov	r1, r2
  400c68:	461a      	mov	r2, r3
  400c6a:	4623      	mov	r3, r4
  400c6c:	71fb      	strb	r3, [r7, #7]
  400c6e:	4603      	mov	r3, r0
  400c70:	71bb      	strb	r3, [r7, #6]
  400c72:	460b      	mov	r3, r1
  400c74:	717b      	strb	r3, [r7, #5]
  400c76:	4613      	mov	r3, r2
  400c78:	713b      	strb	r3, [r7, #4]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
  400c7a:	79ba      	ldrb	r2, [r7, #6]
  400c7c:	79fb      	ldrb	r3, [r7, #7]
  400c7e:	4611      	mov	r1, r2
  400c80:	4618      	mov	r0, r3
  400c82:	4b15      	ldr	r3, [pc, #84]	; (400cd8 <gfx_mono_ssd1306_mask_byte+0x7c>)
  400c84:	4798      	blx	r3
  400c86:	4603      	mov	r3, r0
  400c88:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400c8a:	793b      	ldrb	r3, [r7, #4]
  400c8c:	2b01      	cmp	r3, #1
  400c8e:	d004      	beq.n	400c9a <gfx_mono_ssd1306_mask_byte+0x3e>
  400c90:	2b02      	cmp	r3, #2
  400c92:	d011      	beq.n	400cb8 <gfx_mono_ssd1306_mask_byte+0x5c>
  400c94:	2b00      	cmp	r3, #0
  400c96:	d005      	beq.n	400ca4 <gfx_mono_ssd1306_mask_byte+0x48>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
  400c98:	e013      	b.n	400cc2 <gfx_mono_ssd1306_mask_byte+0x66>
		temp |= pixel_mask;
  400c9a:	7bfa      	ldrb	r2, [r7, #15]
  400c9c:	797b      	ldrb	r3, [r7, #5]
  400c9e:	4313      	orrs	r3, r2
  400ca0:	73fb      	strb	r3, [r7, #15]
		break;
  400ca2:	e00e      	b.n	400cc2 <gfx_mono_ssd1306_mask_byte+0x66>
		temp &= ~pixel_mask;
  400ca4:	f997 3005 	ldrsb.w	r3, [r7, #5]
  400ca8:	43db      	mvns	r3, r3
  400caa:	b25a      	sxtb	r2, r3
  400cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400cb0:	4013      	ands	r3, r2
  400cb2:	b25b      	sxtb	r3, r3
  400cb4:	73fb      	strb	r3, [r7, #15]
		break;
  400cb6:	e004      	b.n	400cc2 <gfx_mono_ssd1306_mask_byte+0x66>
		temp ^= pixel_mask;
  400cb8:	7bfa      	ldrb	r2, [r7, #15]
  400cba:	797b      	ldrb	r3, [r7, #5]
  400cbc:	4053      	eors	r3, r2
  400cbe:	73fb      	strb	r3, [r7, #15]
		break;
  400cc0:	bf00      	nop
	}

	gfx_mono_put_byte(page, column, temp);
  400cc2:	7bfa      	ldrb	r2, [r7, #15]
  400cc4:	79b9      	ldrb	r1, [r7, #6]
  400cc6:	79f8      	ldrb	r0, [r7, #7]
  400cc8:	2300      	movs	r3, #0
  400cca:	4c04      	ldr	r4, [pc, #16]	; (400cdc <gfx_mono_ssd1306_mask_byte+0x80>)
  400ccc:	47a0      	blx	r4
}
  400cce:	bf00      	nop
  400cd0:	3714      	adds	r7, #20
  400cd2:	46bd      	mov	sp, r7
  400cd4:	bd90      	pop	{r4, r7, pc}
  400cd6:	bf00      	nop
  400cd8:	00400c31 	.word	0x00400c31
  400cdc:	00400bad 	.word	0x00400bad

00400ce0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400ce0:	b480      	push	{r7}
  400ce2:	b083      	sub	sp, #12
  400ce4:	af00      	add	r7, sp, #0
  400ce6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ce8:	687b      	ldr	r3, [r7, #4]
  400cea:	2b07      	cmp	r3, #7
  400cec:	d825      	bhi.n	400d3a <osc_get_rate+0x5a>
  400cee:	a201      	add	r2, pc, #4	; (adr r2, 400cf4 <osc_get_rate+0x14>)
  400cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cf4:	00400d15 	.word	0x00400d15
  400cf8:	00400d1b 	.word	0x00400d1b
  400cfc:	00400d21 	.word	0x00400d21
  400d00:	00400d27 	.word	0x00400d27
  400d04:	00400d2b 	.word	0x00400d2b
  400d08:	00400d2f 	.word	0x00400d2f
  400d0c:	00400d33 	.word	0x00400d33
  400d10:	00400d37 	.word	0x00400d37
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d18:	e010      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d1e:	e00d      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d24:	e00a      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d26:	4b08      	ldr	r3, [pc, #32]	; (400d48 <osc_get_rate+0x68>)
  400d28:	e008      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d2a:	4b08      	ldr	r3, [pc, #32]	; (400d4c <osc_get_rate+0x6c>)
  400d2c:	e006      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d2e:	4b08      	ldr	r3, [pc, #32]	; (400d50 <osc_get_rate+0x70>)
  400d30:	e004      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d32:	4b07      	ldr	r3, [pc, #28]	; (400d50 <osc_get_rate+0x70>)
  400d34:	e002      	b.n	400d3c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d36:	4b06      	ldr	r3, [pc, #24]	; (400d50 <osc_get_rate+0x70>)
  400d38:	e000      	b.n	400d3c <osc_get_rate+0x5c>
	}

	return 0;
  400d3a:	2300      	movs	r3, #0
}
  400d3c:	4618      	mov	r0, r3
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d46:	4770      	bx	lr
  400d48:	003d0900 	.word	0x003d0900
  400d4c:	007a1200 	.word	0x007a1200
  400d50:	00b71b00 	.word	0x00b71b00

00400d54 <sysclk_get_main_hz>:
{
  400d54:	b580      	push	{r7, lr}
  400d56:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400d58:	2006      	movs	r0, #6
  400d5a:	4b05      	ldr	r3, [pc, #20]	; (400d70 <sysclk_get_main_hz+0x1c>)
  400d5c:	4798      	blx	r3
  400d5e:	4602      	mov	r2, r0
  400d60:	4613      	mov	r3, r2
  400d62:	009b      	lsls	r3, r3, #2
  400d64:	4413      	add	r3, r2
  400d66:	009a      	lsls	r2, r3, #2
  400d68:	4413      	add	r3, r2
}
  400d6a:	4618      	mov	r0, r3
  400d6c:	bd80      	pop	{r7, pc}
  400d6e:	bf00      	nop
  400d70:	00400ce1 	.word	0x00400ce1

00400d74 <sysclk_get_cpu_hz>:
{
  400d74:	b580      	push	{r7, lr}
  400d76:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d78:	4b02      	ldr	r3, [pc, #8]	; (400d84 <sysclk_get_cpu_hz+0x10>)
  400d7a:	4798      	blx	r3
  400d7c:	4603      	mov	r3, r0
}
  400d7e:	4618      	mov	r0, r3
  400d80:	bd80      	pop	{r7, pc}
  400d82:	bf00      	nop
  400d84:	00400d55 	.word	0x00400d55

00400d88 <sysclk_get_peripheral_hz>:
{
  400d88:	b580      	push	{r7, lr}
  400d8a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d8c:	4b02      	ldr	r3, [pc, #8]	; (400d98 <sysclk_get_peripheral_hz+0x10>)
  400d8e:	4798      	blx	r3
  400d90:	4603      	mov	r3, r0
  400d92:	085b      	lsrs	r3, r3, #1
}
  400d94:	4618      	mov	r0, r3
  400d96:	bd80      	pop	{r7, pc}
  400d98:	00400d55 	.word	0x00400d55

00400d9c <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400d9c:	b480      	push	{r7}
  400d9e:	b089      	sub	sp, #36	; 0x24
  400da0:	af00      	add	r7, sp, #0
  400da2:	6078      	str	r0, [r7, #4]
  400da4:	687b      	ldr	r3, [r7, #4]
  400da6:	61fb      	str	r3, [r7, #28]
  400da8:	69fb      	ldr	r3, [r7, #28]
  400daa:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400dac:	69bb      	ldr	r3, [r7, #24]
  400dae:	095a      	lsrs	r2, r3, #5
  400db0:	69fb      	ldr	r3, [r7, #28]
  400db2:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400db4:	697b      	ldr	r3, [r7, #20]
  400db6:	f003 031f 	and.w	r3, r3, #31
  400dba:	2101      	movs	r1, #1
  400dbc:	fa01 f303 	lsl.w	r3, r1, r3
  400dc0:	613a      	str	r2, [r7, #16]
  400dc2:	60fb      	str	r3, [r7, #12]
  400dc4:	693b      	ldr	r3, [r7, #16]
  400dc6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400dc8:	68ba      	ldr	r2, [r7, #8]
  400dca:	4b06      	ldr	r3, [pc, #24]	; (400de4 <ioport_enable_pin+0x48>)
  400dcc:	4413      	add	r3, r2
  400dce:	025b      	lsls	r3, r3, #9
  400dd0:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400dd2:	68fb      	ldr	r3, [r7, #12]
  400dd4:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  400dd6:	bf00      	nop
  400dd8:	3724      	adds	r7, #36	; 0x24
  400dda:	46bd      	mov	sp, r7
  400ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop
  400de4:	00200707 	.word	0x00200707

00400de8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400de8:	b480      	push	{r7}
  400dea:	b08d      	sub	sp, #52	; 0x34
  400dec:	af00      	add	r7, sp, #0
  400dee:	6078      	str	r0, [r7, #4]
  400df0:	6039      	str	r1, [r7, #0]
  400df2:	687b      	ldr	r3, [r7, #4]
  400df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  400df6:	683b      	ldr	r3, [r7, #0]
  400df8:	62bb      	str	r3, [r7, #40]	; 0x28
  400dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dfc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e00:	095a      	lsrs	r2, r3, #5
  400e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400e04:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400e06:	6a3b      	ldr	r3, [r7, #32]
  400e08:	f003 031f 	and.w	r3, r3, #31
  400e0c:	2101      	movs	r1, #1
  400e0e:	fa01 f303 	lsl.w	r3, r1, r3
  400e12:	61fa      	str	r2, [r7, #28]
  400e14:	61bb      	str	r3, [r7, #24]
  400e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400e18:	617b      	str	r3, [r7, #20]
  400e1a:	69fb      	ldr	r3, [r7, #28]
  400e1c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400e1e:	693a      	ldr	r2, [r7, #16]
  400e20:	4b37      	ldr	r3, [pc, #220]	; (400f00 <ioport_set_pin_mode+0x118>)
  400e22:	4413      	add	r3, r2
  400e24:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400e26:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400e28:	697b      	ldr	r3, [r7, #20]
  400e2a:	f003 0308 	and.w	r3, r3, #8
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d003      	beq.n	400e3a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	69ba      	ldr	r2, [r7, #24]
  400e36:	665a      	str	r2, [r3, #100]	; 0x64
  400e38:	e002      	b.n	400e40 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400e3a:	68fb      	ldr	r3, [r7, #12]
  400e3c:	69ba      	ldr	r2, [r7, #24]
  400e3e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400e40:	697b      	ldr	r3, [r7, #20]
  400e42:	f003 0310 	and.w	r3, r3, #16
  400e46:	2b00      	cmp	r3, #0
  400e48:	d004      	beq.n	400e54 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400e4a:	68fb      	ldr	r3, [r7, #12]
  400e4c:	69ba      	ldr	r2, [r7, #24]
  400e4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400e52:	e003      	b.n	400e5c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400e54:	68fb      	ldr	r3, [r7, #12]
  400e56:	69ba      	ldr	r2, [r7, #24]
  400e58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400e5c:	697b      	ldr	r3, [r7, #20]
  400e5e:	f003 0320 	and.w	r3, r3, #32
  400e62:	2b00      	cmp	r3, #0
  400e64:	d003      	beq.n	400e6e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400e66:	68fb      	ldr	r3, [r7, #12]
  400e68:	69ba      	ldr	r2, [r7, #24]
  400e6a:	651a      	str	r2, [r3, #80]	; 0x50
  400e6c:	e002      	b.n	400e74 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400e6e:	68fb      	ldr	r3, [r7, #12]
  400e70:	69ba      	ldr	r2, [r7, #24]
  400e72:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400e74:	697b      	ldr	r3, [r7, #20]
  400e76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400e7a:	2b00      	cmp	r3, #0
  400e7c:	d003      	beq.n	400e86 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	69ba      	ldr	r2, [r7, #24]
  400e82:	621a      	str	r2, [r3, #32]
  400e84:	e002      	b.n	400e8c <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400e86:	68fb      	ldr	r3, [r7, #12]
  400e88:	69ba      	ldr	r2, [r7, #24]
  400e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400e8c:	697b      	ldr	r3, [r7, #20]
  400e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400e92:	2b00      	cmp	r3, #0
  400e94:	d004      	beq.n	400ea0 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400e96:	68fb      	ldr	r3, [r7, #12]
  400e98:	69ba      	ldr	r2, [r7, #24]
  400e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400e9e:	e003      	b.n	400ea8 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400ea0:	68fb      	ldr	r3, [r7, #12]
  400ea2:	69ba      	ldr	r2, [r7, #24]
  400ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400ea8:	697b      	ldr	r3, [r7, #20]
  400eaa:	f003 0301 	and.w	r3, r3, #1
  400eae:	2b00      	cmp	r3, #0
  400eb0:	d006      	beq.n	400ec0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400eb2:	68fb      	ldr	r3, [r7, #12]
  400eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400eb6:	69bb      	ldr	r3, [r7, #24]
  400eb8:	431a      	orrs	r2, r3
  400eba:	68fb      	ldr	r3, [r7, #12]
  400ebc:	671a      	str	r2, [r3, #112]	; 0x70
  400ebe:	e006      	b.n	400ece <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ec0:	68fb      	ldr	r3, [r7, #12]
  400ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ec4:	69bb      	ldr	r3, [r7, #24]
  400ec6:	43db      	mvns	r3, r3
  400ec8:	401a      	ands	r2, r3
  400eca:	68fb      	ldr	r3, [r7, #12]
  400ecc:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400ece:	697b      	ldr	r3, [r7, #20]
  400ed0:	f003 0302 	and.w	r3, r3, #2
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	d006      	beq.n	400ee6 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400ed8:	68fb      	ldr	r3, [r7, #12]
  400eda:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400edc:	69bb      	ldr	r3, [r7, #24]
  400ede:	431a      	orrs	r2, r3
  400ee0:	68fb      	ldr	r3, [r7, #12]
  400ee2:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400ee4:	e006      	b.n	400ef4 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400ee6:	68fb      	ldr	r3, [r7, #12]
  400ee8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400eea:	69bb      	ldr	r3, [r7, #24]
  400eec:	43db      	mvns	r3, r3
  400eee:	401a      	ands	r2, r3
  400ef0:	68fb      	ldr	r3, [r7, #12]
  400ef2:	675a      	str	r2, [r3, #116]	; 0x74
  400ef4:	bf00      	nop
  400ef6:	3734      	adds	r7, #52	; 0x34
  400ef8:	46bd      	mov	sp, r7
  400efa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400efe:	4770      	bx	lr
  400f00:	00200707 	.word	0x00200707

00400f04 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400f04:	b480      	push	{r7}
  400f06:	b08d      	sub	sp, #52	; 0x34
  400f08:	af00      	add	r7, sp, #0
  400f0a:	6078      	str	r0, [r7, #4]
  400f0c:	460b      	mov	r3, r1
  400f0e:	70fb      	strb	r3, [r7, #3]
  400f10:	687b      	ldr	r3, [r7, #4]
  400f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  400f14:	78fb      	ldrb	r3, [r7, #3]
  400f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f1c:	627b      	str	r3, [r7, #36]	; 0x24
  400f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f20:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400f22:	6a3b      	ldr	r3, [r7, #32]
  400f24:	095b      	lsrs	r3, r3, #5
  400f26:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400f28:	69fa      	ldr	r2, [r7, #28]
  400f2a:	4b17      	ldr	r3, [pc, #92]	; (400f88 <ioport_set_pin_dir+0x84>)
  400f2c:	4413      	add	r3, r2
  400f2e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400f30:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f36:	2b01      	cmp	r3, #1
  400f38:	d109      	bne.n	400f4e <ioport_set_pin_dir+0x4a>
  400f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f3c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400f3e:	697b      	ldr	r3, [r7, #20]
  400f40:	f003 031f 	and.w	r3, r3, #31
  400f44:	2201      	movs	r2, #1
  400f46:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f48:	69bb      	ldr	r3, [r7, #24]
  400f4a:	611a      	str	r2, [r3, #16]
  400f4c:	e00c      	b.n	400f68 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f52:	2b00      	cmp	r3, #0
  400f54:	d108      	bne.n	400f68 <ioport_set_pin_dir+0x64>
  400f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f58:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400f5a:	693b      	ldr	r3, [r7, #16]
  400f5c:	f003 031f 	and.w	r3, r3, #31
  400f60:	2201      	movs	r2, #1
  400f62:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f64:	69bb      	ldr	r3, [r7, #24]
  400f66:	615a      	str	r2, [r3, #20]
  400f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f6a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f6c:	68fb      	ldr	r3, [r7, #12]
  400f6e:	f003 031f 	and.w	r3, r3, #31
  400f72:	2201      	movs	r2, #1
  400f74:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f76:	69bb      	ldr	r3, [r7, #24]
  400f78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400f7c:	bf00      	nop
  400f7e:	3734      	adds	r7, #52	; 0x34
  400f80:	46bd      	mov	sp, r7
  400f82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f86:	4770      	bx	lr
  400f88:	00200707 	.word	0x00200707

00400f8c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400f8c:	b480      	push	{r7}
  400f8e:	b08b      	sub	sp, #44	; 0x2c
  400f90:	af00      	add	r7, sp, #0
  400f92:	6078      	str	r0, [r7, #4]
  400f94:	460b      	mov	r3, r1
  400f96:	70fb      	strb	r3, [r7, #3]
  400f98:	687b      	ldr	r3, [r7, #4]
  400f9a:	627b      	str	r3, [r7, #36]	; 0x24
  400f9c:	78fb      	ldrb	r3, [r7, #3]
  400f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fa4:	61fb      	str	r3, [r7, #28]
  400fa6:	69fb      	ldr	r3, [r7, #28]
  400fa8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400faa:	69bb      	ldr	r3, [r7, #24]
  400fac:	095b      	lsrs	r3, r3, #5
  400fae:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400fb0:	697a      	ldr	r2, [r7, #20]
  400fb2:	4b10      	ldr	r3, [pc, #64]	; (400ff4 <ioport_set_pin_level+0x68>)
  400fb4:	4413      	add	r3, r2
  400fb6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400fb8:	613b      	str	r3, [r7, #16]

	if (level) {
  400fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400fbe:	2b00      	cmp	r3, #0
  400fc0:	d009      	beq.n	400fd6 <ioport_set_pin_level+0x4a>
  400fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fc4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400fc6:	68fb      	ldr	r3, [r7, #12]
  400fc8:	f003 031f 	and.w	r3, r3, #31
  400fcc:	2201      	movs	r2, #1
  400fce:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400fd0:	693b      	ldr	r3, [r7, #16]
  400fd2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400fd4:	e008      	b.n	400fe8 <ioport_set_pin_level+0x5c>
  400fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fd8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400fda:	68bb      	ldr	r3, [r7, #8]
  400fdc:	f003 031f 	and.w	r3, r3, #31
  400fe0:	2201      	movs	r2, #1
  400fe2:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400fe4:	693b      	ldr	r3, [r7, #16]
  400fe6:	635a      	str	r2, [r3, #52]	; 0x34
  400fe8:	bf00      	nop
  400fea:	372c      	adds	r7, #44	; 0x2c
  400fec:	46bd      	mov	sp, r7
  400fee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ff2:	4770      	bx	lr
  400ff4:	00200707 	.word	0x00200707

00400ff8 <spi_reset>:
{
  400ff8:	b480      	push	{r7}
  400ffa:	b083      	sub	sp, #12
  400ffc:	af00      	add	r7, sp, #0
  400ffe:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401000:	687b      	ldr	r3, [r7, #4]
  401002:	2280      	movs	r2, #128	; 0x80
  401004:	601a      	str	r2, [r3, #0]
}
  401006:	bf00      	nop
  401008:	370c      	adds	r7, #12
  40100a:	46bd      	mov	sp, r7
  40100c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401010:	4770      	bx	lr

00401012 <spi_enable>:
{
  401012:	b480      	push	{r7}
  401014:	b083      	sub	sp, #12
  401016:	af00      	add	r7, sp, #0
  401018:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40101a:	687b      	ldr	r3, [r7, #4]
  40101c:	2201      	movs	r2, #1
  40101e:	601a      	str	r2, [r3, #0]
}
  401020:	bf00      	nop
  401022:	370c      	adds	r7, #12
  401024:	46bd      	mov	sp, r7
  401026:	f85d 7b04 	ldr.w	r7, [sp], #4
  40102a:	4770      	bx	lr

0040102c <spi_disable>:
{
  40102c:	b480      	push	{r7}
  40102e:	b083      	sub	sp, #12
  401030:	af00      	add	r7, sp, #0
  401032:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401034:	687b      	ldr	r3, [r7, #4]
  401036:	2202      	movs	r2, #2
  401038:	601a      	str	r2, [r3, #0]
}
  40103a:	bf00      	nop
  40103c:	370c      	adds	r7, #12
  40103e:	46bd      	mov	sp, r7
  401040:	f85d 7b04 	ldr.w	r7, [sp], #4
  401044:	4770      	bx	lr

00401046 <spi_set_master_mode>:
{
  401046:	b480      	push	{r7}
  401048:	b083      	sub	sp, #12
  40104a:	af00      	add	r7, sp, #0
  40104c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40104e:	687b      	ldr	r3, [r7, #4]
  401050:	685b      	ldr	r3, [r3, #4]
  401052:	f043 0201 	orr.w	r2, r3, #1
  401056:	687b      	ldr	r3, [r7, #4]
  401058:	605a      	str	r2, [r3, #4]
}
  40105a:	bf00      	nop
  40105c:	370c      	adds	r7, #12
  40105e:	46bd      	mov	sp, r7
  401060:	f85d 7b04 	ldr.w	r7, [sp], #4
  401064:	4770      	bx	lr

00401066 <spi_set_fixed_peripheral_select>:
{
  401066:	b480      	push	{r7}
  401068:	b083      	sub	sp, #12
  40106a:	af00      	add	r7, sp, #0
  40106c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40106e:	687b      	ldr	r3, [r7, #4]
  401070:	685b      	ldr	r3, [r3, #4]
  401072:	f023 0202 	bic.w	r2, r3, #2
  401076:	687b      	ldr	r3, [r7, #4]
  401078:	605a      	str	r2, [r3, #4]
}
  40107a:	bf00      	nop
  40107c:	370c      	adds	r7, #12
  40107e:	46bd      	mov	sp, r7
  401080:	f85d 7b04 	ldr.w	r7, [sp], #4
  401084:	4770      	bx	lr

00401086 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  401086:	b480      	push	{r7}
  401088:	b083      	sub	sp, #12
  40108a:	af00      	add	r7, sp, #0
  40108c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40108e:	687b      	ldr	r3, [r7, #4]
  401090:	685b      	ldr	r3, [r3, #4]
  401092:	f043 0210 	orr.w	r2, r3, #16
  401096:	687b      	ldr	r3, [r7, #4]
  401098:	605a      	str	r2, [r3, #4]
}
  40109a:	bf00      	nop
  40109c:	370c      	adds	r7, #12
  40109e:	46bd      	mov	sp, r7
  4010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010a4:	4770      	bx	lr

004010a6 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  4010a6:	b480      	push	{r7}
  4010a8:	b083      	sub	sp, #12
  4010aa:	af00      	add	r7, sp, #0
  4010ac:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4010ae:	687b      	ldr	r3, [r7, #4]
  4010b0:	685b      	ldr	r3, [r3, #4]
  4010b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  4010b6:	687b      	ldr	r3, [r7, #4]
  4010b8:	605a      	str	r2, [r3, #4]
}
  4010ba:	bf00      	nop
  4010bc:	370c      	adds	r7, #12
  4010be:	46bd      	mov	sp, r7
  4010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010c4:	4770      	bx	lr
	...

004010c8 <ssd1306_hard_reset>:
{
  4010c8:	b580      	push	{r7, lr}
  4010ca:	b082      	sub	sp, #8
  4010cc:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  4010ce:	4b0f      	ldr	r3, [pc, #60]	; (40110c <ssd1306_hard_reset+0x44>)
  4010d0:	4798      	blx	r3
  4010d2:	4602      	mov	r2, r0
  4010d4:	4b0e      	ldr	r3, [pc, #56]	; (401110 <ssd1306_hard_reset+0x48>)
  4010d6:	fba3 2302 	umull	r2, r3, r3, r2
  4010da:	0c9a      	lsrs	r2, r3, #18
  4010dc:	4613      	mov	r3, r2
  4010de:	009b      	lsls	r3, r3, #2
  4010e0:	4413      	add	r3, r2
  4010e2:	005b      	lsls	r3, r3, #1
  4010e4:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  4010e6:	2100      	movs	r1, #0
  4010e8:	2051      	movs	r0, #81	; 0x51
  4010ea:	4b0a      	ldr	r3, [pc, #40]	; (401114 <ssd1306_hard_reset+0x4c>)
  4010ec:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010ee:	6878      	ldr	r0, [r7, #4]
  4010f0:	4b09      	ldr	r3, [pc, #36]	; (401118 <ssd1306_hard_reset+0x50>)
  4010f2:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4010f4:	2101      	movs	r1, #1
  4010f6:	2051      	movs	r0, #81	; 0x51
  4010f8:	4b06      	ldr	r3, [pc, #24]	; (401114 <ssd1306_hard_reset+0x4c>)
  4010fa:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010fc:	6878      	ldr	r0, [r7, #4]
  4010fe:	4b06      	ldr	r3, [pc, #24]	; (401118 <ssd1306_hard_reset+0x50>)
  401100:	4798      	blx	r3
}
  401102:	bf00      	nop
  401104:	3708      	adds	r7, #8
  401106:	46bd      	mov	sp, r7
  401108:	bd80      	pop	{r7, pc}
  40110a:	bf00      	nop
  40110c:	00400d75 	.word	0x00400d75
  401110:	431bde83 	.word	0x431bde83
  401114:	00400f8d 	.word	0x00400f8d
  401118:	20400001 	.word	0x20400001

0040111c <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  401120:	20af      	movs	r0, #175	; 0xaf
  401122:	4b02      	ldr	r3, [pc, #8]	; (40112c <ssd1306_display_on+0x10>)
  401124:	4798      	blx	r3
}
  401126:	bf00      	nop
  401128:	bd80      	pop	{r7, pc}
  40112a:	bf00      	nop
  40112c:	0040139d 	.word	0x0040139d

00401130 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  401130:	b580      	push	{r7, lr}
  401132:	b082      	sub	sp, #8
  401134:	af00      	add	r7, sp, #0
  401136:	4603      	mov	r3, r0
  401138:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  40113a:	2081      	movs	r0, #129	; 0x81
  40113c:	4b05      	ldr	r3, [pc, #20]	; (401154 <ssd1306_set_contrast+0x24>)
  40113e:	4798      	blx	r3
	ssd1306_write_command(contrast);
  401140:	79fb      	ldrb	r3, [r7, #7]
  401142:	4618      	mov	r0, r3
  401144:	4b03      	ldr	r3, [pc, #12]	; (401154 <ssd1306_set_contrast+0x24>)
  401146:	4798      	blx	r3
	return contrast;
  401148:	79fb      	ldrb	r3, [r7, #7]
}
  40114a:	4618      	mov	r0, r3
  40114c:	3708      	adds	r7, #8
  40114e:	46bd      	mov	sp, r7
  401150:	bd80      	pop	{r7, pc}
  401152:	bf00      	nop
  401154:	0040139d 	.word	0x0040139d

00401158 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  401158:	b580      	push	{r7, lr}
  40115a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  40115c:	20a6      	movs	r0, #166	; 0xa6
  40115e:	4b02      	ldr	r3, [pc, #8]	; (401168 <ssd1306_display_invert_disable+0x10>)
  401160:	4798      	blx	r3
}
  401162:	bf00      	nop
  401164:	bd80      	pop	{r7, pc}
  401166:	bf00      	nop
  401168:	0040139d 	.word	0x0040139d

0040116c <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  40116c:	b590      	push	{r4, r7, lr}
  40116e:	b083      	sub	sp, #12
  401170:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  401172:	2101      	movs	r1, #1
  401174:	2051      	movs	r0, #81	; 0x51
  401176:	4b46      	ldr	r3, [pc, #280]	; (401290 <ssd1306_interface_init+0x124>)
  401178:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  40117a:	2101      	movs	r1, #1
  40117c:	2023      	movs	r0, #35	; 0x23
  40117e:	4b44      	ldr	r3, [pc, #272]	; (401290 <ssd1306_interface_init+0x124>)
  401180:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  401182:	2108      	movs	r1, #8
  401184:	2051      	movs	r0, #81	; 0x51
  401186:	4b43      	ldr	r3, [pc, #268]	; (401294 <ssd1306_interface_init+0x128>)
  401188:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  40118a:	2108      	movs	r1, #8
  40118c:	2023      	movs	r0, #35	; 0x23
  40118e:	4b41      	ldr	r3, [pc, #260]	; (401294 <ssd1306_interface_init+0x128>)
  401190:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  401192:	2023      	movs	r0, #35	; 0x23
  401194:	4b40      	ldr	r3, [pc, #256]	; (401298 <ssd1306_interface_init+0x12c>)
  401196:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  401198:	2051      	movs	r0, #81	; 0x51
  40119a:	4b3f      	ldr	r3, [pc, #252]	; (401298 <ssd1306_interface_init+0x12c>)
  40119c:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40119e:	2101      	movs	r1, #1
  4011a0:	2023      	movs	r0, #35	; 0x23
  4011a2:	4b3e      	ldr	r3, [pc, #248]	; (40129c <ssd1306_interface_init+0x130>)
  4011a4:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4011a6:	2101      	movs	r1, #1
  4011a8:	2051      	movs	r0, #81	; 0x51
  4011aa:	4b3c      	ldr	r3, [pc, #240]	; (40129c <ssd1306_interface_init+0x130>)
  4011ac:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011ae:	2300      	movs	r3, #0
  4011b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011b8:	4839      	ldr	r0, [pc, #228]	; (4012a0 <ssd1306_interface_init+0x134>)
  4011ba:	4c3a      	ldr	r4, [pc, #232]	; (4012a4 <ssd1306_interface_init+0x138>)
  4011bc:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4011be:	2300      	movs	r3, #0
  4011c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4011c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011c8:	4835      	ldr	r0, [pc, #212]	; (4012a0 <ssd1306_interface_init+0x134>)
  4011ca:	4c36      	ldr	r4, [pc, #216]	; (4012a4 <ssd1306_interface_init+0x138>)
  4011cc:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4011ce:	2300      	movs	r3, #0
  4011d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4011d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011d8:	4831      	ldr	r0, [pc, #196]	; (4012a0 <ssd1306_interface_init+0x134>)
  4011da:	4c32      	ldr	r4, [pc, #200]	; (4012a4 <ssd1306_interface_init+0x138>)
  4011dc:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011de:	2300      	movs	r3, #0
  4011e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011e8:	482d      	ldr	r0, [pc, #180]	; (4012a0 <ssd1306_interface_init+0x134>)
  4011ea:	4c2e      	ldr	r4, [pc, #184]	; (4012a4 <ssd1306_interface_init+0x138>)
  4011ec:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4011ee:	2300      	movs	r3, #0
  4011f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4011f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011f8:	4829      	ldr	r0, [pc, #164]	; (4012a0 <ssd1306_interface_init+0x134>)
  4011fa:	4c2a      	ldr	r4, [pc, #168]	; (4012a4 <ssd1306_interface_init+0x138>)
  4011fc:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4011fe:	2300      	movs	r3, #0
  401200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401204:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401208:	4825      	ldr	r0, [pc, #148]	; (4012a0 <ssd1306_interface_init+0x134>)
  40120a:	4c26      	ldr	r4, [pc, #152]	; (4012a4 <ssd1306_interface_init+0x138>)
  40120c:	47a0      	blx	r4
		
		spi_disable(SPI0);
  40120e:	4826      	ldr	r0, [pc, #152]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401210:	4b26      	ldr	r3, [pc, #152]	; (4012ac <ssd1306_interface_init+0x140>)
  401212:	4798      	blx	r3
		spi_reset(SPI0);
  401214:	4824      	ldr	r0, [pc, #144]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401216:	4b26      	ldr	r3, [pc, #152]	; (4012b0 <ssd1306_interface_init+0x144>)
  401218:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  40121a:	4823      	ldr	r0, [pc, #140]	; (4012a8 <ssd1306_interface_init+0x13c>)
  40121c:	4b25      	ldr	r3, [pc, #148]	; (4012b4 <ssd1306_interface_init+0x148>)
  40121e:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  401220:	2208      	movs	r2, #8
  401222:	2101      	movs	r1, #1
  401224:	4820      	ldr	r0, [pc, #128]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401226:	4b24      	ldr	r3, [pc, #144]	; (4012b8 <ssd1306_interface_init+0x14c>)
  401228:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  40122a:	2200      	movs	r2, #0
  40122c:	2101      	movs	r1, #1
  40122e:	481e      	ldr	r0, [pc, #120]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401230:	4b22      	ldr	r3, [pc, #136]	; (4012bc <ssd1306_interface_init+0x150>)
  401232:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  401234:	2200      	movs	r2, #0
  401236:	2101      	movs	r1, #1
  401238:	481b      	ldr	r0, [pc, #108]	; (4012a8 <ssd1306_interface_init+0x13c>)
  40123a:	4b21      	ldr	r3, [pc, #132]	; (4012c0 <ssd1306_interface_init+0x154>)
  40123c:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  40123e:	481a      	ldr	r0, [pc, #104]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401240:	4b20      	ldr	r3, [pc, #128]	; (4012c4 <ssd1306_interface_init+0x158>)
  401242:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401244:	2200      	movs	r2, #0
  401246:	2101      	movs	r1, #1
  401248:	4817      	ldr	r0, [pc, #92]	; (4012a8 <ssd1306_interface_init+0x13c>)
  40124a:	4b1f      	ldr	r3, [pc, #124]	; (4012c8 <ssd1306_interface_init+0x15c>)
  40124c:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  40124e:	4816      	ldr	r0, [pc, #88]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401250:	4b1e      	ldr	r3, [pc, #120]	; (4012cc <ssd1306_interface_init+0x160>)
  401252:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  401254:	4814      	ldr	r0, [pc, #80]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401256:	4b1e      	ldr	r3, [pc, #120]	; (4012d0 <ssd1306_interface_init+0x164>)
  401258:	4798      	blx	r3
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40125a:	4b1e      	ldr	r3, [pc, #120]	; (4012d4 <ssd1306_interface_init+0x168>)
  40125c:	4798      	blx	r3
  40125e:	4603      	mov	r3, r0
  401260:	4619      	mov	r1, r3
  401262:	481d      	ldr	r0, [pc, #116]	; (4012d8 <ssd1306_interface_init+0x16c>)
  401264:	4b1d      	ldr	r3, [pc, #116]	; (4012dc <ssd1306_interface_init+0x170>)
  401266:	4798      	blx	r3
  401268:	4603      	mov	r3, r0
  40126a:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  40126c:	687b      	ldr	r3, [r7, #4]
  40126e:	b2db      	uxtb	r3, r3
  401270:	461a      	mov	r2, r3
  401272:	2101      	movs	r1, #1
  401274:	480c      	ldr	r0, [pc, #48]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401276:	4b1a      	ldr	r3, [pc, #104]	; (4012e0 <ssd1306_interface_init+0x174>)
  401278:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40127a:	480b      	ldr	r0, [pc, #44]	; (4012a8 <ssd1306_interface_init+0x13c>)
  40127c:	4b19      	ldr	r3, [pc, #100]	; (4012e4 <ssd1306_interface_init+0x178>)
  40127e:	4798      	blx	r3
		
		spi_enable(SPI0);
  401280:	4809      	ldr	r0, [pc, #36]	; (4012a8 <ssd1306_interface_init+0x13c>)
  401282:	4b19      	ldr	r3, [pc, #100]	; (4012e8 <ssd1306_interface_init+0x17c>)
  401284:	4798      	blx	r3
}
  401286:	bf00      	nop
  401288:	370c      	adds	r7, #12
  40128a:	46bd      	mov	sp, r7
  40128c:	bd90      	pop	{r4, r7, pc}
  40128e:	bf00      	nop
  401290:	00400f05 	.word	0x00400f05
  401294:	00400de9 	.word	0x00400de9
  401298:	00400d9d 	.word	0x00400d9d
  40129c:	00400f8d 	.word	0x00400f8d
  4012a0:	400e1400 	.word	0x400e1400
  4012a4:	00401fcd 	.word	0x00401fcd
  4012a8:	40008000 	.word	0x40008000
  4012ac:	0040102d 	.word	0x0040102d
  4012b0:	00400ff9 	.word	0x00400ff9
  4012b4:	00401047 	.word	0x00401047
  4012b8:	00400381 	.word	0x00400381
  4012bc:	004002e1 	.word	0x004002e1
  4012c0:	00400331 	.word	0x00400331
  4012c4:	00401067 	.word	0x00401067
  4012c8:	00400427 	.word	0x00400427
  4012cc:	004010a7 	.word	0x004010a7
  4012d0:	00401087 	.word	0x00401087
  4012d4:	00400d89 	.word	0x00400d89
  4012d8:	001e8480 	.word	0x001e8480
  4012dc:	00400471 	.word	0x00400471
  4012e0:	004004ad 	.word	0x004004ad
  4012e4:	004001f1 	.word	0x004001f1
  4012e8:	00401013 	.word	0x00401013

004012ec <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  4012f0:	4b23      	ldr	r3, [pc, #140]	; (401380 <ssd1306_init+0x94>)
  4012f2:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  4012f4:	4b23      	ldr	r3, [pc, #140]	; (401384 <ssd1306_init+0x98>)
  4012f6:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4012f8:	2101      	movs	r1, #1
  4012fa:	2051      	movs	r0, #81	; 0x51
  4012fc:	4b22      	ldr	r3, [pc, #136]	; (401388 <ssd1306_init+0x9c>)
  4012fe:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401300:	20a8      	movs	r0, #168	; 0xa8
  401302:	4b22      	ldr	r3, [pc, #136]	; (40138c <ssd1306_init+0xa0>)
  401304:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  401306:	201f      	movs	r0, #31
  401308:	4b20      	ldr	r3, [pc, #128]	; (40138c <ssd1306_init+0xa0>)
  40130a:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40130c:	20d3      	movs	r0, #211	; 0xd3
  40130e:	4b1f      	ldr	r3, [pc, #124]	; (40138c <ssd1306_init+0xa0>)
  401310:	4798      	blx	r3
	ssd1306_write_command(0x00);
  401312:	2000      	movs	r0, #0
  401314:	4b1d      	ldr	r3, [pc, #116]	; (40138c <ssd1306_init+0xa0>)
  401316:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401318:	2040      	movs	r0, #64	; 0x40
  40131a:	4b1c      	ldr	r3, [pc, #112]	; (40138c <ssd1306_init+0xa0>)
  40131c:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40131e:	20a1      	movs	r0, #161	; 0xa1
  401320:	4b1a      	ldr	r3, [pc, #104]	; (40138c <ssd1306_init+0xa0>)
  401322:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401324:	20c8      	movs	r0, #200	; 0xc8
  401326:	4b19      	ldr	r3, [pc, #100]	; (40138c <ssd1306_init+0xa0>)
  401328:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40132a:	20da      	movs	r0, #218	; 0xda
  40132c:	4b17      	ldr	r3, [pc, #92]	; (40138c <ssd1306_init+0xa0>)
  40132e:	4798      	blx	r3
	ssd1306_write_command(0x02);
  401330:	2002      	movs	r0, #2
  401332:	4b16      	ldr	r3, [pc, #88]	; (40138c <ssd1306_init+0xa0>)
  401334:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  401336:	208f      	movs	r0, #143	; 0x8f
  401338:	4b15      	ldr	r3, [pc, #84]	; (401390 <ssd1306_init+0xa4>)
  40133a:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40133c:	20a4      	movs	r0, #164	; 0xa4
  40133e:	4b13      	ldr	r3, [pc, #76]	; (40138c <ssd1306_init+0xa0>)
  401340:	4798      	blx	r3

	ssd1306_display_invert_disable();
  401342:	4b14      	ldr	r3, [pc, #80]	; (401394 <ssd1306_init+0xa8>)
  401344:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  401346:	20d5      	movs	r0, #213	; 0xd5
  401348:	4b10      	ldr	r3, [pc, #64]	; (40138c <ssd1306_init+0xa0>)
  40134a:	4798      	blx	r3
	ssd1306_write_command(0x80);
  40134c:	2080      	movs	r0, #128	; 0x80
  40134e:	4b0f      	ldr	r3, [pc, #60]	; (40138c <ssd1306_init+0xa0>)
  401350:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401352:	208d      	movs	r0, #141	; 0x8d
  401354:	4b0d      	ldr	r3, [pc, #52]	; (40138c <ssd1306_init+0xa0>)
  401356:	4798      	blx	r3
	ssd1306_write_command(0x14);
  401358:	2014      	movs	r0, #20
  40135a:	4b0c      	ldr	r3, [pc, #48]	; (40138c <ssd1306_init+0xa0>)
  40135c:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40135e:	20db      	movs	r0, #219	; 0xdb
  401360:	4b0a      	ldr	r3, [pc, #40]	; (40138c <ssd1306_init+0xa0>)
  401362:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401364:	2040      	movs	r0, #64	; 0x40
  401366:	4b09      	ldr	r3, [pc, #36]	; (40138c <ssd1306_init+0xa0>)
  401368:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40136a:	20d9      	movs	r0, #217	; 0xd9
  40136c:	4b07      	ldr	r3, [pc, #28]	; (40138c <ssd1306_init+0xa0>)
  40136e:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  401370:	20f1      	movs	r0, #241	; 0xf1
  401372:	4b06      	ldr	r3, [pc, #24]	; (40138c <ssd1306_init+0xa0>)
  401374:	4798      	blx	r3

	
	ssd1306_display_on();
  401376:	4b08      	ldr	r3, [pc, #32]	; (401398 <ssd1306_init+0xac>)
  401378:	4798      	blx	r3
}
  40137a:	bf00      	nop
  40137c:	bd80      	pop	{r7, pc}
  40137e:	bf00      	nop
  401380:	0040116d 	.word	0x0040116d
  401384:	004010c9 	.word	0x004010c9
  401388:	00400f8d 	.word	0x00400f8d
  40138c:	0040139d 	.word	0x0040139d
  401390:	00401131 	.word	0x00401131
  401394:	00401159 	.word	0x00401159
  401398:	0040111d 	.word	0x0040111d

0040139c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  40139c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40139e:	b083      	sub	sp, #12
  4013a0:	af00      	add	r7, sp, #0
  4013a2:	4603      	mov	r3, r0
  4013a4:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  4013a6:	2100      	movs	r1, #0
  4013a8:	2023      	movs	r0, #35	; 0x23
  4013aa:	4b1c      	ldr	r3, [pc, #112]	; (40141c <ssd1306_write_command+0x80>)
  4013ac:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4013ae:	2101      	movs	r1, #1
  4013b0:	481b      	ldr	r0, [pc, #108]	; (401420 <ssd1306_write_command+0x84>)
  4013b2:	4b1c      	ldr	r3, [pc, #112]	; (401424 <ssd1306_write_command+0x88>)
  4013b4:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4013b6:	79fb      	ldrb	r3, [r7, #7]
  4013b8:	b299      	uxth	r1, r3
  4013ba:	2301      	movs	r3, #1
  4013bc:	2201      	movs	r2, #1
  4013be:	4818      	ldr	r0, [pc, #96]	; (401420 <ssd1306_write_command+0x84>)
  4013c0:	4c19      	ldr	r4, [pc, #100]	; (401428 <ssd1306_write_command+0x8c>)
  4013c2:	47a0      	blx	r4
	delay_us(10);
  4013c4:	4b19      	ldr	r3, [pc, #100]	; (40142c <ssd1306_write_command+0x90>)
  4013c6:	4798      	blx	r3
  4013c8:	4603      	mov	r3, r0
  4013ca:	4619      	mov	r1, r3
  4013cc:	f04f 0200 	mov.w	r2, #0
  4013d0:	460b      	mov	r3, r1
  4013d2:	4614      	mov	r4, r2
  4013d4:	00a6      	lsls	r6, r4, #2
  4013d6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4013da:	009d      	lsls	r5, r3, #2
  4013dc:	462b      	mov	r3, r5
  4013de:	4634      	mov	r4, r6
  4013e0:	185b      	adds	r3, r3, r1
  4013e2:	eb44 0402 	adc.w	r4, r4, r2
  4013e6:	18db      	adds	r3, r3, r3
  4013e8:	eb44 0404 	adc.w	r4, r4, r4
  4013ec:	4619      	mov	r1, r3
  4013ee:	4622      	mov	r2, r4
  4013f0:	4b0f      	ldr	r3, [pc, #60]	; (401430 <ssd1306_write_command+0x94>)
  4013f2:	f04f 0400 	mov.w	r4, #0
  4013f6:	18cd      	adds	r5, r1, r3
  4013f8:	eb42 0604 	adc.w	r6, r2, r4
  4013fc:	4628      	mov	r0, r5
  4013fe:	4631      	mov	r1, r6
  401400:	4c0c      	ldr	r4, [pc, #48]	; (401434 <ssd1306_write_command+0x98>)
  401402:	4a0d      	ldr	r2, [pc, #52]	; (401438 <ssd1306_write_command+0x9c>)
  401404:	f04f 0300 	mov.w	r3, #0
  401408:	47a0      	blx	r4
  40140a:	4603      	mov	r3, r0
  40140c:	460c      	mov	r4, r1
  40140e:	4618      	mov	r0, r3
  401410:	4b0a      	ldr	r3, [pc, #40]	; (40143c <ssd1306_write_command+0xa0>)
  401412:	4798      	blx	r3
}
  401414:	bf00      	nop
  401416:	370c      	adds	r7, #12
  401418:	46bd      	mov	sp, r7
  40141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40141c:	00400f8d 	.word	0x00400f8d
  401420:	40008000 	.word	0x40008000
  401424:	0040022d 	.word	0x0040022d
  401428:	00400261 	.word	0x00400261
  40142c:	00400d75 	.word	0x00400d75
  401430:	005a83df 	.word	0x005a83df
  401434:	0040315d 	.word	0x0040315d
  401438:	005a83e0 	.word	0x005a83e0
  40143c:	20400001 	.word	0x20400001

00401440 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401440:	b5f0      	push	{r4, r5, r6, r7, lr}
  401442:	b083      	sub	sp, #12
  401444:	af00      	add	r7, sp, #0
  401446:	4603      	mov	r3, r0
  401448:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40144a:	2101      	movs	r1, #1
  40144c:	2023      	movs	r0, #35	; 0x23
  40144e:	4b1c      	ldr	r3, [pc, #112]	; (4014c0 <ssd1306_write_data+0x80>)
  401450:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401452:	2101      	movs	r1, #1
  401454:	481b      	ldr	r0, [pc, #108]	; (4014c4 <ssd1306_write_data+0x84>)
  401456:	4b1c      	ldr	r3, [pc, #112]	; (4014c8 <ssd1306_write_data+0x88>)
  401458:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40145a:	79fb      	ldrb	r3, [r7, #7]
  40145c:	b299      	uxth	r1, r3
  40145e:	2301      	movs	r3, #1
  401460:	2201      	movs	r2, #1
  401462:	4818      	ldr	r0, [pc, #96]	; (4014c4 <ssd1306_write_data+0x84>)
  401464:	4c19      	ldr	r4, [pc, #100]	; (4014cc <ssd1306_write_data+0x8c>)
  401466:	47a0      	blx	r4
	delay_us(10);
  401468:	4b19      	ldr	r3, [pc, #100]	; (4014d0 <ssd1306_write_data+0x90>)
  40146a:	4798      	blx	r3
  40146c:	4603      	mov	r3, r0
  40146e:	4619      	mov	r1, r3
  401470:	f04f 0200 	mov.w	r2, #0
  401474:	460b      	mov	r3, r1
  401476:	4614      	mov	r4, r2
  401478:	00a6      	lsls	r6, r4, #2
  40147a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40147e:	009d      	lsls	r5, r3, #2
  401480:	462b      	mov	r3, r5
  401482:	4634      	mov	r4, r6
  401484:	185b      	adds	r3, r3, r1
  401486:	eb44 0402 	adc.w	r4, r4, r2
  40148a:	18db      	adds	r3, r3, r3
  40148c:	eb44 0404 	adc.w	r4, r4, r4
  401490:	4619      	mov	r1, r3
  401492:	4622      	mov	r2, r4
  401494:	4b0f      	ldr	r3, [pc, #60]	; (4014d4 <ssd1306_write_data+0x94>)
  401496:	f04f 0400 	mov.w	r4, #0
  40149a:	18cd      	adds	r5, r1, r3
  40149c:	eb42 0604 	adc.w	r6, r2, r4
  4014a0:	4628      	mov	r0, r5
  4014a2:	4631      	mov	r1, r6
  4014a4:	4c0c      	ldr	r4, [pc, #48]	; (4014d8 <ssd1306_write_data+0x98>)
  4014a6:	4a0d      	ldr	r2, [pc, #52]	; (4014dc <ssd1306_write_data+0x9c>)
  4014a8:	f04f 0300 	mov.w	r3, #0
  4014ac:	47a0      	blx	r4
  4014ae:	4603      	mov	r3, r0
  4014b0:	460c      	mov	r4, r1
  4014b2:	4618      	mov	r0, r3
  4014b4:	4b0a      	ldr	r3, [pc, #40]	; (4014e0 <ssd1306_write_data+0xa0>)
  4014b6:	4798      	blx	r3
}
  4014b8:	bf00      	nop
  4014ba:	370c      	adds	r7, #12
  4014bc:	46bd      	mov	sp, r7
  4014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4014c0:	00400f8d 	.word	0x00400f8d
  4014c4:	40008000 	.word	0x40008000
  4014c8:	0040022d 	.word	0x0040022d
  4014cc:	00400261 	.word	0x00400261
  4014d0:	00400d75 	.word	0x00400d75
  4014d4:	005a83df 	.word	0x005a83df
  4014d8:	0040315d 	.word	0x0040315d
  4014dc:	005a83e0 	.word	0x005a83e0
  4014e0:	20400001 	.word	0x20400001

004014e4 <osc_enable>:
{
  4014e4:	b580      	push	{r7, lr}
  4014e6:	b082      	sub	sp, #8
  4014e8:	af00      	add	r7, sp, #0
  4014ea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014ec:	687b      	ldr	r3, [r7, #4]
  4014ee:	2b07      	cmp	r3, #7
  4014f0:	d831      	bhi.n	401556 <osc_enable+0x72>
  4014f2:	a201      	add	r2, pc, #4	; (adr r2, 4014f8 <osc_enable+0x14>)
  4014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014f8:	00401555 	.word	0x00401555
  4014fc:	00401519 	.word	0x00401519
  401500:	00401521 	.word	0x00401521
  401504:	00401529 	.word	0x00401529
  401508:	00401531 	.word	0x00401531
  40150c:	00401539 	.word	0x00401539
  401510:	00401541 	.word	0x00401541
  401514:	0040154b 	.word	0x0040154b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401518:	2000      	movs	r0, #0
  40151a:	4b11      	ldr	r3, [pc, #68]	; (401560 <osc_enable+0x7c>)
  40151c:	4798      	blx	r3
		break;
  40151e:	e01a      	b.n	401556 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401520:	2001      	movs	r0, #1
  401522:	4b0f      	ldr	r3, [pc, #60]	; (401560 <osc_enable+0x7c>)
  401524:	4798      	blx	r3
		break;
  401526:	e016      	b.n	401556 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401528:	2000      	movs	r0, #0
  40152a:	4b0e      	ldr	r3, [pc, #56]	; (401564 <osc_enable+0x80>)
  40152c:	4798      	blx	r3
		break;
  40152e:	e012      	b.n	401556 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401530:	2010      	movs	r0, #16
  401532:	4b0c      	ldr	r3, [pc, #48]	; (401564 <osc_enable+0x80>)
  401534:	4798      	blx	r3
		break;
  401536:	e00e      	b.n	401556 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401538:	2020      	movs	r0, #32
  40153a:	4b0a      	ldr	r3, [pc, #40]	; (401564 <osc_enable+0x80>)
  40153c:	4798      	blx	r3
		break;
  40153e:	e00a      	b.n	401556 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401540:	213e      	movs	r1, #62	; 0x3e
  401542:	2000      	movs	r0, #0
  401544:	4b08      	ldr	r3, [pc, #32]	; (401568 <osc_enable+0x84>)
  401546:	4798      	blx	r3
		break;
  401548:	e005      	b.n	401556 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40154a:	213e      	movs	r1, #62	; 0x3e
  40154c:	2001      	movs	r0, #1
  40154e:	4b06      	ldr	r3, [pc, #24]	; (401568 <osc_enable+0x84>)
  401550:	4798      	blx	r3
		break;
  401552:	e000      	b.n	401556 <osc_enable+0x72>
		break;
  401554:	bf00      	nop
}
  401556:	bf00      	nop
  401558:	3708      	adds	r7, #8
  40155a:	46bd      	mov	sp, r7
  40155c:	bd80      	pop	{r7, pc}
  40155e:	bf00      	nop
  401560:	00402439 	.word	0x00402439
  401564:	004024a5 	.word	0x004024a5
  401568:	00402515 	.word	0x00402515

0040156c <osc_is_ready>:
{
  40156c:	b580      	push	{r7, lr}
  40156e:	b082      	sub	sp, #8
  401570:	af00      	add	r7, sp, #0
  401572:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401574:	687b      	ldr	r3, [r7, #4]
  401576:	2b07      	cmp	r3, #7
  401578:	d826      	bhi.n	4015c8 <osc_is_ready+0x5c>
  40157a:	a201      	add	r2, pc, #4	; (adr r2, 401580 <osc_is_ready+0x14>)
  40157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401580:	004015a1 	.word	0x004015a1
  401584:	004015a5 	.word	0x004015a5
  401588:	004015a5 	.word	0x004015a5
  40158c:	004015b7 	.word	0x004015b7
  401590:	004015b7 	.word	0x004015b7
  401594:	004015b7 	.word	0x004015b7
  401598:	004015b7 	.word	0x004015b7
  40159c:	004015b7 	.word	0x004015b7
		return 1;
  4015a0:	2301      	movs	r3, #1
  4015a2:	e012      	b.n	4015ca <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4015a4:	4b0b      	ldr	r3, [pc, #44]	; (4015d4 <osc_is_ready+0x68>)
  4015a6:	4798      	blx	r3
  4015a8:	4603      	mov	r3, r0
  4015aa:	2b00      	cmp	r3, #0
  4015ac:	bf14      	ite	ne
  4015ae:	2301      	movne	r3, #1
  4015b0:	2300      	moveq	r3, #0
  4015b2:	b2db      	uxtb	r3, r3
  4015b4:	e009      	b.n	4015ca <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4015b6:	4b08      	ldr	r3, [pc, #32]	; (4015d8 <osc_is_ready+0x6c>)
  4015b8:	4798      	blx	r3
  4015ba:	4603      	mov	r3, r0
  4015bc:	2b00      	cmp	r3, #0
  4015be:	bf14      	ite	ne
  4015c0:	2301      	movne	r3, #1
  4015c2:	2300      	moveq	r3, #0
  4015c4:	b2db      	uxtb	r3, r3
  4015c6:	e000      	b.n	4015ca <osc_is_ready+0x5e>
	return 0;
  4015c8:	2300      	movs	r3, #0
}
  4015ca:	4618      	mov	r0, r3
  4015cc:	3708      	adds	r7, #8
  4015ce:	46bd      	mov	sp, r7
  4015d0:	bd80      	pop	{r7, pc}
  4015d2:	bf00      	nop
  4015d4:	00402471 	.word	0x00402471
  4015d8:	0040258d 	.word	0x0040258d

004015dc <osc_get_rate>:
{
  4015dc:	b480      	push	{r7}
  4015de:	b083      	sub	sp, #12
  4015e0:	af00      	add	r7, sp, #0
  4015e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	2b07      	cmp	r3, #7
  4015e8:	d825      	bhi.n	401636 <osc_get_rate+0x5a>
  4015ea:	a201      	add	r2, pc, #4	; (adr r2, 4015f0 <osc_get_rate+0x14>)
  4015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015f0:	00401611 	.word	0x00401611
  4015f4:	00401617 	.word	0x00401617
  4015f8:	0040161d 	.word	0x0040161d
  4015fc:	00401623 	.word	0x00401623
  401600:	00401627 	.word	0x00401627
  401604:	0040162b 	.word	0x0040162b
  401608:	0040162f 	.word	0x0040162f
  40160c:	00401633 	.word	0x00401633
		return OSC_SLCK_32K_RC_HZ;
  401610:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401614:	e010      	b.n	401638 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40161a:	e00d      	b.n	401638 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40161c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401620:	e00a      	b.n	401638 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401622:	4b08      	ldr	r3, [pc, #32]	; (401644 <osc_get_rate+0x68>)
  401624:	e008      	b.n	401638 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401626:	4b08      	ldr	r3, [pc, #32]	; (401648 <osc_get_rate+0x6c>)
  401628:	e006      	b.n	401638 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40162a:	4b08      	ldr	r3, [pc, #32]	; (40164c <osc_get_rate+0x70>)
  40162c:	e004      	b.n	401638 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40162e:	4b07      	ldr	r3, [pc, #28]	; (40164c <osc_get_rate+0x70>)
  401630:	e002      	b.n	401638 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401632:	4b06      	ldr	r3, [pc, #24]	; (40164c <osc_get_rate+0x70>)
  401634:	e000      	b.n	401638 <osc_get_rate+0x5c>
	return 0;
  401636:	2300      	movs	r3, #0
}
  401638:	4618      	mov	r0, r3
  40163a:	370c      	adds	r7, #12
  40163c:	46bd      	mov	sp, r7
  40163e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401642:	4770      	bx	lr
  401644:	003d0900 	.word	0x003d0900
  401648:	007a1200 	.word	0x007a1200
  40164c:	00b71b00 	.word	0x00b71b00

00401650 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401650:	b580      	push	{r7, lr}
  401652:	b082      	sub	sp, #8
  401654:	af00      	add	r7, sp, #0
  401656:	4603      	mov	r3, r0
  401658:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40165a:	bf00      	nop
  40165c:	79fb      	ldrb	r3, [r7, #7]
  40165e:	4618      	mov	r0, r3
  401660:	4b05      	ldr	r3, [pc, #20]	; (401678 <osc_wait_ready+0x28>)
  401662:	4798      	blx	r3
  401664:	4603      	mov	r3, r0
  401666:	f083 0301 	eor.w	r3, r3, #1
  40166a:	b2db      	uxtb	r3, r3
  40166c:	2b00      	cmp	r3, #0
  40166e:	d1f5      	bne.n	40165c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401670:	bf00      	nop
  401672:	3708      	adds	r7, #8
  401674:	46bd      	mov	sp, r7
  401676:	bd80      	pop	{r7, pc}
  401678:	0040156d 	.word	0x0040156d

0040167c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40167c:	b580      	push	{r7, lr}
  40167e:	b086      	sub	sp, #24
  401680:	af00      	add	r7, sp, #0
  401682:	60f8      	str	r0, [r7, #12]
  401684:	607a      	str	r2, [r7, #4]
  401686:	603b      	str	r3, [r7, #0]
  401688:	460b      	mov	r3, r1
  40168a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  40168c:	687b      	ldr	r3, [r7, #4]
  40168e:	2b00      	cmp	r3, #0
  401690:	d107      	bne.n	4016a2 <pll_config_init+0x26>
  401692:	683b      	ldr	r3, [r7, #0]
  401694:	2b00      	cmp	r3, #0
  401696:	d104      	bne.n	4016a2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  401698:	68fb      	ldr	r3, [r7, #12]
  40169a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40169e:	601a      	str	r2, [r3, #0]
  4016a0:	e019      	b.n	4016d6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4016a2:	7afb      	ldrb	r3, [r7, #11]
  4016a4:	4618      	mov	r0, r3
  4016a6:	4b0e      	ldr	r3, [pc, #56]	; (4016e0 <pll_config_init+0x64>)
  4016a8:	4798      	blx	r3
  4016aa:	4602      	mov	r2, r0
  4016ac:	687b      	ldr	r3, [r7, #4]
  4016ae:	fbb2 f3f3 	udiv	r3, r2, r3
  4016b2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4016b4:	697b      	ldr	r3, [r7, #20]
  4016b6:	683a      	ldr	r2, [r7, #0]
  4016b8:	fb02 f303 	mul.w	r3, r2, r3
  4016bc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4016be:	683b      	ldr	r3, [r7, #0]
  4016c0:	3b01      	subs	r3, #1
  4016c2:	041a      	lsls	r2, r3, #16
  4016c4:	4b07      	ldr	r3, [pc, #28]	; (4016e4 <pll_config_init+0x68>)
  4016c6:	4013      	ands	r3, r2
  4016c8:	687a      	ldr	r2, [r7, #4]
  4016ca:	b2d2      	uxtb	r2, r2
  4016cc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4016ce:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4016d2:	68fb      	ldr	r3, [r7, #12]
  4016d4:	601a      	str	r2, [r3, #0]
	}
}
  4016d6:	bf00      	nop
  4016d8:	3718      	adds	r7, #24
  4016da:	46bd      	mov	sp, r7
  4016dc:	bd80      	pop	{r7, pc}
  4016de:	bf00      	nop
  4016e0:	004015dd 	.word	0x004015dd
  4016e4:	07ff0000 	.word	0x07ff0000

004016e8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4016e8:	b580      	push	{r7, lr}
  4016ea:	b082      	sub	sp, #8
  4016ec:	af00      	add	r7, sp, #0
  4016ee:	6078      	str	r0, [r7, #4]
  4016f0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016f2:	683b      	ldr	r3, [r7, #0]
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d108      	bne.n	40170a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4016f8:	4b09      	ldr	r3, [pc, #36]	; (401720 <pll_enable+0x38>)
  4016fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4016fc:	4a09      	ldr	r2, [pc, #36]	; (401724 <pll_enable+0x3c>)
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	681b      	ldr	r3, [r3, #0]
  401702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401706:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401708:	e005      	b.n	401716 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40170a:	4a06      	ldr	r2, [pc, #24]	; (401724 <pll_enable+0x3c>)
  40170c:	687b      	ldr	r3, [r7, #4]
  40170e:	681b      	ldr	r3, [r3, #0]
  401710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401714:	61d3      	str	r3, [r2, #28]
}
  401716:	bf00      	nop
  401718:	3708      	adds	r7, #8
  40171a:	46bd      	mov	sp, r7
  40171c:	bd80      	pop	{r7, pc}
  40171e:	bf00      	nop
  401720:	004025a9 	.word	0x004025a9
  401724:	400e0600 	.word	0x400e0600

00401728 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401728:	b580      	push	{r7, lr}
  40172a:	b082      	sub	sp, #8
  40172c:	af00      	add	r7, sp, #0
  40172e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401730:	687b      	ldr	r3, [r7, #4]
  401732:	2b00      	cmp	r3, #0
  401734:	d103      	bne.n	40173e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  401736:	4b05      	ldr	r3, [pc, #20]	; (40174c <pll_is_locked+0x24>)
  401738:	4798      	blx	r3
  40173a:	4603      	mov	r3, r0
  40173c:	e002      	b.n	401744 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40173e:	4b04      	ldr	r3, [pc, #16]	; (401750 <pll_is_locked+0x28>)
  401740:	4798      	blx	r3
  401742:	4603      	mov	r3, r0
	}
}
  401744:	4618      	mov	r0, r3
  401746:	3708      	adds	r7, #8
  401748:	46bd      	mov	sp, r7
  40174a:	bd80      	pop	{r7, pc}
  40174c:	004025c5 	.word	0x004025c5
  401750:	004025e1 	.word	0x004025e1

00401754 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401754:	b580      	push	{r7, lr}
  401756:	b082      	sub	sp, #8
  401758:	af00      	add	r7, sp, #0
  40175a:	4603      	mov	r3, r0
  40175c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40175e:	79fb      	ldrb	r3, [r7, #7]
  401760:	3b03      	subs	r3, #3
  401762:	2b04      	cmp	r3, #4
  401764:	d808      	bhi.n	401778 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401766:	79fb      	ldrb	r3, [r7, #7]
  401768:	4618      	mov	r0, r3
  40176a:	4b06      	ldr	r3, [pc, #24]	; (401784 <pll_enable_source+0x30>)
  40176c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40176e:	79fb      	ldrb	r3, [r7, #7]
  401770:	4618      	mov	r0, r3
  401772:	4b05      	ldr	r3, [pc, #20]	; (401788 <pll_enable_source+0x34>)
  401774:	4798      	blx	r3
		break;
  401776:	e000      	b.n	40177a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401778:	bf00      	nop
	}
}
  40177a:	bf00      	nop
  40177c:	3708      	adds	r7, #8
  40177e:	46bd      	mov	sp, r7
  401780:	bd80      	pop	{r7, pc}
  401782:	bf00      	nop
  401784:	004014e5 	.word	0x004014e5
  401788:	00401651 	.word	0x00401651

0040178c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40178c:	b580      	push	{r7, lr}
  40178e:	b082      	sub	sp, #8
  401790:	af00      	add	r7, sp, #0
  401792:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401794:	bf00      	nop
  401796:	6878      	ldr	r0, [r7, #4]
  401798:	4b04      	ldr	r3, [pc, #16]	; (4017ac <pll_wait_for_lock+0x20>)
  40179a:	4798      	blx	r3
  40179c:	4603      	mov	r3, r0
  40179e:	2b00      	cmp	r3, #0
  4017a0:	d0f9      	beq.n	401796 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4017a2:	2300      	movs	r3, #0
}
  4017a4:	4618      	mov	r0, r3
  4017a6:	3708      	adds	r7, #8
  4017a8:	46bd      	mov	sp, r7
  4017aa:	bd80      	pop	{r7, pc}
  4017ac:	00401729 	.word	0x00401729

004017b0 <sysclk_get_main_hz>:
{
  4017b0:	b580      	push	{r7, lr}
  4017b2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4017b4:	2006      	movs	r0, #6
  4017b6:	4b05      	ldr	r3, [pc, #20]	; (4017cc <sysclk_get_main_hz+0x1c>)
  4017b8:	4798      	blx	r3
  4017ba:	4602      	mov	r2, r0
  4017bc:	4613      	mov	r3, r2
  4017be:	009b      	lsls	r3, r3, #2
  4017c0:	4413      	add	r3, r2
  4017c2:	009a      	lsls	r2, r3, #2
  4017c4:	4413      	add	r3, r2
}
  4017c6:	4618      	mov	r0, r3
  4017c8:	bd80      	pop	{r7, pc}
  4017ca:	bf00      	nop
  4017cc:	004015dd 	.word	0x004015dd

004017d0 <sysclk_get_cpu_hz>:
{
  4017d0:	b580      	push	{r7, lr}
  4017d2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4017d4:	4b02      	ldr	r3, [pc, #8]	; (4017e0 <sysclk_get_cpu_hz+0x10>)
  4017d6:	4798      	blx	r3
  4017d8:	4603      	mov	r3, r0
}
  4017da:	4618      	mov	r0, r3
  4017dc:	bd80      	pop	{r7, pc}
  4017de:	bf00      	nop
  4017e0:	004017b1 	.word	0x004017b1

004017e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4017e4:	b590      	push	{r4, r7, lr}
  4017e6:	b083      	sub	sp, #12
  4017e8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4017ea:	4813      	ldr	r0, [pc, #76]	; (401838 <sysclk_init+0x54>)
  4017ec:	4b13      	ldr	r3, [pc, #76]	; (40183c <sysclk_init+0x58>)
  4017ee:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4017f0:	2006      	movs	r0, #6
  4017f2:	4b13      	ldr	r3, [pc, #76]	; (401840 <sysclk_init+0x5c>)
  4017f4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4017f6:	1d38      	adds	r0, r7, #4
  4017f8:	2319      	movs	r3, #25
  4017fa:	2201      	movs	r2, #1
  4017fc:	2106      	movs	r1, #6
  4017fe:	4c11      	ldr	r4, [pc, #68]	; (401844 <sysclk_init+0x60>)
  401800:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401802:	1d3b      	adds	r3, r7, #4
  401804:	2100      	movs	r1, #0
  401806:	4618      	mov	r0, r3
  401808:	4b0f      	ldr	r3, [pc, #60]	; (401848 <sysclk_init+0x64>)
  40180a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40180c:	2000      	movs	r0, #0
  40180e:	4b0f      	ldr	r3, [pc, #60]	; (40184c <sysclk_init+0x68>)
  401810:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401812:	2002      	movs	r0, #2
  401814:	4b0e      	ldr	r3, [pc, #56]	; (401850 <sysclk_init+0x6c>)
  401816:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401818:	2000      	movs	r0, #0
  40181a:	4b0e      	ldr	r3, [pc, #56]	; (401854 <sysclk_init+0x70>)
  40181c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40181e:	4b0e      	ldr	r3, [pc, #56]	; (401858 <sysclk_init+0x74>)
  401820:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401822:	4b0e      	ldr	r3, [pc, #56]	; (40185c <sysclk_init+0x78>)
  401824:	4798      	blx	r3
  401826:	4603      	mov	r3, r0
  401828:	4618      	mov	r0, r3
  40182a:	4b04      	ldr	r3, [pc, #16]	; (40183c <sysclk_init+0x58>)
  40182c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40182e:	bf00      	nop
  401830:	370c      	adds	r7, #12
  401832:	46bd      	mov	sp, r7
  401834:	bd90      	pop	{r4, r7, pc}
  401836:	bf00      	nop
  401838:	11e1a300 	.word	0x11e1a300
  40183c:	00402929 	.word	0x00402929
  401840:	00401755 	.word	0x00401755
  401844:	0040167d 	.word	0x0040167d
  401848:	004016e9 	.word	0x004016e9
  40184c:	0040178d 	.word	0x0040178d
  401850:	00402339 	.word	0x00402339
  401854:	004023b5 	.word	0x004023b5
  401858:	004027c1 	.word	0x004027c1
  40185c:	004017d1 	.word	0x004017d1

00401860 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401860:	b480      	push	{r7}
  401862:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401868:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40186c:	4b09      	ldr	r3, [pc, #36]	; (401894 <SCB_EnableICache+0x34>)
  40186e:	2200      	movs	r2, #0
  401870:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401874:	4a07      	ldr	r2, [pc, #28]	; (401894 <SCB_EnableICache+0x34>)
  401876:	4b07      	ldr	r3, [pc, #28]	; (401894 <SCB_EnableICache+0x34>)
  401878:	695b      	ldr	r3, [r3, #20]
  40187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40187e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401884:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  401888:	bf00      	nop
  40188a:	46bd      	mov	sp, r7
  40188c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401890:	4770      	bx	lr
  401892:	bf00      	nop
  401894:	e000ed00 	.word	0xe000ed00

00401898 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  401898:	b480      	push	{r7}
  40189a:	b08b      	sub	sp, #44	; 0x2c
  40189c:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40189e:	4b26      	ldr	r3, [pc, #152]	; (401938 <SCB_EnableDCache+0xa0>)
  4018a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4018a4:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  4018a6:	69fb      	ldr	r3, [r7, #28]
  4018a8:	0b5b      	lsrs	r3, r3, #13
  4018aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4018ae:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4018b0:	69fb      	ldr	r3, [r7, #28]
  4018b2:	f003 0307 	and.w	r3, r3, #7
  4018b6:	3304      	adds	r3, #4
  4018b8:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  4018ba:	69fb      	ldr	r3, [r7, #28]
  4018bc:	08db      	lsrs	r3, r3, #3
  4018be:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4018c2:	617b      	str	r3, [r7, #20]
  4018c4:	697b      	ldr	r3, [r7, #20]
  4018c6:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4018c8:	68bb      	ldr	r3, [r7, #8]
  4018ca:	fab3 f383 	clz	r3, r3
  4018ce:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  4018d0:	687b      	ldr	r3, [r7, #4]
  4018d2:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  4018d4:	f003 031f 	and.w	r3, r3, #31
  4018d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  4018da:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4018de:	697b      	ldr	r3, [r7, #20]
  4018e0:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4018e2:	6a3a      	ldr	r2, [r7, #32]
  4018e4:	693b      	ldr	r3, [r7, #16]
  4018e6:	fa02 f303 	lsl.w	r3, r2, r3
  4018ea:	4619      	mov	r1, r3
  4018ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4018ee:	69bb      	ldr	r3, [r7, #24]
  4018f0:	fa02 f303 	lsl.w	r3, r2, r3
  4018f4:	430b      	orrs	r3, r1
  4018f6:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4018f8:	4a0f      	ldr	r2, [pc, #60]	; (401938 <SCB_EnableDCache+0xa0>)
  4018fa:	68fb      	ldr	r3, [r7, #12]
  4018fc:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401900:	6a3b      	ldr	r3, [r7, #32]
  401902:	1e5a      	subs	r2, r3, #1
  401904:	623a      	str	r2, [r7, #32]
  401906:	2b00      	cmp	r3, #0
  401908:	d1eb      	bne.n	4018e2 <SCB_EnableDCache+0x4a>
        } while(sets--);
  40190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40190c:	1e5a      	subs	r2, r3, #1
  40190e:	627a      	str	r2, [r7, #36]	; 0x24
  401910:	2b00      	cmp	r3, #0
  401912:	d1e4      	bne.n	4018de <SCB_EnableDCache+0x46>
  401914:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401918:	4a07      	ldr	r2, [pc, #28]	; (401938 <SCB_EnableDCache+0xa0>)
  40191a:	4b07      	ldr	r3, [pc, #28]	; (401938 <SCB_EnableDCache+0xa0>)
  40191c:	695b      	ldr	r3, [r3, #20]
  40191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401922:	6153      	str	r3, [r2, #20]
  401924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401928:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  40192c:	bf00      	nop
  40192e:	372c      	adds	r7, #44	; 0x2c
  401930:	46bd      	mov	sp, r7
  401932:	f85d 7b04 	ldr.w	r7, [sp], #4
  401936:	4770      	bx	lr
  401938:	e000ed00 	.word	0xe000ed00

0040193c <sysclk_enable_peripheral_clock>:
{
  40193c:	b580      	push	{r7, lr}
  40193e:	b082      	sub	sp, #8
  401940:	af00      	add	r7, sp, #0
  401942:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401944:	6878      	ldr	r0, [r7, #4]
  401946:	4b03      	ldr	r3, [pc, #12]	; (401954 <sysclk_enable_peripheral_clock+0x18>)
  401948:	4798      	blx	r3
}
  40194a:	bf00      	nop
  40194c:	3708      	adds	r7, #8
  40194e:	46bd      	mov	sp, r7
  401950:	bd80      	pop	{r7, pc}
  401952:	bf00      	nop
  401954:	004025fd 	.word	0x004025fd

00401958 <ioport_init>:
{
  401958:	b580      	push	{r7, lr}
  40195a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40195c:	200a      	movs	r0, #10
  40195e:	4b08      	ldr	r3, [pc, #32]	; (401980 <ioport_init+0x28>)
  401960:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401962:	200b      	movs	r0, #11
  401964:	4b06      	ldr	r3, [pc, #24]	; (401980 <ioport_init+0x28>)
  401966:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  401968:	200c      	movs	r0, #12
  40196a:	4b05      	ldr	r3, [pc, #20]	; (401980 <ioport_init+0x28>)
  40196c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  40196e:	2010      	movs	r0, #16
  401970:	4b03      	ldr	r3, [pc, #12]	; (401980 <ioport_init+0x28>)
  401972:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401974:	2011      	movs	r0, #17
  401976:	4b02      	ldr	r3, [pc, #8]	; (401980 <ioport_init+0x28>)
  401978:	4798      	blx	r3
}
  40197a:	bf00      	nop
  40197c:	bd80      	pop	{r7, pc}
  40197e:	bf00      	nop
  401980:	0040193d 	.word	0x0040193d

00401984 <ioport_set_pin_mode>:
{
  401984:	b480      	push	{r7}
  401986:	b08d      	sub	sp, #52	; 0x34
  401988:	af00      	add	r7, sp, #0
  40198a:	6078      	str	r0, [r7, #4]
  40198c:	6039      	str	r1, [r7, #0]
  40198e:	687b      	ldr	r3, [r7, #4]
  401990:	62fb      	str	r3, [r7, #44]	; 0x2c
  401992:	683b      	ldr	r3, [r7, #0]
  401994:	62bb      	str	r3, [r7, #40]	; 0x28
  401996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401998:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40199c:	095a      	lsrs	r2, r3, #5
  40199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019a0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4019a2:	6a3b      	ldr	r3, [r7, #32]
  4019a4:	f003 031f 	and.w	r3, r3, #31
  4019a8:	2101      	movs	r1, #1
  4019aa:	fa01 f303 	lsl.w	r3, r1, r3
  4019ae:	61fa      	str	r2, [r7, #28]
  4019b0:	61bb      	str	r3, [r7, #24]
  4019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4019b4:	617b      	str	r3, [r7, #20]
  4019b6:	69fb      	ldr	r3, [r7, #28]
  4019b8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4019ba:	693a      	ldr	r2, [r7, #16]
  4019bc:	4b37      	ldr	r3, [pc, #220]	; (401a9c <ioport_set_pin_mode+0x118>)
  4019be:	4413      	add	r3, r2
  4019c0:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4019c2:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  4019c4:	697b      	ldr	r3, [r7, #20]
  4019c6:	f003 0308 	and.w	r3, r3, #8
  4019ca:	2b00      	cmp	r3, #0
  4019cc:	d003      	beq.n	4019d6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	69ba      	ldr	r2, [r7, #24]
  4019d2:	665a      	str	r2, [r3, #100]	; 0x64
  4019d4:	e002      	b.n	4019dc <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  4019d6:	68fb      	ldr	r3, [r7, #12]
  4019d8:	69ba      	ldr	r2, [r7, #24]
  4019da:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4019dc:	697b      	ldr	r3, [r7, #20]
  4019de:	f003 0310 	and.w	r3, r3, #16
  4019e2:	2b00      	cmp	r3, #0
  4019e4:	d004      	beq.n	4019f0 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4019e6:	68fb      	ldr	r3, [r7, #12]
  4019e8:	69ba      	ldr	r2, [r7, #24]
  4019ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4019ee:	e003      	b.n	4019f8 <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  4019f0:	68fb      	ldr	r3, [r7, #12]
  4019f2:	69ba      	ldr	r2, [r7, #24]
  4019f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4019f8:	697b      	ldr	r3, [r7, #20]
  4019fa:	f003 0320 	and.w	r3, r3, #32
  4019fe:	2b00      	cmp	r3, #0
  401a00:	d003      	beq.n	401a0a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401a02:	68fb      	ldr	r3, [r7, #12]
  401a04:	69ba      	ldr	r2, [r7, #24]
  401a06:	651a      	str	r2, [r3, #80]	; 0x50
  401a08:	e002      	b.n	401a10 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  401a0a:	68fb      	ldr	r3, [r7, #12]
  401a0c:	69ba      	ldr	r2, [r7, #24]
  401a0e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401a10:	697b      	ldr	r3, [r7, #20]
  401a12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401a16:	2b00      	cmp	r3, #0
  401a18:	d003      	beq.n	401a22 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  401a1a:	68fb      	ldr	r3, [r7, #12]
  401a1c:	69ba      	ldr	r2, [r7, #24]
  401a1e:	621a      	str	r2, [r3, #32]
  401a20:	e002      	b.n	401a28 <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	69ba      	ldr	r2, [r7, #24]
  401a26:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401a28:	697b      	ldr	r3, [r7, #20]
  401a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a2e:	2b00      	cmp	r3, #0
  401a30:	d004      	beq.n	401a3c <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  401a32:	68fb      	ldr	r3, [r7, #12]
  401a34:	69ba      	ldr	r2, [r7, #24]
  401a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401a3a:	e003      	b.n	401a44 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401a3c:	68fb      	ldr	r3, [r7, #12]
  401a3e:	69ba      	ldr	r2, [r7, #24]
  401a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401a44:	697b      	ldr	r3, [r7, #20]
  401a46:	f003 0301 	and.w	r3, r3, #1
  401a4a:	2b00      	cmp	r3, #0
  401a4c:	d006      	beq.n	401a5c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401a4e:	68fb      	ldr	r3, [r7, #12]
  401a50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a52:	69bb      	ldr	r3, [r7, #24]
  401a54:	431a      	orrs	r2, r3
  401a56:	68fb      	ldr	r3, [r7, #12]
  401a58:	671a      	str	r2, [r3, #112]	; 0x70
  401a5a:	e006      	b.n	401a6a <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401a5c:	68fb      	ldr	r3, [r7, #12]
  401a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a60:	69bb      	ldr	r3, [r7, #24]
  401a62:	43db      	mvns	r3, r3
  401a64:	401a      	ands	r2, r3
  401a66:	68fb      	ldr	r3, [r7, #12]
  401a68:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401a6a:	697b      	ldr	r3, [r7, #20]
  401a6c:	f003 0302 	and.w	r3, r3, #2
  401a70:	2b00      	cmp	r3, #0
  401a72:	d006      	beq.n	401a82 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401a74:	68fb      	ldr	r3, [r7, #12]
  401a76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a78:	69bb      	ldr	r3, [r7, #24]
  401a7a:	431a      	orrs	r2, r3
  401a7c:	68fb      	ldr	r3, [r7, #12]
  401a7e:	675a      	str	r2, [r3, #116]	; 0x74
}
  401a80:	e006      	b.n	401a90 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401a82:	68fb      	ldr	r3, [r7, #12]
  401a84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a86:	69bb      	ldr	r3, [r7, #24]
  401a88:	43db      	mvns	r3, r3
  401a8a:	401a      	ands	r2, r3
  401a8c:	68fb      	ldr	r3, [r7, #12]
  401a8e:	675a      	str	r2, [r3, #116]	; 0x74
  401a90:	bf00      	nop
  401a92:	3734      	adds	r7, #52	; 0x34
  401a94:	46bd      	mov	sp, r7
  401a96:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a9a:	4770      	bx	lr
  401a9c:	00200707 	.word	0x00200707

00401aa0 <ioport_set_pin_dir>:
{
  401aa0:	b480      	push	{r7}
  401aa2:	b08d      	sub	sp, #52	; 0x34
  401aa4:	af00      	add	r7, sp, #0
  401aa6:	6078      	str	r0, [r7, #4]
  401aa8:	460b      	mov	r3, r1
  401aaa:	70fb      	strb	r3, [r7, #3]
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ab0:	78fb      	ldrb	r3, [r7, #3]
  401ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ab8:	627b      	str	r3, [r7, #36]	; 0x24
  401aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401abc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401abe:	6a3b      	ldr	r3, [r7, #32]
  401ac0:	095b      	lsrs	r3, r3, #5
  401ac2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401ac4:	69fa      	ldr	r2, [r7, #28]
  401ac6:	4b17      	ldr	r3, [pc, #92]	; (401b24 <ioport_set_pin_dir+0x84>)
  401ac8:	4413      	add	r3, r2
  401aca:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401acc:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401ace:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ad2:	2b01      	cmp	r3, #1
  401ad4:	d109      	bne.n	401aea <ioport_set_pin_dir+0x4a>
  401ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ad8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401ada:	697b      	ldr	r3, [r7, #20]
  401adc:	f003 031f 	and.w	r3, r3, #31
  401ae0:	2201      	movs	r2, #1
  401ae2:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ae4:	69bb      	ldr	r3, [r7, #24]
  401ae6:	611a      	str	r2, [r3, #16]
  401ae8:	e00c      	b.n	401b04 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401aee:	2b00      	cmp	r3, #0
  401af0:	d108      	bne.n	401b04 <ioport_set_pin_dir+0x64>
  401af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401af4:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401af6:	693b      	ldr	r3, [r7, #16]
  401af8:	f003 031f 	and.w	r3, r3, #31
  401afc:	2201      	movs	r2, #1
  401afe:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b00:	69bb      	ldr	r3, [r7, #24]
  401b02:	615a      	str	r2, [r3, #20]
  401b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b06:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b08:	68fb      	ldr	r3, [r7, #12]
  401b0a:	f003 031f 	and.w	r3, r3, #31
  401b0e:	2201      	movs	r2, #1
  401b10:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b12:	69bb      	ldr	r3, [r7, #24]
  401b14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401b18:	bf00      	nop
  401b1a:	3734      	adds	r7, #52	; 0x34
  401b1c:	46bd      	mov	sp, r7
  401b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b22:	4770      	bx	lr
  401b24:	00200707 	.word	0x00200707

00401b28 <ioport_set_pin_level>:
{
  401b28:	b480      	push	{r7}
  401b2a:	b08b      	sub	sp, #44	; 0x2c
  401b2c:	af00      	add	r7, sp, #0
  401b2e:	6078      	str	r0, [r7, #4]
  401b30:	460b      	mov	r3, r1
  401b32:	70fb      	strb	r3, [r7, #3]
  401b34:	687b      	ldr	r3, [r7, #4]
  401b36:	627b      	str	r3, [r7, #36]	; 0x24
  401b38:	78fb      	ldrb	r3, [r7, #3]
  401b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b40:	61fb      	str	r3, [r7, #28]
  401b42:	69fb      	ldr	r3, [r7, #28]
  401b44:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401b46:	69bb      	ldr	r3, [r7, #24]
  401b48:	095b      	lsrs	r3, r3, #5
  401b4a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b4c:	697a      	ldr	r2, [r7, #20]
  401b4e:	4b10      	ldr	r3, [pc, #64]	; (401b90 <ioport_set_pin_level+0x68>)
  401b50:	4413      	add	r3, r2
  401b52:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401b54:	613b      	str	r3, [r7, #16]
	if (level) {
  401b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d009      	beq.n	401b72 <ioport_set_pin_level+0x4a>
  401b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b60:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b62:	68fb      	ldr	r3, [r7, #12]
  401b64:	f003 031f 	and.w	r3, r3, #31
  401b68:	2201      	movs	r2, #1
  401b6a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b6c:	693b      	ldr	r3, [r7, #16]
  401b6e:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b70:	e008      	b.n	401b84 <ioport_set_pin_level+0x5c>
  401b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b74:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401b76:	68bb      	ldr	r3, [r7, #8]
  401b78:	f003 031f 	and.w	r3, r3, #31
  401b7c:	2201      	movs	r2, #1
  401b7e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b80:	693b      	ldr	r3, [r7, #16]
  401b82:	635a      	str	r2, [r3, #52]	; 0x34
  401b84:	bf00      	nop
  401b86:	372c      	adds	r7, #44	; 0x2c
  401b88:	46bd      	mov	sp, r7
  401b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b8e:	4770      	bx	lr
  401b90:	00200707 	.word	0x00200707

00401b94 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401b94:	b480      	push	{r7}
  401b96:	b08d      	sub	sp, #52	; 0x34
  401b98:	af00      	add	r7, sp, #0
  401b9a:	6078      	str	r0, [r7, #4]
  401b9c:	460b      	mov	r3, r1
  401b9e:	70fb      	strb	r3, [r7, #3]
  401ba0:	687b      	ldr	r3, [r7, #4]
  401ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ba4:	78fb      	ldrb	r3, [r7, #3]
  401ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bac:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bb0:	095a      	lsrs	r2, r3, #5
  401bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bb4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401bb6:	6a3b      	ldr	r3, [r7, #32]
  401bb8:	f003 031f 	and.w	r3, r3, #31
  401bbc:	2101      	movs	r1, #1
  401bbe:	fa01 f303 	lsl.w	r3, r1, r3
  401bc2:	61fa      	str	r2, [r7, #28]
  401bc4:	61bb      	str	r3, [r7, #24]
  401bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401bca:	75fb      	strb	r3, [r7, #23]
  401bcc:	69fb      	ldr	r3, [r7, #28]
  401bce:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bd0:	693a      	ldr	r2, [r7, #16]
  401bd2:	4b23      	ldr	r3, [pc, #140]	; (401c60 <ioport_set_pin_sense_mode+0xcc>)
  401bd4:	4413      	add	r3, r2
  401bd6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401bd8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401bda:	7dfb      	ldrb	r3, [r7, #23]
  401bdc:	3b01      	subs	r3, #1
  401bde:	2b03      	cmp	r3, #3
  401be0:	d82e      	bhi.n	401c40 <ioport_set_pin_sense_mode+0xac>
  401be2:	a201      	add	r2, pc, #4	; (adr r2, 401be8 <ioport_set_pin_sense_mode+0x54>)
  401be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401be8:	00401c1d 	.word	0x00401c1d
  401bec:	00401c2f 	.word	0x00401c2f
  401bf0:	00401bf9 	.word	0x00401bf9
  401bf4:	00401c0b 	.word	0x00401c0b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401bf8:	68fb      	ldr	r3, [r7, #12]
  401bfa:	69ba      	ldr	r2, [r7, #24]
  401bfc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401c00:	68fb      	ldr	r3, [r7, #12]
  401c02:	69ba      	ldr	r2, [r7, #24]
  401c04:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401c08:	e01f      	b.n	401c4a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	69ba      	ldr	r2, [r7, #24]
  401c0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401c12:	68fb      	ldr	r3, [r7, #12]
  401c14:	69ba      	ldr	r2, [r7, #24]
  401c16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c1a:	e016      	b.n	401c4a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401c1c:	68fb      	ldr	r3, [r7, #12]
  401c1e:	69ba      	ldr	r2, [r7, #24]
  401c20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401c24:	68fb      	ldr	r3, [r7, #12]
  401c26:	69ba      	ldr	r2, [r7, #24]
  401c28:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401c2c:	e00d      	b.n	401c4a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401c2e:	68fb      	ldr	r3, [r7, #12]
  401c30:	69ba      	ldr	r2, [r7, #24]
  401c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401c36:	68fb      	ldr	r3, [r7, #12]
  401c38:	69ba      	ldr	r2, [r7, #24]
  401c3a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c3e:	e004      	b.n	401c4a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401c40:	68fb      	ldr	r3, [r7, #12]
  401c42:	69ba      	ldr	r2, [r7, #24]
  401c44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401c48:	e003      	b.n	401c52 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401c4a:	68fb      	ldr	r3, [r7, #12]
  401c4c:	69ba      	ldr	r2, [r7, #24]
  401c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401c52:	bf00      	nop
  401c54:	3734      	adds	r7, #52	; 0x34
  401c56:	46bd      	mov	sp, r7
  401c58:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c5c:	4770      	bx	lr
  401c5e:	bf00      	nop
  401c60:	00200707 	.word	0x00200707

00401c64 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401c64:	b480      	push	{r7}
  401c66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401c68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c6c:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c70:	4a0c      	ldr	r2, [pc, #48]	; (401ca4 <tcm_disable+0x40>)
  401c72:	4b0c      	ldr	r3, [pc, #48]	; (401ca4 <tcm_disable+0x40>)
  401c74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401c78:	f023 0301 	bic.w	r3, r3, #1
  401c7c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c80:	4a08      	ldr	r2, [pc, #32]	; (401ca4 <tcm_disable+0x40>)
  401c82:	4b08      	ldr	r3, [pc, #32]	; (401ca4 <tcm_disable+0x40>)
  401c84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401c88:	f023 0301 	bic.w	r3, r3, #1
  401c8c:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c94:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401c98:	bf00      	nop
  401c9a:	46bd      	mov	sp, r7
  401c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ca0:	4770      	bx	lr
  401ca2:	bf00      	nop
  401ca4:	e000ed00 	.word	0xe000ed00

00401ca8 <board_init>:
#endif

void board_init(void)
{
  401ca8:	b580      	push	{r7, lr}
  401caa:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401cac:	4b13      	ldr	r3, [pc, #76]	; (401cfc <board_init+0x54>)
  401cae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401cb2:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401cb4:	4b12      	ldr	r3, [pc, #72]	; (401d00 <board_init+0x58>)
  401cb6:	4798      	blx	r3
	SCB_EnableDCache();
  401cb8:	4b12      	ldr	r3, [pc, #72]	; (401d04 <board_init+0x5c>)
  401cba:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401cbc:	4b12      	ldr	r3, [pc, #72]	; (401d08 <board_init+0x60>)
  401cbe:	4a13      	ldr	r2, [pc, #76]	; (401d0c <board_init+0x64>)
  401cc0:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401cc2:	4b11      	ldr	r3, [pc, #68]	; (401d08 <board_init+0x60>)
  401cc4:	4a12      	ldr	r2, [pc, #72]	; (401d10 <board_init+0x68>)
  401cc6:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401cc8:	4b12      	ldr	r3, [pc, #72]	; (401d14 <board_init+0x6c>)
  401cca:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401ccc:	4b12      	ldr	r3, [pc, #72]	; (401d18 <board_init+0x70>)
  401cce:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401cd0:	2101      	movs	r1, #1
  401cd2:	2048      	movs	r0, #72	; 0x48
  401cd4:	4b11      	ldr	r3, [pc, #68]	; (401d1c <board_init+0x74>)
  401cd6:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401cd8:	2101      	movs	r1, #1
  401cda:	2048      	movs	r0, #72	; 0x48
  401cdc:	4b10      	ldr	r3, [pc, #64]	; (401d20 <board_init+0x78>)
  401cde:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401ce0:	2100      	movs	r1, #0
  401ce2:	200b      	movs	r0, #11
  401ce4:	4b0d      	ldr	r3, [pc, #52]	; (401d1c <board_init+0x74>)
  401ce6:	4798      	blx	r3
  401ce8:	2188      	movs	r1, #136	; 0x88
  401cea:	200b      	movs	r0, #11
  401cec:	4b0d      	ldr	r3, [pc, #52]	; (401d24 <board_init+0x7c>)
  401cee:	4798      	blx	r3
  401cf0:	2102      	movs	r1, #2
  401cf2:	200b      	movs	r0, #11
  401cf4:	4b0c      	ldr	r3, [pc, #48]	; (401d28 <board_init+0x80>)
  401cf6:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401cf8:	bf00      	nop
  401cfa:	bd80      	pop	{r7, pc}
  401cfc:	400e1850 	.word	0x400e1850
  401d00:	00401861 	.word	0x00401861
  401d04:	00401899 	.word	0x00401899
  401d08:	400e0c00 	.word	0x400e0c00
  401d0c:	5a00080c 	.word	0x5a00080c
  401d10:	5a00070c 	.word	0x5a00070c
  401d14:	00401c65 	.word	0x00401c65
  401d18:	00401959 	.word	0x00401959
  401d1c:	00401aa1 	.word	0x00401aa1
  401d20:	00401b29 	.word	0x00401b29
  401d24:	00401985 	.word	0x00401985
  401d28:	00401b95 	.word	0x00401b95

00401d2c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401d2c:	b480      	push	{r7}
  401d2e:	b085      	sub	sp, #20
  401d30:	af00      	add	r7, sp, #0
  401d32:	60f8      	str	r0, [r7, #12]
  401d34:	60b9      	str	r1, [r7, #8]
  401d36:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d38:	687b      	ldr	r3, [r7, #4]
  401d3a:	2b00      	cmp	r3, #0
  401d3c:	d003      	beq.n	401d46 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401d3e:	68fb      	ldr	r3, [r7, #12]
  401d40:	68ba      	ldr	r2, [r7, #8]
  401d42:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401d44:	e002      	b.n	401d4c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401d46:	68fb      	ldr	r3, [r7, #12]
  401d48:	68ba      	ldr	r2, [r7, #8]
  401d4a:	661a      	str	r2, [r3, #96]	; 0x60
}
  401d4c:	bf00      	nop
  401d4e:	3714      	adds	r7, #20
  401d50:	46bd      	mov	sp, r7
  401d52:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d56:	4770      	bx	lr

00401d58 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401d58:	b480      	push	{r7}
  401d5a:	b083      	sub	sp, #12
  401d5c:	af00      	add	r7, sp, #0
  401d5e:	6078      	str	r0, [r7, #4]
  401d60:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401d62:	687b      	ldr	r3, [r7, #4]
  401d64:	683a      	ldr	r2, [r7, #0]
  401d66:	631a      	str	r2, [r3, #48]	; 0x30
}
  401d68:	bf00      	nop
  401d6a:	370c      	adds	r7, #12
  401d6c:	46bd      	mov	sp, r7
  401d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d72:	4770      	bx	lr

00401d74 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401d74:	b480      	push	{r7}
  401d76:	b083      	sub	sp, #12
  401d78:	af00      	add	r7, sp, #0
  401d7a:	6078      	str	r0, [r7, #4]
  401d7c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401d7e:	687b      	ldr	r3, [r7, #4]
  401d80:	683a      	ldr	r2, [r7, #0]
  401d82:	635a      	str	r2, [r3, #52]	; 0x34
}
  401d84:	bf00      	nop
  401d86:	370c      	adds	r7, #12
  401d88:	46bd      	mov	sp, r7
  401d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d8e:	4770      	bx	lr

00401d90 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401d90:	b480      	push	{r7}
  401d92:	b087      	sub	sp, #28
  401d94:	af00      	add	r7, sp, #0
  401d96:	60f8      	str	r0, [r7, #12]
  401d98:	60b9      	str	r1, [r7, #8]
  401d9a:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  401d9c:	68bb      	ldr	r3, [r7, #8]
  401d9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401da2:	d003      	beq.n	401dac <pio_get+0x1c>
  401da4:	68bb      	ldr	r3, [r7, #8]
  401da6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401daa:	d103      	bne.n	401db4 <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  401dac:	68fb      	ldr	r3, [r7, #12]
  401dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401db0:	617b      	str	r3, [r7, #20]
  401db2:	e002      	b.n	401dba <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  401db4:	68fb      	ldr	r3, [r7, #12]
  401db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401db8:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  401dba:	697a      	ldr	r2, [r7, #20]
  401dbc:	687b      	ldr	r3, [r7, #4]
  401dbe:	4013      	ands	r3, r2
  401dc0:	2b00      	cmp	r3, #0
  401dc2:	d101      	bne.n	401dc8 <pio_get+0x38>
		return 0;
  401dc4:	2300      	movs	r3, #0
  401dc6:	e000      	b.n	401dca <pio_get+0x3a>
	} else {
		return 1;
  401dc8:	2301      	movs	r3, #1
	}
}
  401dca:	4618      	mov	r0, r3
  401dcc:	371c      	adds	r7, #28
  401dce:	46bd      	mov	sp, r7
  401dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dd4:	4770      	bx	lr

00401dd6 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401dd6:	b480      	push	{r7}
  401dd8:	b087      	sub	sp, #28
  401dda:	af00      	add	r7, sp, #0
  401ddc:	60f8      	str	r0, [r7, #12]
  401dde:	60b9      	str	r1, [r7, #8]
  401de0:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401de2:	68fb      	ldr	r3, [r7, #12]
  401de4:	687a      	ldr	r2, [r7, #4]
  401de6:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401de8:	68bb      	ldr	r3, [r7, #8]
  401dea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401dee:	d04a      	beq.n	401e86 <pio_set_peripheral+0xb0>
  401df0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401df4:	d808      	bhi.n	401e08 <pio_set_peripheral+0x32>
  401df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401dfa:	d016      	beq.n	401e2a <pio_set_peripheral+0x54>
  401dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401e00:	d02c      	beq.n	401e5c <pio_set_peripheral+0x86>
  401e02:	2b00      	cmp	r3, #0
  401e04:	d069      	beq.n	401eda <pio_set_peripheral+0x104>
  401e06:	e064      	b.n	401ed2 <pio_set_peripheral+0xfc>
  401e08:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e0c:	d065      	beq.n	401eda <pio_set_peripheral+0x104>
  401e0e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e12:	d803      	bhi.n	401e1c <pio_set_peripheral+0x46>
  401e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e18:	d04a      	beq.n	401eb0 <pio_set_peripheral+0xda>
  401e1a:	e05a      	b.n	401ed2 <pio_set_peripheral+0xfc>
  401e1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401e20:	d05b      	beq.n	401eda <pio_set_peripheral+0x104>
  401e22:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e26:	d058      	beq.n	401eda <pio_set_peripheral+0x104>
  401e28:	e053      	b.n	401ed2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e2a:	68fb      	ldr	r3, [r7, #12]
  401e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e2e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e30:	68fb      	ldr	r3, [r7, #12]
  401e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e34:	687b      	ldr	r3, [r7, #4]
  401e36:	43d9      	mvns	r1, r3
  401e38:	697b      	ldr	r3, [r7, #20]
  401e3a:	400b      	ands	r3, r1
  401e3c:	401a      	ands	r2, r3
  401e3e:	68fb      	ldr	r3, [r7, #12]
  401e40:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e46:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e48:	68fb      	ldr	r3, [r7, #12]
  401e4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e4c:	687b      	ldr	r3, [r7, #4]
  401e4e:	43d9      	mvns	r1, r3
  401e50:	697b      	ldr	r3, [r7, #20]
  401e52:	400b      	ands	r3, r1
  401e54:	401a      	ands	r2, r3
  401e56:	68fb      	ldr	r3, [r7, #12]
  401e58:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e5a:	e03a      	b.n	401ed2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e5c:	68fb      	ldr	r3, [r7, #12]
  401e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e60:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e62:	687a      	ldr	r2, [r7, #4]
  401e64:	697b      	ldr	r3, [r7, #20]
  401e66:	431a      	orrs	r2, r3
  401e68:	68fb      	ldr	r3, [r7, #12]
  401e6a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e6c:	68fb      	ldr	r3, [r7, #12]
  401e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e70:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401e72:	68fb      	ldr	r3, [r7, #12]
  401e74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401e76:	687b      	ldr	r3, [r7, #4]
  401e78:	43d9      	mvns	r1, r3
  401e7a:	697b      	ldr	r3, [r7, #20]
  401e7c:	400b      	ands	r3, r1
  401e7e:	401a      	ands	r2, r3
  401e80:	68fb      	ldr	r3, [r7, #12]
  401e82:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e84:	e025      	b.n	401ed2 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e8a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e8c:	68fb      	ldr	r3, [r7, #12]
  401e8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e90:	687b      	ldr	r3, [r7, #4]
  401e92:	43d9      	mvns	r1, r3
  401e94:	697b      	ldr	r3, [r7, #20]
  401e96:	400b      	ands	r3, r1
  401e98:	401a      	ands	r2, r3
  401e9a:	68fb      	ldr	r3, [r7, #12]
  401e9c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e9e:	68fb      	ldr	r3, [r7, #12]
  401ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401ea2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ea4:	687a      	ldr	r2, [r7, #4]
  401ea6:	697b      	ldr	r3, [r7, #20]
  401ea8:	431a      	orrs	r2, r3
  401eaa:	68fb      	ldr	r3, [r7, #12]
  401eac:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401eae:	e010      	b.n	401ed2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401eb0:	68fb      	ldr	r3, [r7, #12]
  401eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401eb4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401eb6:	687a      	ldr	r2, [r7, #4]
  401eb8:	697b      	ldr	r3, [r7, #20]
  401eba:	431a      	orrs	r2, r3
  401ebc:	68fb      	ldr	r3, [r7, #12]
  401ebe:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ec0:	68fb      	ldr	r3, [r7, #12]
  401ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401ec4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ec6:	687a      	ldr	r2, [r7, #4]
  401ec8:	697b      	ldr	r3, [r7, #20]
  401eca:	431a      	orrs	r2, r3
  401ecc:	68fb      	ldr	r3, [r7, #12]
  401ece:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401ed0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	687a      	ldr	r2, [r7, #4]
  401ed6:	605a      	str	r2, [r3, #4]
  401ed8:	e000      	b.n	401edc <pio_set_peripheral+0x106>
		return;
  401eda:	bf00      	nop
}
  401edc:	371c      	adds	r7, #28
  401ede:	46bd      	mov	sp, r7
  401ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ee4:	4770      	bx	lr
	...

00401ee8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401ee8:	b580      	push	{r7, lr}
  401eea:	b084      	sub	sp, #16
  401eec:	af00      	add	r7, sp, #0
  401eee:	60f8      	str	r0, [r7, #12]
  401ef0:	60b9      	str	r1, [r7, #8]
  401ef2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401ef4:	68b9      	ldr	r1, [r7, #8]
  401ef6:	68f8      	ldr	r0, [r7, #12]
  401ef8:	4b19      	ldr	r3, [pc, #100]	; (401f60 <pio_set_input+0x78>)
  401efa:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401efc:	687b      	ldr	r3, [r7, #4]
  401efe:	f003 0301 	and.w	r3, r3, #1
  401f02:	461a      	mov	r2, r3
  401f04:	68b9      	ldr	r1, [r7, #8]
  401f06:	68f8      	ldr	r0, [r7, #12]
  401f08:	4b16      	ldr	r3, [pc, #88]	; (401f64 <pio_set_input+0x7c>)
  401f0a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401f0c:	687b      	ldr	r3, [r7, #4]
  401f0e:	f003 030a 	and.w	r3, r3, #10
  401f12:	2b00      	cmp	r3, #0
  401f14:	d003      	beq.n	401f1e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401f16:	68fb      	ldr	r3, [r7, #12]
  401f18:	68ba      	ldr	r2, [r7, #8]
  401f1a:	621a      	str	r2, [r3, #32]
  401f1c:	e002      	b.n	401f24 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401f1e:	68fb      	ldr	r3, [r7, #12]
  401f20:	68ba      	ldr	r2, [r7, #8]
  401f22:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401f24:	687b      	ldr	r3, [r7, #4]
  401f26:	f003 0302 	and.w	r3, r3, #2
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d004      	beq.n	401f38 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401f2e:	68fb      	ldr	r3, [r7, #12]
  401f30:	68ba      	ldr	r2, [r7, #8]
  401f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401f36:	e008      	b.n	401f4a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401f38:	687b      	ldr	r3, [r7, #4]
  401f3a:	f003 0308 	and.w	r3, r3, #8
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d003      	beq.n	401f4a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	68ba      	ldr	r2, [r7, #8]
  401f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401f4a:	68fb      	ldr	r3, [r7, #12]
  401f4c:	68ba      	ldr	r2, [r7, #8]
  401f4e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401f50:	68fb      	ldr	r3, [r7, #12]
  401f52:	68ba      	ldr	r2, [r7, #8]
  401f54:	601a      	str	r2, [r3, #0]
}
  401f56:	bf00      	nop
  401f58:	3710      	adds	r7, #16
  401f5a:	46bd      	mov	sp, r7
  401f5c:	bd80      	pop	{r7, pc}
  401f5e:	bf00      	nop
  401f60:	00402121 	.word	0x00402121
  401f64:	00401d2d 	.word	0x00401d2d

00401f68 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401f68:	b580      	push	{r7, lr}
  401f6a:	b084      	sub	sp, #16
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	60f8      	str	r0, [r7, #12]
  401f70:	60b9      	str	r1, [r7, #8]
  401f72:	607a      	str	r2, [r7, #4]
  401f74:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401f76:	68b9      	ldr	r1, [r7, #8]
  401f78:	68f8      	ldr	r0, [r7, #12]
  401f7a:	4b12      	ldr	r3, [pc, #72]	; (401fc4 <pio_set_output+0x5c>)
  401f7c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401f7e:	69ba      	ldr	r2, [r7, #24]
  401f80:	68b9      	ldr	r1, [r7, #8]
  401f82:	68f8      	ldr	r0, [r7, #12]
  401f84:	4b10      	ldr	r3, [pc, #64]	; (401fc8 <pio_set_output+0x60>)
  401f86:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401f88:	683b      	ldr	r3, [r7, #0]
  401f8a:	2b00      	cmp	r3, #0
  401f8c:	d003      	beq.n	401f96 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401f8e:	68fb      	ldr	r3, [r7, #12]
  401f90:	68ba      	ldr	r2, [r7, #8]
  401f92:	651a      	str	r2, [r3, #80]	; 0x50
  401f94:	e002      	b.n	401f9c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401f96:	68fb      	ldr	r3, [r7, #12]
  401f98:	68ba      	ldr	r2, [r7, #8]
  401f9a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401f9c:	687b      	ldr	r3, [r7, #4]
  401f9e:	2b00      	cmp	r3, #0
  401fa0:	d003      	beq.n	401faa <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401fa2:	68fb      	ldr	r3, [r7, #12]
  401fa4:	68ba      	ldr	r2, [r7, #8]
  401fa6:	631a      	str	r2, [r3, #48]	; 0x30
  401fa8:	e002      	b.n	401fb0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401faa:	68fb      	ldr	r3, [r7, #12]
  401fac:	68ba      	ldr	r2, [r7, #8]
  401fae:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401fb0:	68fb      	ldr	r3, [r7, #12]
  401fb2:	68ba      	ldr	r2, [r7, #8]
  401fb4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401fb6:	68fb      	ldr	r3, [r7, #12]
  401fb8:	68ba      	ldr	r2, [r7, #8]
  401fba:	601a      	str	r2, [r3, #0]
}
  401fbc:	bf00      	nop
  401fbe:	3710      	adds	r7, #16
  401fc0:	46bd      	mov	sp, r7
  401fc2:	bd80      	pop	{r7, pc}
  401fc4:	00402121 	.word	0x00402121
  401fc8:	00401d2d 	.word	0x00401d2d

00401fcc <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401fcc:	b590      	push	{r4, r7, lr}
  401fce:	b087      	sub	sp, #28
  401fd0:	af02      	add	r7, sp, #8
  401fd2:	60f8      	str	r0, [r7, #12]
  401fd4:	60b9      	str	r1, [r7, #8]
  401fd6:	607a      	str	r2, [r7, #4]
  401fd8:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401fda:	68bb      	ldr	r3, [r7, #8]
  401fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401fe0:	d016      	beq.n	402010 <pio_configure+0x44>
  401fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401fe6:	d809      	bhi.n	401ffc <pio_configure+0x30>
  401fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401fec:	d010      	beq.n	402010 <pio_configure+0x44>
  401fee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401ff2:	d00d      	beq.n	402010 <pio_configure+0x44>
  401ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ff8:	d00a      	beq.n	402010 <pio_configure+0x44>
  401ffa:	e03d      	b.n	402078 <pio_configure+0xac>
  401ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402000:	d01a      	beq.n	402038 <pio_configure+0x6c>
  402002:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402006:	d017      	beq.n	402038 <pio_configure+0x6c>
  402008:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40200c:	d00e      	beq.n	40202c <pio_configure+0x60>
  40200e:	e033      	b.n	402078 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402010:	687a      	ldr	r2, [r7, #4]
  402012:	68b9      	ldr	r1, [r7, #8]
  402014:	68f8      	ldr	r0, [r7, #12]
  402016:	4b1c      	ldr	r3, [pc, #112]	; (402088 <pio_configure+0xbc>)
  402018:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40201a:	683b      	ldr	r3, [r7, #0]
  40201c:	f003 0301 	and.w	r3, r3, #1
  402020:	461a      	mov	r2, r3
  402022:	6879      	ldr	r1, [r7, #4]
  402024:	68f8      	ldr	r0, [r7, #12]
  402026:	4b19      	ldr	r3, [pc, #100]	; (40208c <pio_configure+0xc0>)
  402028:	4798      	blx	r3
		break;
  40202a:	e027      	b.n	40207c <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  40202c:	683a      	ldr	r2, [r7, #0]
  40202e:	6879      	ldr	r1, [r7, #4]
  402030:	68f8      	ldr	r0, [r7, #12]
  402032:	4b17      	ldr	r3, [pc, #92]	; (402090 <pio_configure+0xc4>)
  402034:	4798      	blx	r3
		break;
  402036:	e021      	b.n	40207c <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402038:	68bb      	ldr	r3, [r7, #8]
  40203a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40203e:	bf0c      	ite	eq
  402040:	2301      	moveq	r3, #1
  402042:	2300      	movne	r3, #0
  402044:	b2db      	uxtb	r3, r3
  402046:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  402048:	683b      	ldr	r3, [r7, #0]
  40204a:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40204e:	2b00      	cmp	r3, #0
  402050:	bf14      	ite	ne
  402052:	2301      	movne	r3, #1
  402054:	2300      	moveq	r3, #0
  402056:	b2db      	uxtb	r3, r3
  402058:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40205a:	683b      	ldr	r3, [r7, #0]
  40205c:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402060:	2b00      	cmp	r3, #0
  402062:	bf14      	ite	ne
  402064:	2301      	movne	r3, #1
  402066:	2300      	moveq	r3, #0
  402068:	b2db      	uxtb	r3, r3
  40206a:	9300      	str	r3, [sp, #0]
  40206c:	460b      	mov	r3, r1
  40206e:	6879      	ldr	r1, [r7, #4]
  402070:	68f8      	ldr	r0, [r7, #12]
  402072:	4c08      	ldr	r4, [pc, #32]	; (402094 <pio_configure+0xc8>)
  402074:	47a0      	blx	r4
		break;
  402076:	e001      	b.n	40207c <pio_configure+0xb0>

	default:
		return 0;
  402078:	2300      	movs	r3, #0
  40207a:	e000      	b.n	40207e <pio_configure+0xb2>
	}

	return 1;
  40207c:	2301      	movs	r3, #1
}
  40207e:	4618      	mov	r0, r3
  402080:	3714      	adds	r7, #20
  402082:	46bd      	mov	sp, r7
  402084:	bd90      	pop	{r4, r7, pc}
  402086:	bf00      	nop
  402088:	00401dd7 	.word	0x00401dd7
  40208c:	00401d2d 	.word	0x00401d2d
  402090:	00401ee9 	.word	0x00401ee9
  402094:	00401f69 	.word	0x00401f69

00402098 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402098:	b480      	push	{r7}
  40209a:	b085      	sub	sp, #20
  40209c:	af00      	add	r7, sp, #0
  40209e:	60f8      	str	r0, [r7, #12]
  4020a0:	60b9      	str	r1, [r7, #8]
  4020a2:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4020a4:	687b      	ldr	r3, [r7, #4]
  4020a6:	f003 0310 	and.w	r3, r3, #16
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	d020      	beq.n	4020f0 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4020ae:	68fb      	ldr	r3, [r7, #12]
  4020b0:	68ba      	ldr	r2, [r7, #8]
  4020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4020b6:	687b      	ldr	r3, [r7, #4]
  4020b8:	f003 0320 	and.w	r3, r3, #32
  4020bc:	2b00      	cmp	r3, #0
  4020be:	d004      	beq.n	4020ca <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4020c0:	68fb      	ldr	r3, [r7, #12]
  4020c2:	68ba      	ldr	r2, [r7, #8]
  4020c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4020c8:	e003      	b.n	4020d2 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4020ca:	68fb      	ldr	r3, [r7, #12]
  4020cc:	68ba      	ldr	r2, [r7, #8]
  4020ce:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4020d2:	687b      	ldr	r3, [r7, #4]
  4020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4020d8:	2b00      	cmp	r3, #0
  4020da:	d004      	beq.n	4020e6 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4020dc:	68fb      	ldr	r3, [r7, #12]
  4020de:	68ba      	ldr	r2, [r7, #8]
  4020e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4020e4:	e008      	b.n	4020f8 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4020e6:	68fb      	ldr	r3, [r7, #12]
  4020e8:	68ba      	ldr	r2, [r7, #8]
  4020ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4020ee:	e003      	b.n	4020f8 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4020f0:	68fb      	ldr	r3, [r7, #12]
  4020f2:	68ba      	ldr	r2, [r7, #8]
  4020f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4020f8:	bf00      	nop
  4020fa:	3714      	adds	r7, #20
  4020fc:	46bd      	mov	sp, r7
  4020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402102:	4770      	bx	lr

00402104 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402104:	b480      	push	{r7}
  402106:	b083      	sub	sp, #12
  402108:	af00      	add	r7, sp, #0
  40210a:	6078      	str	r0, [r7, #4]
  40210c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40210e:	687b      	ldr	r3, [r7, #4]
  402110:	683a      	ldr	r2, [r7, #0]
  402112:	641a      	str	r2, [r3, #64]	; 0x40
}
  402114:	bf00      	nop
  402116:	370c      	adds	r7, #12
  402118:	46bd      	mov	sp, r7
  40211a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40211e:	4770      	bx	lr

00402120 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402120:	b480      	push	{r7}
  402122:	b083      	sub	sp, #12
  402124:	af00      	add	r7, sp, #0
  402126:	6078      	str	r0, [r7, #4]
  402128:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40212a:	687b      	ldr	r3, [r7, #4]
  40212c:	683a      	ldr	r2, [r7, #0]
  40212e:	645a      	str	r2, [r3, #68]	; 0x44
}
  402130:	bf00      	nop
  402132:	370c      	adds	r7, #12
  402134:	46bd      	mov	sp, r7
  402136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40213a:	4770      	bx	lr

0040213c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40213c:	b480      	push	{r7}
  40213e:	b083      	sub	sp, #12
  402140:	af00      	add	r7, sp, #0
  402142:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  402144:	687b      	ldr	r3, [r7, #4]
  402146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  402148:	4618      	mov	r0, r3
  40214a:	370c      	adds	r7, #12
  40214c:	46bd      	mov	sp, r7
  40214e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402152:	4770      	bx	lr

00402154 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  402154:	b480      	push	{r7}
  402156:	b083      	sub	sp, #12
  402158:	af00      	add	r7, sp, #0
  40215a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40215c:	687b      	ldr	r3, [r7, #4]
  40215e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  402160:	4618      	mov	r0, r3
  402162:	370c      	adds	r7, #12
  402164:	46bd      	mov	sp, r7
  402166:	f85d 7b04 	ldr.w	r7, [sp], #4
  40216a:	4770      	bx	lr

0040216c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40216c:	b580      	push	{r7, lr}
  40216e:	b084      	sub	sp, #16
  402170:	af00      	add	r7, sp, #0
  402172:	6078      	str	r0, [r7, #4]
  402174:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402176:	6878      	ldr	r0, [r7, #4]
  402178:	4b26      	ldr	r3, [pc, #152]	; (402214 <pio_handler_process+0xa8>)
  40217a:	4798      	blx	r3
  40217c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40217e:	6878      	ldr	r0, [r7, #4]
  402180:	4b25      	ldr	r3, [pc, #148]	; (402218 <pio_handler_process+0xac>)
  402182:	4798      	blx	r3
  402184:	4602      	mov	r2, r0
  402186:	68fb      	ldr	r3, [r7, #12]
  402188:	4013      	ands	r3, r2
  40218a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40218c:	68fb      	ldr	r3, [r7, #12]
  40218e:	2b00      	cmp	r3, #0
  402190:	d03c      	beq.n	40220c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402192:	2300      	movs	r3, #0
  402194:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402196:	e034      	b.n	402202 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402198:	4a20      	ldr	r2, [pc, #128]	; (40221c <pio_handler_process+0xb0>)
  40219a:	68bb      	ldr	r3, [r7, #8]
  40219c:	011b      	lsls	r3, r3, #4
  40219e:	4413      	add	r3, r2
  4021a0:	681a      	ldr	r2, [r3, #0]
  4021a2:	683b      	ldr	r3, [r7, #0]
  4021a4:	429a      	cmp	r2, r3
  4021a6:	d126      	bne.n	4021f6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4021a8:	4a1c      	ldr	r2, [pc, #112]	; (40221c <pio_handler_process+0xb0>)
  4021aa:	68bb      	ldr	r3, [r7, #8]
  4021ac:	011b      	lsls	r3, r3, #4
  4021ae:	4413      	add	r3, r2
  4021b0:	3304      	adds	r3, #4
  4021b2:	681a      	ldr	r2, [r3, #0]
  4021b4:	68fb      	ldr	r3, [r7, #12]
  4021b6:	4013      	ands	r3, r2
  4021b8:	2b00      	cmp	r3, #0
  4021ba:	d01c      	beq.n	4021f6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4021bc:	4a17      	ldr	r2, [pc, #92]	; (40221c <pio_handler_process+0xb0>)
  4021be:	68bb      	ldr	r3, [r7, #8]
  4021c0:	011b      	lsls	r3, r3, #4
  4021c2:	4413      	add	r3, r2
  4021c4:	330c      	adds	r3, #12
  4021c6:	681b      	ldr	r3, [r3, #0]
  4021c8:	4914      	ldr	r1, [pc, #80]	; (40221c <pio_handler_process+0xb0>)
  4021ca:	68ba      	ldr	r2, [r7, #8]
  4021cc:	0112      	lsls	r2, r2, #4
  4021ce:	440a      	add	r2, r1
  4021d0:	6810      	ldr	r0, [r2, #0]
  4021d2:	4912      	ldr	r1, [pc, #72]	; (40221c <pio_handler_process+0xb0>)
  4021d4:	68ba      	ldr	r2, [r7, #8]
  4021d6:	0112      	lsls	r2, r2, #4
  4021d8:	440a      	add	r2, r1
  4021da:	3204      	adds	r2, #4
  4021dc:	6812      	ldr	r2, [r2, #0]
  4021de:	4611      	mov	r1, r2
  4021e0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4021e2:	4a0e      	ldr	r2, [pc, #56]	; (40221c <pio_handler_process+0xb0>)
  4021e4:	68bb      	ldr	r3, [r7, #8]
  4021e6:	011b      	lsls	r3, r3, #4
  4021e8:	4413      	add	r3, r2
  4021ea:	3304      	adds	r3, #4
  4021ec:	681b      	ldr	r3, [r3, #0]
  4021ee:	43db      	mvns	r3, r3
  4021f0:	68fa      	ldr	r2, [r7, #12]
  4021f2:	4013      	ands	r3, r2
  4021f4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4021f6:	68bb      	ldr	r3, [r7, #8]
  4021f8:	3301      	adds	r3, #1
  4021fa:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4021fc:	68bb      	ldr	r3, [r7, #8]
  4021fe:	2b06      	cmp	r3, #6
  402200:	d803      	bhi.n	40220a <pio_handler_process+0x9e>
		while (status != 0) {
  402202:	68fb      	ldr	r3, [r7, #12]
  402204:	2b00      	cmp	r3, #0
  402206:	d1c7      	bne.n	402198 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402208:	e000      	b.n	40220c <pio_handler_process+0xa0>
				break;
  40220a:	bf00      	nop
}
  40220c:	bf00      	nop
  40220e:	3710      	adds	r7, #16
  402210:	46bd      	mov	sp, r7
  402212:	bd80      	pop	{r7, pc}
  402214:	0040213d 	.word	0x0040213d
  402218:	00402155 	.word	0x00402155
  40221c:	20400bf0 	.word	0x20400bf0

00402220 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402220:	b580      	push	{r7, lr}
  402222:	b086      	sub	sp, #24
  402224:	af00      	add	r7, sp, #0
  402226:	60f8      	str	r0, [r7, #12]
  402228:	60b9      	str	r1, [r7, #8]
  40222a:	607a      	str	r2, [r7, #4]
  40222c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40222e:	4b21      	ldr	r3, [pc, #132]	; (4022b4 <pio_handler_set+0x94>)
  402230:	681b      	ldr	r3, [r3, #0]
  402232:	2b06      	cmp	r3, #6
  402234:	d901      	bls.n	40223a <pio_handler_set+0x1a>
		return 1;
  402236:	2301      	movs	r3, #1
  402238:	e038      	b.n	4022ac <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40223a:	2300      	movs	r3, #0
  40223c:	75fb      	strb	r3, [r7, #23]
  40223e:	e011      	b.n	402264 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  402240:	7dfb      	ldrb	r3, [r7, #23]
  402242:	011b      	lsls	r3, r3, #4
  402244:	4a1c      	ldr	r2, [pc, #112]	; (4022b8 <pio_handler_set+0x98>)
  402246:	4413      	add	r3, r2
  402248:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40224a:	693b      	ldr	r3, [r7, #16]
  40224c:	681a      	ldr	r2, [r3, #0]
  40224e:	68bb      	ldr	r3, [r7, #8]
  402250:	429a      	cmp	r2, r3
  402252:	d104      	bne.n	40225e <pio_handler_set+0x3e>
  402254:	693b      	ldr	r3, [r7, #16]
  402256:	685a      	ldr	r2, [r3, #4]
  402258:	687b      	ldr	r3, [r7, #4]
  40225a:	429a      	cmp	r2, r3
  40225c:	d008      	beq.n	402270 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40225e:	7dfb      	ldrb	r3, [r7, #23]
  402260:	3301      	adds	r3, #1
  402262:	75fb      	strb	r3, [r7, #23]
  402264:	7dfa      	ldrb	r2, [r7, #23]
  402266:	4b13      	ldr	r3, [pc, #76]	; (4022b4 <pio_handler_set+0x94>)
  402268:	681b      	ldr	r3, [r3, #0]
  40226a:	429a      	cmp	r2, r3
  40226c:	d9e8      	bls.n	402240 <pio_handler_set+0x20>
  40226e:	e000      	b.n	402272 <pio_handler_set+0x52>
			break;
  402270:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402272:	693b      	ldr	r3, [r7, #16]
  402274:	68ba      	ldr	r2, [r7, #8]
  402276:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  402278:	693b      	ldr	r3, [r7, #16]
  40227a:	687a      	ldr	r2, [r7, #4]
  40227c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40227e:	693b      	ldr	r3, [r7, #16]
  402280:	683a      	ldr	r2, [r7, #0]
  402282:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  402284:	693b      	ldr	r3, [r7, #16]
  402286:	6a3a      	ldr	r2, [r7, #32]
  402288:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40228a:	7dfa      	ldrb	r2, [r7, #23]
  40228c:	4b09      	ldr	r3, [pc, #36]	; (4022b4 <pio_handler_set+0x94>)
  40228e:	681b      	ldr	r3, [r3, #0]
  402290:	3301      	adds	r3, #1
  402292:	429a      	cmp	r2, r3
  402294:	d104      	bne.n	4022a0 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  402296:	4b07      	ldr	r3, [pc, #28]	; (4022b4 <pio_handler_set+0x94>)
  402298:	681b      	ldr	r3, [r3, #0]
  40229a:	3301      	adds	r3, #1
  40229c:	4a05      	ldr	r2, [pc, #20]	; (4022b4 <pio_handler_set+0x94>)
  40229e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4022a0:	683a      	ldr	r2, [r7, #0]
  4022a2:	6879      	ldr	r1, [r7, #4]
  4022a4:	68f8      	ldr	r0, [r7, #12]
  4022a6:	4b05      	ldr	r3, [pc, #20]	; (4022bc <pio_handler_set+0x9c>)
  4022a8:	4798      	blx	r3

	return 0;
  4022aa:	2300      	movs	r3, #0
}
  4022ac:	4618      	mov	r0, r3
  4022ae:	3718      	adds	r7, #24
  4022b0:	46bd      	mov	sp, r7
  4022b2:	bd80      	pop	{r7, pc}
  4022b4:	20400c60 	.word	0x20400c60
  4022b8:	20400bf0 	.word	0x20400bf0
  4022bc:	00402099 	.word	0x00402099

004022c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4022c0:	b580      	push	{r7, lr}
  4022c2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4022c4:	210a      	movs	r1, #10
  4022c6:	4802      	ldr	r0, [pc, #8]	; (4022d0 <PIOA_Handler+0x10>)
  4022c8:	4b02      	ldr	r3, [pc, #8]	; (4022d4 <PIOA_Handler+0x14>)
  4022ca:	4798      	blx	r3
}
  4022cc:	bf00      	nop
  4022ce:	bd80      	pop	{r7, pc}
  4022d0:	400e0e00 	.word	0x400e0e00
  4022d4:	0040216d 	.word	0x0040216d

004022d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4022d8:	b580      	push	{r7, lr}
  4022da:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4022dc:	210b      	movs	r1, #11
  4022de:	4802      	ldr	r0, [pc, #8]	; (4022e8 <PIOB_Handler+0x10>)
  4022e0:	4b02      	ldr	r3, [pc, #8]	; (4022ec <PIOB_Handler+0x14>)
  4022e2:	4798      	blx	r3
}
  4022e4:	bf00      	nop
  4022e6:	bd80      	pop	{r7, pc}
  4022e8:	400e1000 	.word	0x400e1000
  4022ec:	0040216d 	.word	0x0040216d

004022f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4022f0:	b580      	push	{r7, lr}
  4022f2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4022f4:	210c      	movs	r1, #12
  4022f6:	4802      	ldr	r0, [pc, #8]	; (402300 <PIOC_Handler+0x10>)
  4022f8:	4b02      	ldr	r3, [pc, #8]	; (402304 <PIOC_Handler+0x14>)
  4022fa:	4798      	blx	r3
}
  4022fc:	bf00      	nop
  4022fe:	bd80      	pop	{r7, pc}
  402300:	400e1200 	.word	0x400e1200
  402304:	0040216d 	.word	0x0040216d

00402308 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402308:	b580      	push	{r7, lr}
  40230a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40230c:	2110      	movs	r1, #16
  40230e:	4802      	ldr	r0, [pc, #8]	; (402318 <PIOD_Handler+0x10>)
  402310:	4b02      	ldr	r3, [pc, #8]	; (40231c <PIOD_Handler+0x14>)
  402312:	4798      	blx	r3
}
  402314:	bf00      	nop
  402316:	bd80      	pop	{r7, pc}
  402318:	400e1400 	.word	0x400e1400
  40231c:	0040216d 	.word	0x0040216d

00402320 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402320:	b580      	push	{r7, lr}
  402322:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  402324:	2111      	movs	r1, #17
  402326:	4802      	ldr	r0, [pc, #8]	; (402330 <PIOE_Handler+0x10>)
  402328:	4b02      	ldr	r3, [pc, #8]	; (402334 <PIOE_Handler+0x14>)
  40232a:	4798      	blx	r3
}
  40232c:	bf00      	nop
  40232e:	bd80      	pop	{r7, pc}
  402330:	400e1600 	.word	0x400e1600
  402334:	0040216d 	.word	0x0040216d

00402338 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402338:	b480      	push	{r7}
  40233a:	b083      	sub	sp, #12
  40233c:	af00      	add	r7, sp, #0
  40233e:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  402340:	687b      	ldr	r3, [r7, #4]
  402342:	3b01      	subs	r3, #1
  402344:	2b03      	cmp	r3, #3
  402346:	d81a      	bhi.n	40237e <pmc_mck_set_division+0x46>
  402348:	a201      	add	r2, pc, #4	; (adr r2, 402350 <pmc_mck_set_division+0x18>)
  40234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40234e:	bf00      	nop
  402350:	00402361 	.word	0x00402361
  402354:	00402367 	.word	0x00402367
  402358:	0040236f 	.word	0x0040236f
  40235c:	00402377 	.word	0x00402377
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402360:	2300      	movs	r3, #0
  402362:	607b      	str	r3, [r7, #4]
			break;
  402364:	e00e      	b.n	402384 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  402366:	f44f 7380 	mov.w	r3, #256	; 0x100
  40236a:	607b      	str	r3, [r7, #4]
			break;
  40236c:	e00a      	b.n	402384 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40236e:	f44f 7340 	mov.w	r3, #768	; 0x300
  402372:	607b      	str	r3, [r7, #4]
			break;
  402374:	e006      	b.n	402384 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402376:	f44f 7300 	mov.w	r3, #512	; 0x200
  40237a:	607b      	str	r3, [r7, #4]
			break;
  40237c:	e002      	b.n	402384 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40237e:	2300      	movs	r3, #0
  402380:	607b      	str	r3, [r7, #4]
			break;
  402382:	bf00      	nop
	}
	PMC->PMC_MCKR =
  402384:	490a      	ldr	r1, [pc, #40]	; (4023b0 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402386:	4b0a      	ldr	r3, [pc, #40]	; (4023b0 <pmc_mck_set_division+0x78>)
  402388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40238a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40238e:	687b      	ldr	r3, [r7, #4]
  402390:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  402392:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402394:	bf00      	nop
  402396:	4b06      	ldr	r3, [pc, #24]	; (4023b0 <pmc_mck_set_division+0x78>)
  402398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40239a:	f003 0308 	and.w	r3, r3, #8
  40239e:	2b00      	cmp	r3, #0
  4023a0:	d0f9      	beq.n	402396 <pmc_mck_set_division+0x5e>
}
  4023a2:	bf00      	nop
  4023a4:	370c      	adds	r7, #12
  4023a6:	46bd      	mov	sp, r7
  4023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023ac:	4770      	bx	lr
  4023ae:	bf00      	nop
  4023b0:	400e0600 	.word	0x400e0600

004023b4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4023b4:	b480      	push	{r7}
  4023b6:	b085      	sub	sp, #20
  4023b8:	af00      	add	r7, sp, #0
  4023ba:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4023bc:	491d      	ldr	r1, [pc, #116]	; (402434 <pmc_switch_mck_to_pllack+0x80>)
  4023be:	4b1d      	ldr	r3, [pc, #116]	; (402434 <pmc_switch_mck_to_pllack+0x80>)
  4023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4023c6:	687b      	ldr	r3, [r7, #4]
  4023c8:	4313      	orrs	r3, r2
  4023ca:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4023d0:	60fb      	str	r3, [r7, #12]
  4023d2:	e007      	b.n	4023e4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4023d4:	68fb      	ldr	r3, [r7, #12]
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	d101      	bne.n	4023de <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4023da:	2301      	movs	r3, #1
  4023dc:	e023      	b.n	402426 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4023de:	68fb      	ldr	r3, [r7, #12]
  4023e0:	3b01      	subs	r3, #1
  4023e2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023e4:	4b13      	ldr	r3, [pc, #76]	; (402434 <pmc_switch_mck_to_pllack+0x80>)
  4023e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023e8:	f003 0308 	and.w	r3, r3, #8
  4023ec:	2b00      	cmp	r3, #0
  4023ee:	d0f1      	beq.n	4023d4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4023f0:	4a10      	ldr	r2, [pc, #64]	; (402434 <pmc_switch_mck_to_pllack+0x80>)
  4023f2:	4b10      	ldr	r3, [pc, #64]	; (402434 <pmc_switch_mck_to_pllack+0x80>)
  4023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023f6:	f023 0303 	bic.w	r3, r3, #3
  4023fa:	f043 0302 	orr.w	r3, r3, #2
  4023fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402404:	60fb      	str	r3, [r7, #12]
  402406:	e007      	b.n	402418 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402408:	68fb      	ldr	r3, [r7, #12]
  40240a:	2b00      	cmp	r3, #0
  40240c:	d101      	bne.n	402412 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40240e:	2301      	movs	r3, #1
  402410:	e009      	b.n	402426 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402412:	68fb      	ldr	r3, [r7, #12]
  402414:	3b01      	subs	r3, #1
  402416:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402418:	4b06      	ldr	r3, [pc, #24]	; (402434 <pmc_switch_mck_to_pllack+0x80>)
  40241a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40241c:	f003 0308 	and.w	r3, r3, #8
  402420:	2b00      	cmp	r3, #0
  402422:	d0f1      	beq.n	402408 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402424:	2300      	movs	r3, #0
}
  402426:	4618      	mov	r0, r3
  402428:	3714      	adds	r7, #20
  40242a:	46bd      	mov	sp, r7
  40242c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402430:	4770      	bx	lr
  402432:	bf00      	nop
  402434:	400e0600 	.word	0x400e0600

00402438 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402438:	b480      	push	{r7}
  40243a:	b083      	sub	sp, #12
  40243c:	af00      	add	r7, sp, #0
  40243e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402440:	687b      	ldr	r3, [r7, #4]
  402442:	2b01      	cmp	r3, #1
  402444:	d105      	bne.n	402452 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402446:	4907      	ldr	r1, [pc, #28]	; (402464 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402448:	4b06      	ldr	r3, [pc, #24]	; (402464 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40244a:	689a      	ldr	r2, [r3, #8]
  40244c:	4b06      	ldr	r3, [pc, #24]	; (402468 <pmc_switch_sclk_to_32kxtal+0x30>)
  40244e:	4313      	orrs	r3, r2
  402450:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402452:	4b04      	ldr	r3, [pc, #16]	; (402464 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402454:	4a05      	ldr	r2, [pc, #20]	; (40246c <pmc_switch_sclk_to_32kxtal+0x34>)
  402456:	601a      	str	r2, [r3, #0]
}
  402458:	bf00      	nop
  40245a:	370c      	adds	r7, #12
  40245c:	46bd      	mov	sp, r7
  40245e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402462:	4770      	bx	lr
  402464:	400e1810 	.word	0x400e1810
  402468:	a5100000 	.word	0xa5100000
  40246c:	a5000008 	.word	0xa5000008

00402470 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402470:	b480      	push	{r7}
  402472:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402474:	4b09      	ldr	r3, [pc, #36]	; (40249c <pmc_osc_is_ready_32kxtal+0x2c>)
  402476:	695b      	ldr	r3, [r3, #20]
  402478:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40247c:	2b00      	cmp	r3, #0
  40247e:	d007      	beq.n	402490 <pmc_osc_is_ready_32kxtal+0x20>
  402480:	4b07      	ldr	r3, [pc, #28]	; (4024a0 <pmc_osc_is_ready_32kxtal+0x30>)
  402482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402484:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402488:	2b00      	cmp	r3, #0
  40248a:	d001      	beq.n	402490 <pmc_osc_is_ready_32kxtal+0x20>
  40248c:	2301      	movs	r3, #1
  40248e:	e000      	b.n	402492 <pmc_osc_is_ready_32kxtal+0x22>
  402490:	2300      	movs	r3, #0
}
  402492:	4618      	mov	r0, r3
  402494:	46bd      	mov	sp, r7
  402496:	f85d 7b04 	ldr.w	r7, [sp], #4
  40249a:	4770      	bx	lr
  40249c:	400e1810 	.word	0x400e1810
  4024a0:	400e0600 	.word	0x400e0600

004024a4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4024a4:	b480      	push	{r7}
  4024a6:	b083      	sub	sp, #12
  4024a8:	af00      	add	r7, sp, #0
  4024aa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4024ac:	4915      	ldr	r1, [pc, #84]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024ae:	4b15      	ldr	r3, [pc, #84]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024b0:	6a1a      	ldr	r2, [r3, #32]
  4024b2:	4b15      	ldr	r3, [pc, #84]	; (402508 <pmc_switch_mainck_to_fastrc+0x64>)
  4024b4:	4313      	orrs	r3, r2
  4024b6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4024b8:	bf00      	nop
  4024ba:	4b12      	ldr	r3, [pc, #72]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4024c2:	2b00      	cmp	r3, #0
  4024c4:	d0f9      	beq.n	4024ba <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4024c6:	490f      	ldr	r1, [pc, #60]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024c8:	4b0e      	ldr	r3, [pc, #56]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024ca:	6a1a      	ldr	r2, [r3, #32]
  4024cc:	4b0f      	ldr	r3, [pc, #60]	; (40250c <pmc_switch_mainck_to_fastrc+0x68>)
  4024ce:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4024d0:	687a      	ldr	r2, [r7, #4]
  4024d2:	4313      	orrs	r3, r2
  4024d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4024d8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4024da:	bf00      	nop
  4024dc:	4b09      	ldr	r3, [pc, #36]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4024e4:	2b00      	cmp	r3, #0
  4024e6:	d0f9      	beq.n	4024dc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4024e8:	4906      	ldr	r1, [pc, #24]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024ea:	4b06      	ldr	r3, [pc, #24]	; (402504 <pmc_switch_mainck_to_fastrc+0x60>)
  4024ec:	6a1a      	ldr	r2, [r3, #32]
  4024ee:	4b08      	ldr	r3, [pc, #32]	; (402510 <pmc_switch_mainck_to_fastrc+0x6c>)
  4024f0:	4013      	ands	r3, r2
  4024f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4024f6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4024f8:	bf00      	nop
  4024fa:	370c      	adds	r7, #12
  4024fc:	46bd      	mov	sp, r7
  4024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402502:	4770      	bx	lr
  402504:	400e0600 	.word	0x400e0600
  402508:	00370008 	.word	0x00370008
  40250c:	ffc8ff8f 	.word	0xffc8ff8f
  402510:	fec8ffff 	.word	0xfec8ffff

00402514 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402514:	b480      	push	{r7}
  402516:	b083      	sub	sp, #12
  402518:	af00      	add	r7, sp, #0
  40251a:	6078      	str	r0, [r7, #4]
  40251c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40251e:	687b      	ldr	r3, [r7, #4]
  402520:	2b00      	cmp	r3, #0
  402522:	d008      	beq.n	402536 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402524:	4913      	ldr	r1, [pc, #76]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  402526:	4b13      	ldr	r3, [pc, #76]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  402528:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40252a:	4a13      	ldr	r2, [pc, #76]	; (402578 <pmc_switch_mainck_to_xtal+0x64>)
  40252c:	401a      	ands	r2, r3
  40252e:	4b13      	ldr	r3, [pc, #76]	; (40257c <pmc_switch_mainck_to_xtal+0x68>)
  402530:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402532:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402534:	e018      	b.n	402568 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402536:	490f      	ldr	r1, [pc, #60]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  402538:	4b0e      	ldr	r3, [pc, #56]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  40253a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40253c:	4b10      	ldr	r3, [pc, #64]	; (402580 <pmc_switch_mainck_to_xtal+0x6c>)
  40253e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402540:	683a      	ldr	r2, [r7, #0]
  402542:	0212      	lsls	r2, r2, #8
  402544:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402546:	431a      	orrs	r2, r3
  402548:	4b0e      	ldr	r3, [pc, #56]	; (402584 <pmc_switch_mainck_to_xtal+0x70>)
  40254a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40254c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40254e:	bf00      	nop
  402550:	4b08      	ldr	r3, [pc, #32]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  402552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402554:	f003 0301 	and.w	r3, r3, #1
  402558:	2b00      	cmp	r3, #0
  40255a:	d0f9      	beq.n	402550 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40255c:	4905      	ldr	r1, [pc, #20]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  40255e:	4b05      	ldr	r3, [pc, #20]	; (402574 <pmc_switch_mainck_to_xtal+0x60>)
  402560:	6a1a      	ldr	r2, [r3, #32]
  402562:	4b09      	ldr	r3, [pc, #36]	; (402588 <pmc_switch_mainck_to_xtal+0x74>)
  402564:	4313      	orrs	r3, r2
  402566:	620b      	str	r3, [r1, #32]
}
  402568:	bf00      	nop
  40256a:	370c      	adds	r7, #12
  40256c:	46bd      	mov	sp, r7
  40256e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402572:	4770      	bx	lr
  402574:	400e0600 	.word	0x400e0600
  402578:	fec8fffc 	.word	0xfec8fffc
  40257c:	01370002 	.word	0x01370002
  402580:	ffc8fffc 	.word	0xffc8fffc
  402584:	00370001 	.word	0x00370001
  402588:	01370000 	.word	0x01370000

0040258c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40258c:	b480      	push	{r7}
  40258e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402590:	4b04      	ldr	r3, [pc, #16]	; (4025a4 <pmc_osc_is_ready_mainck+0x18>)
  402592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402598:	4618      	mov	r0, r3
  40259a:	46bd      	mov	sp, r7
  40259c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025a0:	4770      	bx	lr
  4025a2:	bf00      	nop
  4025a4:	400e0600 	.word	0x400e0600

004025a8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4025a8:	b480      	push	{r7}
  4025aa:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4025ac:	4b04      	ldr	r3, [pc, #16]	; (4025c0 <pmc_disable_pllack+0x18>)
  4025ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4025b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4025b4:	bf00      	nop
  4025b6:	46bd      	mov	sp, r7
  4025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025bc:	4770      	bx	lr
  4025be:	bf00      	nop
  4025c0:	400e0600 	.word	0x400e0600

004025c4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4025c4:	b480      	push	{r7}
  4025c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4025c8:	4b04      	ldr	r3, [pc, #16]	; (4025dc <pmc_is_locked_pllack+0x18>)
  4025ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4025cc:	f003 0302 	and.w	r3, r3, #2
}
  4025d0:	4618      	mov	r0, r3
  4025d2:	46bd      	mov	sp, r7
  4025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025d8:	4770      	bx	lr
  4025da:	bf00      	nop
  4025dc:	400e0600 	.word	0x400e0600

004025e0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4025e0:	b480      	push	{r7}
  4025e2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4025e4:	4b04      	ldr	r3, [pc, #16]	; (4025f8 <pmc_is_locked_upll+0x18>)
  4025e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4025ec:	4618      	mov	r0, r3
  4025ee:	46bd      	mov	sp, r7
  4025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f4:	4770      	bx	lr
  4025f6:	bf00      	nop
  4025f8:	400e0600 	.word	0x400e0600

004025fc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4025fc:	b480      	push	{r7}
  4025fe:	b083      	sub	sp, #12
  402600:	af00      	add	r7, sp, #0
  402602:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402604:	687b      	ldr	r3, [r7, #4]
  402606:	2b3f      	cmp	r3, #63	; 0x3f
  402608:	d901      	bls.n	40260e <pmc_enable_periph_clk+0x12>
		return 1;
  40260a:	2301      	movs	r3, #1
  40260c:	e02f      	b.n	40266e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40260e:	687b      	ldr	r3, [r7, #4]
  402610:	2b1f      	cmp	r3, #31
  402612:	d813      	bhi.n	40263c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402614:	4b19      	ldr	r3, [pc, #100]	; (40267c <pmc_enable_periph_clk+0x80>)
  402616:	699a      	ldr	r2, [r3, #24]
  402618:	2101      	movs	r1, #1
  40261a:	687b      	ldr	r3, [r7, #4]
  40261c:	fa01 f303 	lsl.w	r3, r1, r3
  402620:	401a      	ands	r2, r3
  402622:	2101      	movs	r1, #1
  402624:	687b      	ldr	r3, [r7, #4]
  402626:	fa01 f303 	lsl.w	r3, r1, r3
  40262a:	429a      	cmp	r2, r3
  40262c:	d01e      	beq.n	40266c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40262e:	4a13      	ldr	r2, [pc, #76]	; (40267c <pmc_enable_periph_clk+0x80>)
  402630:	2101      	movs	r1, #1
  402632:	687b      	ldr	r3, [r7, #4]
  402634:	fa01 f303 	lsl.w	r3, r1, r3
  402638:	6113      	str	r3, [r2, #16]
  40263a:	e017      	b.n	40266c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40263c:	687b      	ldr	r3, [r7, #4]
  40263e:	3b20      	subs	r3, #32
  402640:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402642:	4b0e      	ldr	r3, [pc, #56]	; (40267c <pmc_enable_periph_clk+0x80>)
  402644:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402648:	2101      	movs	r1, #1
  40264a:	687b      	ldr	r3, [r7, #4]
  40264c:	fa01 f303 	lsl.w	r3, r1, r3
  402650:	401a      	ands	r2, r3
  402652:	2101      	movs	r1, #1
  402654:	687b      	ldr	r3, [r7, #4]
  402656:	fa01 f303 	lsl.w	r3, r1, r3
  40265a:	429a      	cmp	r2, r3
  40265c:	d006      	beq.n	40266c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40265e:	4a07      	ldr	r2, [pc, #28]	; (40267c <pmc_enable_periph_clk+0x80>)
  402660:	2101      	movs	r1, #1
  402662:	687b      	ldr	r3, [r7, #4]
  402664:	fa01 f303 	lsl.w	r3, r1, r3
  402668:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40266c:	2300      	movs	r3, #0
}
  40266e:	4618      	mov	r0, r3
  402670:	370c      	adds	r7, #12
  402672:	46bd      	mov	sp, r7
  402674:	f85d 7b04 	ldr.w	r7, [sp], #4
  402678:	4770      	bx	lr
  40267a:	bf00      	nop
  40267c:	400e0600 	.word	0x400e0600

00402680 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402680:	b480      	push	{r7}
  402682:	b083      	sub	sp, #12
  402684:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402686:	f3ef 8310 	mrs	r3, PRIMASK
  40268a:	607b      	str	r3, [r7, #4]
  return(result);
  40268c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40268e:	2b00      	cmp	r3, #0
  402690:	bf0c      	ite	eq
  402692:	2301      	moveq	r3, #1
  402694:	2300      	movne	r3, #0
  402696:	b2db      	uxtb	r3, r3
  402698:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40269a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40269c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4026a0:	4b04      	ldr	r3, [pc, #16]	; (4026b4 <cpu_irq_save+0x34>)
  4026a2:	2200      	movs	r2, #0
  4026a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4026a6:	683b      	ldr	r3, [r7, #0]
}
  4026a8:	4618      	mov	r0, r3
  4026aa:	370c      	adds	r7, #12
  4026ac:	46bd      	mov	sp, r7
  4026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026b2:	4770      	bx	lr
  4026b4:	20400018 	.word	0x20400018

004026b8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4026b8:	b480      	push	{r7}
  4026ba:	b083      	sub	sp, #12
  4026bc:	af00      	add	r7, sp, #0
  4026be:	6078      	str	r0, [r7, #4]
	return (flags);
  4026c0:	687b      	ldr	r3, [r7, #4]
  4026c2:	2b00      	cmp	r3, #0
  4026c4:	bf14      	ite	ne
  4026c6:	2301      	movne	r3, #1
  4026c8:	2300      	moveq	r3, #0
  4026ca:	b2db      	uxtb	r3, r3
}
  4026cc:	4618      	mov	r0, r3
  4026ce:	370c      	adds	r7, #12
  4026d0:	46bd      	mov	sp, r7
  4026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026d6:	4770      	bx	lr

004026d8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4026d8:	b580      	push	{r7, lr}
  4026da:	b082      	sub	sp, #8
  4026dc:	af00      	add	r7, sp, #0
  4026de:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4026e0:	6878      	ldr	r0, [r7, #4]
  4026e2:	4b07      	ldr	r3, [pc, #28]	; (402700 <cpu_irq_restore+0x28>)
  4026e4:	4798      	blx	r3
  4026e6:	4603      	mov	r3, r0
  4026e8:	2b00      	cmp	r3, #0
  4026ea:	d005      	beq.n	4026f8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4026ec:	4b05      	ldr	r3, [pc, #20]	; (402704 <cpu_irq_restore+0x2c>)
  4026ee:	2201      	movs	r2, #1
  4026f0:	701a      	strb	r2, [r3, #0]
  4026f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4026f6:	b662      	cpsie	i
}
  4026f8:	bf00      	nop
  4026fa:	3708      	adds	r7, #8
  4026fc:	46bd      	mov	sp, r7
  4026fe:	bd80      	pop	{r7, pc}
  402700:	004026b9 	.word	0x004026b9
  402704:	20400018 	.word	0x20400018

00402708 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402708:	b580      	push	{r7, lr}
  40270a:	b084      	sub	sp, #16
  40270c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40270e:	4b1e      	ldr	r3, [pc, #120]	; (402788 <Reset_Handler+0x80>)
  402710:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  402712:	4b1e      	ldr	r3, [pc, #120]	; (40278c <Reset_Handler+0x84>)
  402714:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402716:	68fa      	ldr	r2, [r7, #12]
  402718:	68bb      	ldr	r3, [r7, #8]
  40271a:	429a      	cmp	r2, r3
  40271c:	d00c      	beq.n	402738 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40271e:	e007      	b.n	402730 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  402720:	68bb      	ldr	r3, [r7, #8]
  402722:	1d1a      	adds	r2, r3, #4
  402724:	60ba      	str	r2, [r7, #8]
  402726:	68fa      	ldr	r2, [r7, #12]
  402728:	1d11      	adds	r1, r2, #4
  40272a:	60f9      	str	r1, [r7, #12]
  40272c:	6812      	ldr	r2, [r2, #0]
  40272e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  402730:	68bb      	ldr	r3, [r7, #8]
  402732:	4a17      	ldr	r2, [pc, #92]	; (402790 <Reset_Handler+0x88>)
  402734:	4293      	cmp	r3, r2
  402736:	d3f3      	bcc.n	402720 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402738:	4b16      	ldr	r3, [pc, #88]	; (402794 <Reset_Handler+0x8c>)
  40273a:	60bb      	str	r3, [r7, #8]
  40273c:	e004      	b.n	402748 <Reset_Handler+0x40>
                *pDest++ = 0;
  40273e:	68bb      	ldr	r3, [r7, #8]
  402740:	1d1a      	adds	r2, r3, #4
  402742:	60ba      	str	r2, [r7, #8]
  402744:	2200      	movs	r2, #0
  402746:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402748:	68bb      	ldr	r3, [r7, #8]
  40274a:	4a13      	ldr	r2, [pc, #76]	; (402798 <Reset_Handler+0x90>)
  40274c:	4293      	cmp	r3, r2
  40274e:	d3f6      	bcc.n	40273e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  402750:	4b12      	ldr	r3, [pc, #72]	; (40279c <Reset_Handler+0x94>)
  402752:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402754:	4a12      	ldr	r2, [pc, #72]	; (4027a0 <Reset_Handler+0x98>)
  402756:	68fb      	ldr	r3, [r7, #12]
  402758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40275c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40275e:	4b11      	ldr	r3, [pc, #68]	; (4027a4 <Reset_Handler+0x9c>)
  402760:	4798      	blx	r3
  402762:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  402764:	4a10      	ldr	r2, [pc, #64]	; (4027a8 <Reset_Handler+0xa0>)
  402766:	4b10      	ldr	r3, [pc, #64]	; (4027a8 <Reset_Handler+0xa0>)
  402768:	681b      	ldr	r3, [r3, #0]
  40276a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40276e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402770:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402774:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402778:	6878      	ldr	r0, [r7, #4]
  40277a:	4b0c      	ldr	r3, [pc, #48]	; (4027ac <Reset_Handler+0xa4>)
  40277c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40277e:	4b0c      	ldr	r3, [pc, #48]	; (4027b0 <Reset_Handler+0xa8>)
  402780:	4798      	blx	r3

        /* Branch to main function */
        main();
  402782:	4b0c      	ldr	r3, [pc, #48]	; (4027b4 <Reset_Handler+0xac>)
  402784:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402786:	e7fe      	b.n	402786 <Reset_Handler+0x7e>
  402788:	0040876c 	.word	0x0040876c
  40278c:	20400000 	.word	0x20400000
  402790:	204009d0 	.word	0x204009d0
  402794:	204009d0 	.word	0x204009d0
  402798:	20400cc8 	.word	0x20400cc8
  40279c:	00400000 	.word	0x00400000
  4027a0:	e000ed00 	.word	0xe000ed00
  4027a4:	00402681 	.word	0x00402681
  4027a8:	e000ed88 	.word	0xe000ed88
  4027ac:	004026d9 	.word	0x004026d9
  4027b0:	0040346d 	.word	0x0040346d
  4027b4:	00402e95 	.word	0x00402e95

004027b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4027b8:	b480      	push	{r7}
  4027ba:	af00      	add	r7, sp, #0
        while (1) {
  4027bc:	e7fe      	b.n	4027bc <Dummy_Handler+0x4>
	...

004027c0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4027c0:	b480      	push	{r7}
  4027c2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4027c4:	4b52      	ldr	r3, [pc, #328]	; (402910 <SystemCoreClockUpdate+0x150>)
  4027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027c8:	f003 0303 	and.w	r3, r3, #3
  4027cc:	2b01      	cmp	r3, #1
  4027ce:	d014      	beq.n	4027fa <SystemCoreClockUpdate+0x3a>
  4027d0:	2b01      	cmp	r3, #1
  4027d2:	d302      	bcc.n	4027da <SystemCoreClockUpdate+0x1a>
  4027d4:	2b02      	cmp	r3, #2
  4027d6:	d038      	beq.n	40284a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4027d8:	e07a      	b.n	4028d0 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4027da:	4b4e      	ldr	r3, [pc, #312]	; (402914 <SystemCoreClockUpdate+0x154>)
  4027dc:	695b      	ldr	r3, [r3, #20]
  4027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4027e2:	2b00      	cmp	r3, #0
  4027e4:	d004      	beq.n	4027f0 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4027e6:	4b4c      	ldr	r3, [pc, #304]	; (402918 <SystemCoreClockUpdate+0x158>)
  4027e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4027ec:	601a      	str	r2, [r3, #0]
    break;
  4027ee:	e06f      	b.n	4028d0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4027f0:	4b49      	ldr	r3, [pc, #292]	; (402918 <SystemCoreClockUpdate+0x158>)
  4027f2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4027f6:	601a      	str	r2, [r3, #0]
    break;
  4027f8:	e06a      	b.n	4028d0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4027fa:	4b45      	ldr	r3, [pc, #276]	; (402910 <SystemCoreClockUpdate+0x150>)
  4027fc:	6a1b      	ldr	r3, [r3, #32]
  4027fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402802:	2b00      	cmp	r3, #0
  402804:	d003      	beq.n	40280e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402806:	4b44      	ldr	r3, [pc, #272]	; (402918 <SystemCoreClockUpdate+0x158>)
  402808:	4a44      	ldr	r2, [pc, #272]	; (40291c <SystemCoreClockUpdate+0x15c>)
  40280a:	601a      	str	r2, [r3, #0]
    break;
  40280c:	e060      	b.n	4028d0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40280e:	4b42      	ldr	r3, [pc, #264]	; (402918 <SystemCoreClockUpdate+0x158>)
  402810:	4a43      	ldr	r2, [pc, #268]	; (402920 <SystemCoreClockUpdate+0x160>)
  402812:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402814:	4b3e      	ldr	r3, [pc, #248]	; (402910 <SystemCoreClockUpdate+0x150>)
  402816:	6a1b      	ldr	r3, [r3, #32]
  402818:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40281c:	2b10      	cmp	r3, #16
  40281e:	d004      	beq.n	40282a <SystemCoreClockUpdate+0x6a>
  402820:	2b20      	cmp	r3, #32
  402822:	d008      	beq.n	402836 <SystemCoreClockUpdate+0x76>
  402824:	2b00      	cmp	r3, #0
  402826:	d00e      	beq.n	402846 <SystemCoreClockUpdate+0x86>
          break;
  402828:	e00e      	b.n	402848 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  40282a:	4b3b      	ldr	r3, [pc, #236]	; (402918 <SystemCoreClockUpdate+0x158>)
  40282c:	681b      	ldr	r3, [r3, #0]
  40282e:	005b      	lsls	r3, r3, #1
  402830:	4a39      	ldr	r2, [pc, #228]	; (402918 <SystemCoreClockUpdate+0x158>)
  402832:	6013      	str	r3, [r2, #0]
          break;
  402834:	e008      	b.n	402848 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402836:	4b38      	ldr	r3, [pc, #224]	; (402918 <SystemCoreClockUpdate+0x158>)
  402838:	681a      	ldr	r2, [r3, #0]
  40283a:	4613      	mov	r3, r2
  40283c:	005b      	lsls	r3, r3, #1
  40283e:	4413      	add	r3, r2
  402840:	4a35      	ldr	r2, [pc, #212]	; (402918 <SystemCoreClockUpdate+0x158>)
  402842:	6013      	str	r3, [r2, #0]
          break;
  402844:	e000      	b.n	402848 <SystemCoreClockUpdate+0x88>
          break;
  402846:	bf00      	nop
    break;
  402848:	e042      	b.n	4028d0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40284a:	4b31      	ldr	r3, [pc, #196]	; (402910 <SystemCoreClockUpdate+0x150>)
  40284c:	6a1b      	ldr	r3, [r3, #32]
  40284e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402852:	2b00      	cmp	r3, #0
  402854:	d003      	beq.n	40285e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402856:	4b30      	ldr	r3, [pc, #192]	; (402918 <SystemCoreClockUpdate+0x158>)
  402858:	4a30      	ldr	r2, [pc, #192]	; (40291c <SystemCoreClockUpdate+0x15c>)
  40285a:	601a      	str	r2, [r3, #0]
  40285c:	e01c      	b.n	402898 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40285e:	4b2e      	ldr	r3, [pc, #184]	; (402918 <SystemCoreClockUpdate+0x158>)
  402860:	4a2f      	ldr	r2, [pc, #188]	; (402920 <SystemCoreClockUpdate+0x160>)
  402862:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402864:	4b2a      	ldr	r3, [pc, #168]	; (402910 <SystemCoreClockUpdate+0x150>)
  402866:	6a1b      	ldr	r3, [r3, #32]
  402868:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40286c:	2b10      	cmp	r3, #16
  40286e:	d004      	beq.n	40287a <SystemCoreClockUpdate+0xba>
  402870:	2b20      	cmp	r3, #32
  402872:	d008      	beq.n	402886 <SystemCoreClockUpdate+0xc6>
  402874:	2b00      	cmp	r3, #0
  402876:	d00e      	beq.n	402896 <SystemCoreClockUpdate+0xd6>
          break;
  402878:	e00e      	b.n	402898 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  40287a:	4b27      	ldr	r3, [pc, #156]	; (402918 <SystemCoreClockUpdate+0x158>)
  40287c:	681b      	ldr	r3, [r3, #0]
  40287e:	005b      	lsls	r3, r3, #1
  402880:	4a25      	ldr	r2, [pc, #148]	; (402918 <SystemCoreClockUpdate+0x158>)
  402882:	6013      	str	r3, [r2, #0]
          break;
  402884:	e008      	b.n	402898 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402886:	4b24      	ldr	r3, [pc, #144]	; (402918 <SystemCoreClockUpdate+0x158>)
  402888:	681a      	ldr	r2, [r3, #0]
  40288a:	4613      	mov	r3, r2
  40288c:	005b      	lsls	r3, r3, #1
  40288e:	4413      	add	r3, r2
  402890:	4a21      	ldr	r2, [pc, #132]	; (402918 <SystemCoreClockUpdate+0x158>)
  402892:	6013      	str	r3, [r2, #0]
          break;
  402894:	e000      	b.n	402898 <SystemCoreClockUpdate+0xd8>
          break;
  402896:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402898:	4b1d      	ldr	r3, [pc, #116]	; (402910 <SystemCoreClockUpdate+0x150>)
  40289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40289c:	f003 0303 	and.w	r3, r3, #3
  4028a0:	2b02      	cmp	r3, #2
  4028a2:	d114      	bne.n	4028ce <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4028a4:	4b1a      	ldr	r3, [pc, #104]	; (402910 <SystemCoreClockUpdate+0x150>)
  4028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4028a8:	0c1b      	lsrs	r3, r3, #16
  4028aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4028ae:	3301      	adds	r3, #1
  4028b0:	4a19      	ldr	r2, [pc, #100]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028b2:	6812      	ldr	r2, [r2, #0]
  4028b4:	fb02 f303 	mul.w	r3, r2, r3
  4028b8:	4a17      	ldr	r2, [pc, #92]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028ba:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4028bc:	4b14      	ldr	r3, [pc, #80]	; (402910 <SystemCoreClockUpdate+0x150>)
  4028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4028c0:	b2db      	uxtb	r3, r3
  4028c2:	4a15      	ldr	r2, [pc, #84]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028c4:	6812      	ldr	r2, [r2, #0]
  4028c6:	fbb2 f3f3 	udiv	r3, r2, r3
  4028ca:	4a13      	ldr	r2, [pc, #76]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028cc:	6013      	str	r3, [r2, #0]
    break;
  4028ce:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4028d0:	4b0f      	ldr	r3, [pc, #60]	; (402910 <SystemCoreClockUpdate+0x150>)
  4028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028d8:	2b70      	cmp	r3, #112	; 0x70
  4028da:	d108      	bne.n	4028ee <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  4028dc:	4b0e      	ldr	r3, [pc, #56]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028de:	681b      	ldr	r3, [r3, #0]
  4028e0:	4a10      	ldr	r2, [pc, #64]	; (402924 <SystemCoreClockUpdate+0x164>)
  4028e2:	fba2 2303 	umull	r2, r3, r2, r3
  4028e6:	085b      	lsrs	r3, r3, #1
  4028e8:	4a0b      	ldr	r2, [pc, #44]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028ea:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4028ec:	e00a      	b.n	402904 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4028ee:	4b08      	ldr	r3, [pc, #32]	; (402910 <SystemCoreClockUpdate+0x150>)
  4028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028f2:	091b      	lsrs	r3, r3, #4
  4028f4:	f003 0307 	and.w	r3, r3, #7
  4028f8:	4a07      	ldr	r2, [pc, #28]	; (402918 <SystemCoreClockUpdate+0x158>)
  4028fa:	6812      	ldr	r2, [r2, #0]
  4028fc:	fa22 f303 	lsr.w	r3, r2, r3
  402900:	4a05      	ldr	r2, [pc, #20]	; (402918 <SystemCoreClockUpdate+0x158>)
  402902:	6013      	str	r3, [r2, #0]
}
  402904:	bf00      	nop
  402906:	46bd      	mov	sp, r7
  402908:	f85d 7b04 	ldr.w	r7, [sp], #4
  40290c:	4770      	bx	lr
  40290e:	bf00      	nop
  402910:	400e0600 	.word	0x400e0600
  402914:	400e1810 	.word	0x400e1810
  402918:	2040001c 	.word	0x2040001c
  40291c:	00b71b00 	.word	0x00b71b00
  402920:	003d0900 	.word	0x003d0900
  402924:	aaaaaaab 	.word	0xaaaaaaab

00402928 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402928:	b480      	push	{r7}
  40292a:	b083      	sub	sp, #12
  40292c:	af00      	add	r7, sp, #0
  40292e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402930:	687b      	ldr	r3, [r7, #4]
  402932:	4a1d      	ldr	r2, [pc, #116]	; (4029a8 <system_init_flash+0x80>)
  402934:	4293      	cmp	r3, r2
  402936:	d804      	bhi.n	402942 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402938:	4b1c      	ldr	r3, [pc, #112]	; (4029ac <system_init_flash+0x84>)
  40293a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40293e:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402940:	e02b      	b.n	40299a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402942:	687b      	ldr	r3, [r7, #4]
  402944:	4a1a      	ldr	r2, [pc, #104]	; (4029b0 <system_init_flash+0x88>)
  402946:	4293      	cmp	r3, r2
  402948:	d803      	bhi.n	402952 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40294a:	4b18      	ldr	r3, [pc, #96]	; (4029ac <system_init_flash+0x84>)
  40294c:	4a19      	ldr	r2, [pc, #100]	; (4029b4 <system_init_flash+0x8c>)
  40294e:	601a      	str	r2, [r3, #0]
}
  402950:	e023      	b.n	40299a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402952:	687b      	ldr	r3, [r7, #4]
  402954:	4a18      	ldr	r2, [pc, #96]	; (4029b8 <system_init_flash+0x90>)
  402956:	4293      	cmp	r3, r2
  402958:	d803      	bhi.n	402962 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40295a:	4b14      	ldr	r3, [pc, #80]	; (4029ac <system_init_flash+0x84>)
  40295c:	4a17      	ldr	r2, [pc, #92]	; (4029bc <system_init_flash+0x94>)
  40295e:	601a      	str	r2, [r3, #0]
}
  402960:	e01b      	b.n	40299a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402962:	687b      	ldr	r3, [r7, #4]
  402964:	4a16      	ldr	r2, [pc, #88]	; (4029c0 <system_init_flash+0x98>)
  402966:	4293      	cmp	r3, r2
  402968:	d803      	bhi.n	402972 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40296a:	4b10      	ldr	r3, [pc, #64]	; (4029ac <system_init_flash+0x84>)
  40296c:	4a15      	ldr	r2, [pc, #84]	; (4029c4 <system_init_flash+0x9c>)
  40296e:	601a      	str	r2, [r3, #0]
}
  402970:	e013      	b.n	40299a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402972:	687b      	ldr	r3, [r7, #4]
  402974:	4a14      	ldr	r2, [pc, #80]	; (4029c8 <system_init_flash+0xa0>)
  402976:	4293      	cmp	r3, r2
  402978:	d804      	bhi.n	402984 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40297a:	4b0c      	ldr	r3, [pc, #48]	; (4029ac <system_init_flash+0x84>)
  40297c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402980:	601a      	str	r2, [r3, #0]
}
  402982:	e00a      	b.n	40299a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402984:	687b      	ldr	r3, [r7, #4]
  402986:	4a11      	ldr	r2, [pc, #68]	; (4029cc <system_init_flash+0xa4>)
  402988:	4293      	cmp	r3, r2
  40298a:	d803      	bhi.n	402994 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40298c:	4b07      	ldr	r3, [pc, #28]	; (4029ac <system_init_flash+0x84>)
  40298e:	4a10      	ldr	r2, [pc, #64]	; (4029d0 <system_init_flash+0xa8>)
  402990:	601a      	str	r2, [r3, #0]
}
  402992:	e002      	b.n	40299a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402994:	4b05      	ldr	r3, [pc, #20]	; (4029ac <system_init_flash+0x84>)
  402996:	4a0f      	ldr	r2, [pc, #60]	; (4029d4 <system_init_flash+0xac>)
  402998:	601a      	str	r2, [r3, #0]
}
  40299a:	bf00      	nop
  40299c:	370c      	adds	r7, #12
  40299e:	46bd      	mov	sp, r7
  4029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029a4:	4770      	bx	lr
  4029a6:	bf00      	nop
  4029a8:	015ef3bf 	.word	0x015ef3bf
  4029ac:	400e0c00 	.word	0x400e0c00
  4029b0:	02bde77f 	.word	0x02bde77f
  4029b4:	04000100 	.word	0x04000100
  4029b8:	041cdb3f 	.word	0x041cdb3f
  4029bc:	04000200 	.word	0x04000200
  4029c0:	057bceff 	.word	0x057bceff
  4029c4:	04000300 	.word	0x04000300
  4029c8:	06dac2bf 	.word	0x06dac2bf
  4029cc:	0839b67f 	.word	0x0839b67f
  4029d0:	04000500 	.word	0x04000500
  4029d4:	04000600 	.word	0x04000600

004029d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4029d8:	b480      	push	{r7}
  4029da:	b085      	sub	sp, #20
  4029dc:	af00      	add	r7, sp, #0
  4029de:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4029e0:	4b10      	ldr	r3, [pc, #64]	; (402a24 <_sbrk+0x4c>)
  4029e2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4029e4:	4b10      	ldr	r3, [pc, #64]	; (402a28 <_sbrk+0x50>)
  4029e6:	681b      	ldr	r3, [r3, #0]
  4029e8:	2b00      	cmp	r3, #0
  4029ea:	d102      	bne.n	4029f2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4029ec:	4b0e      	ldr	r3, [pc, #56]	; (402a28 <_sbrk+0x50>)
  4029ee:	4a0f      	ldr	r2, [pc, #60]	; (402a2c <_sbrk+0x54>)
  4029f0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4029f2:	4b0d      	ldr	r3, [pc, #52]	; (402a28 <_sbrk+0x50>)
  4029f4:	681b      	ldr	r3, [r3, #0]
  4029f6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4029f8:	68ba      	ldr	r2, [r7, #8]
  4029fa:	687b      	ldr	r3, [r7, #4]
  4029fc:	441a      	add	r2, r3
  4029fe:	68fb      	ldr	r3, [r7, #12]
  402a00:	429a      	cmp	r2, r3
  402a02:	dd02      	ble.n	402a0a <_sbrk+0x32>
		return (caddr_t) -1;	
  402a04:	f04f 33ff 	mov.w	r3, #4294967295
  402a08:	e006      	b.n	402a18 <_sbrk+0x40>
	}

	heap += incr;
  402a0a:	4b07      	ldr	r3, [pc, #28]	; (402a28 <_sbrk+0x50>)
  402a0c:	681a      	ldr	r2, [r3, #0]
  402a0e:	687b      	ldr	r3, [r7, #4]
  402a10:	4413      	add	r3, r2
  402a12:	4a05      	ldr	r2, [pc, #20]	; (402a28 <_sbrk+0x50>)
  402a14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402a16:	68bb      	ldr	r3, [r7, #8]
}
  402a18:	4618      	mov	r0, r3
  402a1a:	3714      	adds	r7, #20
  402a1c:	46bd      	mov	sp, r7
  402a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a22:	4770      	bx	lr
  402a24:	2045fffc 	.word	0x2045fffc
  402a28:	20400c64 	.word	0x20400c64
  402a2c:	20402ec8 	.word	0x20402ec8

00402a30 <NVIC_EnableIRQ>:
{
  402a30:	b480      	push	{r7}
  402a32:	b083      	sub	sp, #12
  402a34:	af00      	add	r7, sp, #0
  402a36:	4603      	mov	r3, r0
  402a38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402a3a:	4909      	ldr	r1, [pc, #36]	; (402a60 <NVIC_EnableIRQ+0x30>)
  402a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a40:	095b      	lsrs	r3, r3, #5
  402a42:	79fa      	ldrb	r2, [r7, #7]
  402a44:	f002 021f 	and.w	r2, r2, #31
  402a48:	2001      	movs	r0, #1
  402a4a:	fa00 f202 	lsl.w	r2, r0, r2
  402a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402a52:	bf00      	nop
  402a54:	370c      	adds	r7, #12
  402a56:	46bd      	mov	sp, r7
  402a58:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a5c:	4770      	bx	lr
  402a5e:	bf00      	nop
  402a60:	e000e100 	.word	0xe000e100

00402a64 <NVIC_SetPriority>:
{
  402a64:	b480      	push	{r7}
  402a66:	b083      	sub	sp, #12
  402a68:	af00      	add	r7, sp, #0
  402a6a:	4603      	mov	r3, r0
  402a6c:	6039      	str	r1, [r7, #0]
  402a6e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a74:	2b00      	cmp	r3, #0
  402a76:	da0b      	bge.n	402a90 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402a78:	490d      	ldr	r1, [pc, #52]	; (402ab0 <NVIC_SetPriority+0x4c>)
  402a7a:	79fb      	ldrb	r3, [r7, #7]
  402a7c:	f003 030f 	and.w	r3, r3, #15
  402a80:	3b04      	subs	r3, #4
  402a82:	683a      	ldr	r2, [r7, #0]
  402a84:	b2d2      	uxtb	r2, r2
  402a86:	0152      	lsls	r2, r2, #5
  402a88:	b2d2      	uxtb	r2, r2
  402a8a:	440b      	add	r3, r1
  402a8c:	761a      	strb	r2, [r3, #24]
}
  402a8e:	e009      	b.n	402aa4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a90:	4908      	ldr	r1, [pc, #32]	; (402ab4 <NVIC_SetPriority+0x50>)
  402a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a96:	683a      	ldr	r2, [r7, #0]
  402a98:	b2d2      	uxtb	r2, r2
  402a9a:	0152      	lsls	r2, r2, #5
  402a9c:	b2d2      	uxtb	r2, r2
  402a9e:	440b      	add	r3, r1
  402aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402aa4:	bf00      	nop
  402aa6:	370c      	adds	r7, #12
  402aa8:	46bd      	mov	sp, r7
  402aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aae:	4770      	bx	lr
  402ab0:	e000ed00 	.word	0xe000ed00
  402ab4:	e000e100 	.word	0xe000e100

00402ab8 <osc_get_rate>:
{
  402ab8:	b480      	push	{r7}
  402aba:	b083      	sub	sp, #12
  402abc:	af00      	add	r7, sp, #0
  402abe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402ac0:	687b      	ldr	r3, [r7, #4]
  402ac2:	2b07      	cmp	r3, #7
  402ac4:	d825      	bhi.n	402b12 <osc_get_rate+0x5a>
  402ac6:	a201      	add	r2, pc, #4	; (adr r2, 402acc <osc_get_rate+0x14>)
  402ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402acc:	00402aed 	.word	0x00402aed
  402ad0:	00402af3 	.word	0x00402af3
  402ad4:	00402af9 	.word	0x00402af9
  402ad8:	00402aff 	.word	0x00402aff
  402adc:	00402b03 	.word	0x00402b03
  402ae0:	00402b07 	.word	0x00402b07
  402ae4:	00402b0b 	.word	0x00402b0b
  402ae8:	00402b0f 	.word	0x00402b0f
		return OSC_SLCK_32K_RC_HZ;
  402aec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402af0:	e010      	b.n	402b14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402af6:	e00d      	b.n	402b14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402afc:	e00a      	b.n	402b14 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402afe:	4b08      	ldr	r3, [pc, #32]	; (402b20 <osc_get_rate+0x68>)
  402b00:	e008      	b.n	402b14 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402b02:	4b08      	ldr	r3, [pc, #32]	; (402b24 <osc_get_rate+0x6c>)
  402b04:	e006      	b.n	402b14 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402b06:	4b08      	ldr	r3, [pc, #32]	; (402b28 <osc_get_rate+0x70>)
  402b08:	e004      	b.n	402b14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402b0a:	4b07      	ldr	r3, [pc, #28]	; (402b28 <osc_get_rate+0x70>)
  402b0c:	e002      	b.n	402b14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402b0e:	4b06      	ldr	r3, [pc, #24]	; (402b28 <osc_get_rate+0x70>)
  402b10:	e000      	b.n	402b14 <osc_get_rate+0x5c>
	return 0;
  402b12:	2300      	movs	r3, #0
}
  402b14:	4618      	mov	r0, r3
  402b16:	370c      	adds	r7, #12
  402b18:	46bd      	mov	sp, r7
  402b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b1e:	4770      	bx	lr
  402b20:	003d0900 	.word	0x003d0900
  402b24:	007a1200 	.word	0x007a1200
  402b28:	00b71b00 	.word	0x00b71b00

00402b2c <sysclk_get_main_hz>:
{
  402b2c:	b580      	push	{r7, lr}
  402b2e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402b30:	2006      	movs	r0, #6
  402b32:	4b05      	ldr	r3, [pc, #20]	; (402b48 <sysclk_get_main_hz+0x1c>)
  402b34:	4798      	blx	r3
  402b36:	4602      	mov	r2, r0
  402b38:	4613      	mov	r3, r2
  402b3a:	009b      	lsls	r3, r3, #2
  402b3c:	4413      	add	r3, r2
  402b3e:	009a      	lsls	r2, r3, #2
  402b40:	4413      	add	r3, r2
}
  402b42:	4618      	mov	r0, r3
  402b44:	bd80      	pop	{r7, pc}
  402b46:	bf00      	nop
  402b48:	00402ab9 	.word	0x00402ab9

00402b4c <sysclk_get_cpu_hz>:
{
  402b4c:	b580      	push	{r7, lr}
  402b4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402b50:	4b02      	ldr	r3, [pc, #8]	; (402b5c <sysclk_get_cpu_hz+0x10>)
  402b52:	4798      	blx	r3
  402b54:	4603      	mov	r3, r0
}
  402b56:	4618      	mov	r0, r3
  402b58:	bd80      	pop	{r7, pc}
  402b5a:	bf00      	nop
  402b5c:	00402b2d 	.word	0x00402b2d

00402b60 <pisca_led>:
#define BUT_PIO3_IDX		19
#define BUT_PIO3_IDX_MASK (1u << BUT_PIO3_IDX)


// --- FUNCOES ---
void pisca_led(int n, int t){
  402b60:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b62:	b085      	sub	sp, #20
  402b64:	af00      	add	r7, sp, #0
  402b66:	6078      	str	r0, [r7, #4]
  402b68:	6039      	str	r1, [r7, #0]
	for (int i=0;i<n;i++){
  402b6a:	2300      	movs	r3, #0
  402b6c:	60fb      	str	r3, [r7, #12]
  402b6e:	e08e      	b.n	402c8e <pisca_led+0x12e>
		pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  402b70:	f44f 7180 	mov.w	r1, #256	; 0x100
  402b74:	484a      	ldr	r0, [pc, #296]	; (402ca0 <pisca_led+0x140>)
  402b76:	4b4b      	ldr	r3, [pc, #300]	; (402ca4 <pisca_led+0x144>)
  402b78:	4798      	blx	r3
		delay_ms(t);
  402b7a:	683b      	ldr	r3, [r7, #0]
  402b7c:	2b00      	cmp	r3, #0
  402b7e:	d026      	beq.n	402bce <pisca_led+0x6e>
  402b80:	683b      	ldr	r3, [r7, #0]
  402b82:	461d      	mov	r5, r3
  402b84:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402b88:	4b47      	ldr	r3, [pc, #284]	; (402ca8 <pisca_led+0x148>)
  402b8a:	4798      	blx	r3
  402b8c:	4603      	mov	r3, r0
  402b8e:	f04f 0400 	mov.w	r4, #0
  402b92:	fb03 f106 	mul.w	r1, r3, r6
  402b96:	fb05 f204 	mul.w	r2, r5, r4
  402b9a:	440a      	add	r2, r1
  402b9c:	fba5 3403 	umull	r3, r4, r5, r3
  402ba0:	4422      	add	r2, r4
  402ba2:	4614      	mov	r4, r2
  402ba4:	f241 712b 	movw	r1, #5931	; 0x172b
  402ba8:	f04f 0200 	mov.w	r2, #0
  402bac:	185d      	adds	r5, r3, r1
  402bae:	eb44 0602 	adc.w	r6, r4, r2
  402bb2:	4628      	mov	r0, r5
  402bb4:	4631      	mov	r1, r6
  402bb6:	4c3d      	ldr	r4, [pc, #244]	; (402cac <pisca_led+0x14c>)
  402bb8:	f241 722c 	movw	r2, #5932	; 0x172c
  402bbc:	f04f 0300 	mov.w	r3, #0
  402bc0:	47a0      	blx	r4
  402bc2:	4603      	mov	r3, r0
  402bc4:	460c      	mov	r4, r1
  402bc6:	4618      	mov	r0, r3
  402bc8:	4b39      	ldr	r3, [pc, #228]	; (402cb0 <pisca_led+0x150>)
  402bca:	4798      	blx	r3
  402bcc:	e016      	b.n	402bfc <pisca_led+0x9c>
  402bce:	4b36      	ldr	r3, [pc, #216]	; (402ca8 <pisca_led+0x148>)
  402bd0:	4798      	blx	r3
  402bd2:	4603      	mov	r3, r0
  402bd4:	f04f 0400 	mov.w	r4, #0
  402bd8:	4936      	ldr	r1, [pc, #216]	; (402cb4 <pisca_led+0x154>)
  402bda:	f04f 0200 	mov.w	r2, #0
  402bde:	185d      	adds	r5, r3, r1
  402be0:	eb44 0602 	adc.w	r6, r4, r2
  402be4:	4628      	mov	r0, r5
  402be6:	4631      	mov	r1, r6
  402be8:	4c30      	ldr	r4, [pc, #192]	; (402cac <pisca_led+0x14c>)
  402bea:	4a33      	ldr	r2, [pc, #204]	; (402cb8 <pisca_led+0x158>)
  402bec:	f04f 0300 	mov.w	r3, #0
  402bf0:	47a0      	blx	r4
  402bf2:	4603      	mov	r3, r0
  402bf4:	460c      	mov	r4, r1
  402bf6:	4618      	mov	r0, r3
  402bf8:	4b2d      	ldr	r3, [pc, #180]	; (402cb0 <pisca_led+0x150>)
  402bfa:	4798      	blx	r3
		pio_set(LED_PIO, LED_PIO_IDX_MASK);
  402bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
  402c00:	4827      	ldr	r0, [pc, #156]	; (402ca0 <pisca_led+0x140>)
  402c02:	4b2e      	ldr	r3, [pc, #184]	; (402cbc <pisca_led+0x15c>)
  402c04:	4798      	blx	r3
		delay_ms(t);
  402c06:	683b      	ldr	r3, [r7, #0]
  402c08:	2b00      	cmp	r3, #0
  402c0a:	d026      	beq.n	402c5a <pisca_led+0xfa>
  402c0c:	683b      	ldr	r3, [r7, #0]
  402c0e:	461d      	mov	r5, r3
  402c10:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402c14:	4b24      	ldr	r3, [pc, #144]	; (402ca8 <pisca_led+0x148>)
  402c16:	4798      	blx	r3
  402c18:	4603      	mov	r3, r0
  402c1a:	f04f 0400 	mov.w	r4, #0
  402c1e:	fb03 f106 	mul.w	r1, r3, r6
  402c22:	fb05 f204 	mul.w	r2, r5, r4
  402c26:	440a      	add	r2, r1
  402c28:	fba5 3403 	umull	r3, r4, r5, r3
  402c2c:	4422      	add	r2, r4
  402c2e:	4614      	mov	r4, r2
  402c30:	f241 712b 	movw	r1, #5931	; 0x172b
  402c34:	f04f 0200 	mov.w	r2, #0
  402c38:	185d      	adds	r5, r3, r1
  402c3a:	eb44 0602 	adc.w	r6, r4, r2
  402c3e:	4628      	mov	r0, r5
  402c40:	4631      	mov	r1, r6
  402c42:	4c1a      	ldr	r4, [pc, #104]	; (402cac <pisca_led+0x14c>)
  402c44:	f241 722c 	movw	r2, #5932	; 0x172c
  402c48:	f04f 0300 	mov.w	r3, #0
  402c4c:	47a0      	blx	r4
  402c4e:	4603      	mov	r3, r0
  402c50:	460c      	mov	r4, r1
  402c52:	4618      	mov	r0, r3
  402c54:	4b16      	ldr	r3, [pc, #88]	; (402cb0 <pisca_led+0x150>)
  402c56:	4798      	blx	r3
  402c58:	e016      	b.n	402c88 <pisca_led+0x128>
  402c5a:	4b13      	ldr	r3, [pc, #76]	; (402ca8 <pisca_led+0x148>)
  402c5c:	4798      	blx	r3
  402c5e:	4603      	mov	r3, r0
  402c60:	f04f 0400 	mov.w	r4, #0
  402c64:	4913      	ldr	r1, [pc, #76]	; (402cb4 <pisca_led+0x154>)
  402c66:	f04f 0200 	mov.w	r2, #0
  402c6a:	185d      	adds	r5, r3, r1
  402c6c:	eb44 0602 	adc.w	r6, r4, r2
  402c70:	4628      	mov	r0, r5
  402c72:	4631      	mov	r1, r6
  402c74:	4c0d      	ldr	r4, [pc, #52]	; (402cac <pisca_led+0x14c>)
  402c76:	4a10      	ldr	r2, [pc, #64]	; (402cb8 <pisca_led+0x158>)
  402c78:	f04f 0300 	mov.w	r3, #0
  402c7c:	47a0      	blx	r4
  402c7e:	4603      	mov	r3, r0
  402c80:	460c      	mov	r4, r1
  402c82:	4618      	mov	r0, r3
  402c84:	4b0a      	ldr	r3, [pc, #40]	; (402cb0 <pisca_led+0x150>)
  402c86:	4798      	blx	r3
	for (int i=0;i<n;i++){
  402c88:	68fb      	ldr	r3, [r7, #12]
  402c8a:	3301      	adds	r3, #1
  402c8c:	60fb      	str	r3, [r7, #12]
  402c8e:	68fa      	ldr	r2, [r7, #12]
  402c90:	687b      	ldr	r3, [r7, #4]
  402c92:	429a      	cmp	r2, r3
  402c94:	f6ff af6c 	blt.w	402b70 <pisca_led+0x10>
	}
}
  402c98:	bf00      	nop
  402c9a:	3714      	adds	r7, #20
  402c9c:	46bd      	mov	sp, r7
  402c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ca0:	400e1200 	.word	0x400e1200
  402ca4:	00401d75 	.word	0x00401d75
  402ca8:	00402b4d 	.word	0x00402b4d
  402cac:	0040315d 	.word	0x0040315d
  402cb0:	20400001 	.word	0x20400001
  402cb4:	005a83df 	.word	0x005a83df
  402cb8:	005a83e0 	.word	0x005a83e0
  402cbc:	00401d59 	.word	0x00401d59

00402cc0 <but_callback>:
void pisca_led(int n, int t);


// --- FUNCOES ---

void but_callback(void){	
  402cc0:	b580      	push	{r7, lr}
  402cc2:	af00      	add	r7, sp, #0
	    if (pio_get(BUT_PIO1, PIO_INPUT, BUT_PIO1_IDX_MASK)) {
  402cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402cc8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402ccc:	4807      	ldr	r0, [pc, #28]	; (402cec <but_callback+0x2c>)
  402cce:	4b08      	ldr	r3, [pc, #32]	; (402cf0 <but_callback+0x30>)
  402cd0:	4798      	blx	r3
  402cd2:	4603      	mov	r3, r0
  402cd4:	2b00      	cmp	r3, #0
  402cd6:	d003      	beq.n	402ce0 <but_callback+0x20>
			but_flag = 0;
  402cd8:	4b06      	ldr	r3, [pc, #24]	; (402cf4 <but_callback+0x34>)
  402cda:	2200      	movs	r2, #0
  402cdc:	701a      	strb	r2, [r3, #0]
		  } 
		  else {
		    // PINO == 0 --> Borda de descida
			but_flag=1;
	    }
}
  402cde:	e002      	b.n	402ce6 <but_callback+0x26>
			but_flag=1;
  402ce0:	4b04      	ldr	r3, [pc, #16]	; (402cf4 <but_callback+0x34>)
  402ce2:	2201      	movs	r2, #1
  402ce4:	701a      	strb	r2, [r3, #0]
}
  402ce6:	bf00      	nop
  402ce8:	bd80      	pop	{r7, pc}
  402cea:	bf00      	nop
  402cec:	400e1400 	.word	0x400e1400
  402cf0:	00401d91 	.word	0x00401d91
  402cf4:	20400c68 	.word	0x20400c68

00402cf8 <but_callback_2>:

void but_callback_2(void) {
  402cf8:	b480      	push	{r7}
  402cfa:	af00      	add	r7, sp, #0
	if (but_flag_2) {
  402cfc:	4b08      	ldr	r3, [pc, #32]	; (402d20 <but_callback_2+0x28>)
  402cfe:	781b      	ldrb	r3, [r3, #0]
  402d00:	b2db      	uxtb	r3, r3
  402d02:	2b00      	cmp	r3, #0
  402d04:	d003      	beq.n	402d0e <but_callback_2+0x16>
		but_flag_2 = 0;
  402d06:	4b06      	ldr	r3, [pc, #24]	; (402d20 <but_callback_2+0x28>)
  402d08:	2200      	movs	r2, #0
  402d0a:	701a      	strb	r2, [r3, #0]
		} 
		else {
		but_flag_2 =1;
	}
}
  402d0c:	e002      	b.n	402d14 <but_callback_2+0x1c>
		but_flag_2 =1;
  402d0e:	4b04      	ldr	r3, [pc, #16]	; (402d20 <but_callback_2+0x28>)
  402d10:	2201      	movs	r2, #1
  402d12:	701a      	strb	r2, [r3, #0]
}
  402d14:	bf00      	nop
  402d16:	46bd      	mov	sp, r7
  402d18:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d1c:	4770      	bx	lr
  402d1e:	bf00      	nop
  402d20:	20400c69 	.word	0x20400c69

00402d24 <but_callback_3>:

void but_callback_3(void){
  402d24:	b580      	push	{r7, lr}
  402d26:	af00      	add	r7, sp, #0
	if (pio_get(BUT_PIO3, PIO_INPUT, BUT_PIO3_IDX_MASK)) {
  402d28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402d2c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d30:	4807      	ldr	r0, [pc, #28]	; (402d50 <but_callback_3+0x2c>)
  402d32:	4b08      	ldr	r3, [pc, #32]	; (402d54 <but_callback_3+0x30>)
  402d34:	4798      	blx	r3
  402d36:	4603      	mov	r3, r0
  402d38:	2b00      	cmp	r3, #0
  402d3a:	d003      	beq.n	402d44 <but_callback_3+0x20>
		but_flag_3 = 0;
  402d3c:	4b06      	ldr	r3, [pc, #24]	; (402d58 <but_callback_3+0x34>)
  402d3e:	2200      	movs	r2, #0
  402d40:	701a      	strb	r2, [r3, #0]
	}
	else {
		// PINO == 0 --> Borda de descida
		but_flag_3 = 1;
	}
}
  402d42:	e002      	b.n	402d4a <but_callback_3+0x26>
		but_flag_3 = 1;
  402d44:	4b04      	ldr	r3, [pc, #16]	; (402d58 <but_callback_3+0x34>)
  402d46:	2201      	movs	r2, #1
  402d48:	701a      	strb	r2, [r3, #0]
}
  402d4a:	bf00      	nop
  402d4c:	bd80      	pop	{r7, pc}
  402d4e:	bf00      	nop
  402d50:	400e0e00 	.word	0x400e0e00
  402d54:	00401d91 	.word	0x00401d91
  402d58:	20400c6a 	.word	0x20400c6a

00402d5c <init>:


void init(){
  402d5c:	b590      	push	{r4, r7, lr}
  402d5e:	b083      	sub	sp, #12
  402d60:	af02      	add	r7, sp, #8
	// Initialize the board clock
	sysclk_init();
  402d62:	4b3c      	ldr	r3, [pc, #240]	; (402e54 <init+0xf8>)
  402d64:	4798      	blx	r3
	
	// Desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  402d66:	4b3c      	ldr	r3, [pc, #240]	; (402e58 <init+0xfc>)
  402d68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d6c:	605a      	str	r2, [r3, #4]
	
	// Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED.
	pmc_enable_periph_clk(LED_PIO_ID);
  402d6e:	200c      	movs	r0, #12
  402d70:	4b3a      	ldr	r3, [pc, #232]	; (402e5c <init+0x100>)
  402d72:	4798      	blx	r3
	
	//Inicializa PC8 como sa�da
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 1, 0, 0);
  402d74:	2300      	movs	r3, #0
  402d76:	9300      	str	r3, [sp, #0]
  402d78:	2300      	movs	r3, #0
  402d7a:	2201      	movs	r2, #1
  402d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  402d80:	4837      	ldr	r0, [pc, #220]	; (402e60 <init+0x104>)
  402d82:	4c38      	ldr	r4, [pc, #224]	; (402e64 <init+0x108>)
  402d84:	47a0      	blx	r4
	
	// Inicializa PIO do botao
	pmc_enable_periph_clk(BUT_PIO1_ID);
  402d86:	2010      	movs	r0, #16
  402d88:	4b34      	ldr	r3, [pc, #208]	; (402e5c <init+0x100>)
  402d8a:	4798      	blx	r3
	pmc_enable_periph_clk(BUT_PIO2_ID);
  402d8c:	200c      	movs	r0, #12
  402d8e:	4b33      	ldr	r3, [pc, #204]	; (402e5c <init+0x100>)
  402d90:	4798      	blx	r3
	pmc_enable_periph_clk(BUT_PIO3_ID);
  402d92:	200a      	movs	r0, #10
  402d94:	4b31      	ldr	r3, [pc, #196]	; (402e5c <init+0x100>)
  402d96:	4798      	blx	r3
	
	pio_set_input(BUT_PIO1, BUT_PIO1_IDX_MASK, PIO_PULLUP);
  402d98:	2201      	movs	r2, #1
  402d9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402d9e:	4832      	ldr	r0, [pc, #200]	; (402e68 <init+0x10c>)
  402da0:	4b32      	ldr	r3, [pc, #200]	; (402e6c <init+0x110>)
  402da2:	4798      	blx	r3
	pio_set_input(BUT_PIO2, BUT_PIO2_IDX_MASK, PIO_PULLUP);
  402da4:	2201      	movs	r2, #1
  402da6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402daa:	482d      	ldr	r0, [pc, #180]	; (402e60 <init+0x104>)
  402dac:	4b2f      	ldr	r3, [pc, #188]	; (402e6c <init+0x110>)
  402dae:	4798      	blx	r3
	pio_set_input(BUT_PIO3, BUT_PIO3_IDX_MASK, PIO_PULLUP);
  402db0:	2201      	movs	r2, #1
  402db2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402db6:	482e      	ldr	r0, [pc, #184]	; (402e70 <init+0x114>)
  402db8:	4b2c      	ldr	r3, [pc, #176]	; (402e6c <init+0x110>)
  402dba:	4798      	blx	r3
	
	// FUNCAO DE INTERRUPCAO
	pio_handler_set(BUT_PIO1,BUT_PIO1_ID,BUT_PIO1_IDX_MASK, PIO_IT_EDGE, but_callback);
  402dbc:	4b2d      	ldr	r3, [pc, #180]	; (402e74 <init+0x118>)
  402dbe:	9300      	str	r3, [sp, #0]
  402dc0:	2340      	movs	r3, #64	; 0x40
  402dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402dc6:	2110      	movs	r1, #16
  402dc8:	4827      	ldr	r0, [pc, #156]	; (402e68 <init+0x10c>)
  402dca:	4c2b      	ldr	r4, [pc, #172]	; (402e78 <init+0x11c>)
  402dcc:	47a0      	blx	r4
	pio_handler_set(BUT_PIO2,BUT_PIO2_ID,BUT_PIO2_IDX_MASK, PIO_IT_RISE_EDGE, but_callback_2);
  402dce:	4b2b      	ldr	r3, [pc, #172]	; (402e7c <init+0x120>)
  402dd0:	9300      	str	r3, [sp, #0]
  402dd2:	2370      	movs	r3, #112	; 0x70
  402dd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402dd8:	210c      	movs	r1, #12
  402dda:	4821      	ldr	r0, [pc, #132]	; (402e60 <init+0x104>)
  402ddc:	4c26      	ldr	r4, [pc, #152]	; (402e78 <init+0x11c>)
  402dde:	47a0      	blx	r4
	pio_handler_set(BUT_PIO3,BUT_PIO3_ID,BUT_PIO3_IDX_MASK, PIO_IT_EDGE, but_callback_3);
  402de0:	4b27      	ldr	r3, [pc, #156]	; (402e80 <init+0x124>)
  402de2:	9300      	str	r3, [sp, #0]
  402de4:	2340      	movs	r3, #64	; 0x40
  402de6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402dea:	210a      	movs	r1, #10
  402dec:	4820      	ldr	r0, [pc, #128]	; (402e70 <init+0x114>)
  402dee:	4c22      	ldr	r4, [pc, #136]	; (402e78 <init+0x11c>)
  402df0:	47a0      	blx	r4
	
	// Ativa interrup��o e limpa primeira IRQ gerada na ativacao
	pio_enable_interrupt(BUT_PIO1, BUT_PIO1_IDX_MASK);
  402df2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402df6:	481c      	ldr	r0, [pc, #112]	; (402e68 <init+0x10c>)
  402df8:	4b22      	ldr	r3, [pc, #136]	; (402e84 <init+0x128>)
  402dfa:	4798      	blx	r3
	pio_enable_interrupt(BUT_PIO2, BUT_PIO2_IDX_MASK);
  402dfc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402e00:	4817      	ldr	r0, [pc, #92]	; (402e60 <init+0x104>)
  402e02:	4b20      	ldr	r3, [pc, #128]	; (402e84 <init+0x128>)
  402e04:	4798      	blx	r3
	pio_enable_interrupt(BUT_PIO3, BUT_PIO3_IDX_MASK);
  402e06:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402e0a:	4819      	ldr	r0, [pc, #100]	; (402e70 <init+0x114>)
  402e0c:	4b1d      	ldr	r3, [pc, #116]	; (402e84 <init+0x128>)
  402e0e:	4798      	blx	r3
	
	
	pio_get_interrupt_status(BUT_PIO1);
  402e10:	4815      	ldr	r0, [pc, #84]	; (402e68 <init+0x10c>)
  402e12:	4b1d      	ldr	r3, [pc, #116]	; (402e88 <init+0x12c>)
  402e14:	4798      	blx	r3
	pio_get_interrupt_status(BUT_PIO2);
  402e16:	4812      	ldr	r0, [pc, #72]	; (402e60 <init+0x104>)
  402e18:	4b1b      	ldr	r3, [pc, #108]	; (402e88 <init+0x12c>)
  402e1a:	4798      	blx	r3
	pio_get_interrupt_status(BUT_PIO3);
  402e1c:	4814      	ldr	r0, [pc, #80]	; (402e70 <init+0x114>)
  402e1e:	4b1a      	ldr	r3, [pc, #104]	; (402e88 <init+0x12c>)
  402e20:	4798      	blx	r3
	
	// Configura NVIC para receber interrupcoes do PIO do botao
	// com prioridade 4 (quanto mais pr�ximo de 0 maior)
	NVIC_EnableIRQ(BUT_PIO1_ID);
  402e22:	2010      	movs	r0, #16
  402e24:	4b19      	ldr	r3, [pc, #100]	; (402e8c <init+0x130>)
  402e26:	4798      	blx	r3
	NVIC_EnableIRQ(BUT_PIO2_ID);
  402e28:	200c      	movs	r0, #12
  402e2a:	4b18      	ldr	r3, [pc, #96]	; (402e8c <init+0x130>)
  402e2c:	4798      	blx	r3
	NVIC_EnableIRQ(BUT_PIO3_ID);
  402e2e:	200a      	movs	r0, #10
  402e30:	4b16      	ldr	r3, [pc, #88]	; (402e8c <init+0x130>)
  402e32:	4798      	blx	r3
	
	NVIC_SetPriority(BUT_PIO1_ID, 4); // Prioridade 4
  402e34:	2104      	movs	r1, #4
  402e36:	2010      	movs	r0, #16
  402e38:	4b15      	ldr	r3, [pc, #84]	; (402e90 <init+0x134>)
  402e3a:	4798      	blx	r3
	NVIC_SetPriority(BUT_PIO2_ID, 4);
  402e3c:	2104      	movs	r1, #4
  402e3e:	200c      	movs	r0, #12
  402e40:	4b13      	ldr	r3, [pc, #76]	; (402e90 <init+0x134>)
  402e42:	4798      	blx	r3
	NVIC_SetPriority(BUT_PIO3_ID, 4);
  402e44:	2104      	movs	r1, #4
  402e46:	200a      	movs	r0, #10
  402e48:	4b11      	ldr	r3, [pc, #68]	; (402e90 <init+0x134>)
  402e4a:	4798      	blx	r3
}
  402e4c:	bf00      	nop
  402e4e:	3704      	adds	r7, #4
  402e50:	46bd      	mov	sp, r7
  402e52:	bd90      	pop	{r4, r7, pc}
  402e54:	004017e5 	.word	0x004017e5
  402e58:	400e1850 	.word	0x400e1850
  402e5c:	004025fd 	.word	0x004025fd
  402e60:	400e1200 	.word	0x400e1200
  402e64:	00401f69 	.word	0x00401f69
  402e68:	400e1400 	.word	0x400e1400
  402e6c:	00401ee9 	.word	0x00401ee9
  402e70:	400e0e00 	.word	0x400e0e00
  402e74:	00402cc1 	.word	0x00402cc1
  402e78:	00402221 	.word	0x00402221
  402e7c:	00402cf9 	.word	0x00402cf9
  402e80:	00402d25 	.word	0x00402d25
  402e84:	00402105 	.word	0x00402105
  402e88:	0040213d 	.word	0x0040213d
  402e8c:	00402a31 	.word	0x00402a31
  402e90:	00402a65 	.word	0x00402a65

00402e94 <main>:

int main (void){
  402e94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  402e98:	b0a4      	sub	sp, #144	; 0x90
  402e9a:	af02      	add	r7, sp, #8
	init();
  402e9c:	4b9c      	ldr	r3, [pc, #624]	; (403110 <main+0x27c>)
  402e9e:	4798      	blx	r3
	board_init();
  402ea0:	4b9c      	ldr	r3, [pc, #624]	; (403114 <main+0x280>)
  402ea2:	4798      	blx	r3
	sysclk_init();
  402ea4:	4b9c      	ldr	r3, [pc, #624]	; (403118 <main+0x284>)
  402ea6:	4798      	blx	r3
	delay_init();

	// Init OLED
	gfx_mono_ssd1306_init();
  402ea8:	4b9c      	ldr	r3, [pc, #624]	; (40311c <main+0x288>)
  402eaa:	4798      	blx	r3

	gfx_mono_draw_string("delay:", 35,16, &sysfont);
  402eac:	4b9c      	ldr	r3, [pc, #624]	; (403120 <main+0x28c>)
  402eae:	2210      	movs	r2, #16
  402eb0:	2123      	movs	r1, #35	; 0x23
  402eb2:	489c      	ldr	r0, [pc, #624]	; (403124 <main+0x290>)
  402eb4:	4c9c      	ldr	r4, [pc, #624]	; (403128 <main+0x294>)
  402eb6:	47a0      	blx	r4
	
	
	int delay = 500;
  402eb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  402ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char str[128];
	sprintf(str, "%d", delay);
  402ec0:	463b      	mov	r3, r7
  402ec2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  402ec6:	4999      	ldr	r1, [pc, #612]	; (40312c <main+0x298>)
  402ec8:	4618      	mov	r0, r3
  402eca:	4b99      	ldr	r3, [pc, #612]	; (403130 <main+0x29c>)
  402ecc:	4798      	blx	r3
	gfx_mono_draw_string(str , 100, 16, &sysfont);
  402ece:	4638      	mov	r0, r7
  402ed0:	4b93      	ldr	r3, [pc, #588]	; (403120 <main+0x28c>)
  402ed2:	2210      	movs	r2, #16
  402ed4:	2164      	movs	r1, #100	; 0x64
  402ed6:	4c94      	ldr	r4, [pc, #592]	; (403128 <main+0x294>)
  402ed8:	47a0      	blx	r4
	/* Insert application code here, after the board has been initialized. */
	
	gfx_mono_draw_rect(10,5,110, 10, GFX_PIXEL_SET);
  402eda:	2301      	movs	r3, #1
  402edc:	9300      	str	r3, [sp, #0]
  402ede:	230a      	movs	r3, #10
  402ee0:	226e      	movs	r2, #110	; 0x6e
  402ee2:	2105      	movs	r1, #5
  402ee4:	200a      	movs	r0, #10
  402ee6:	4c93      	ldr	r4, [pc, #588]	; (403134 <main+0x2a0>)
  402ee8:	47a0      	blx	r4
	gfx_mono_draw_filled_rect(10, 5, 11*(delay/100), 10, GFX_PIXEL_SET);
  402eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  402eee:	4a92      	ldr	r2, [pc, #584]	; (403138 <main+0x2a4>)
  402ef0:	fb82 1203 	smull	r1, r2, r2, r3
  402ef4:	1152      	asrs	r2, r2, #5
  402ef6:	17db      	asrs	r3, r3, #31
  402ef8:	1ad3      	subs	r3, r2, r3
  402efa:	b2db      	uxtb	r3, r3
  402efc:	461a      	mov	r2, r3
  402efe:	0092      	lsls	r2, r2, #2
  402f00:	441a      	add	r2, r3
  402f02:	0052      	lsls	r2, r2, #1
  402f04:	4413      	add	r3, r2
  402f06:	b2da      	uxtb	r2, r3
  402f08:	2301      	movs	r3, #1
  402f0a:	9300      	str	r3, [sp, #0]
  402f0c:	230a      	movs	r3, #10
  402f0e:	2105      	movs	r1, #5
  402f10:	200a      	movs	r0, #10
  402f12:	4c8a      	ldr	r4, [pc, #552]	; (40313c <main+0x2a8>)
  402f14:	47a0      	blx	r4
	
	while(1) {
		
		if (!but_flag_2){
  402f16:	4b8a      	ldr	r3, [pc, #552]	; (403140 <main+0x2ac>)
  402f18:	781b      	ldrb	r3, [r3, #0]
  402f1a:	b2db      	uxtb	r3, r3
  402f1c:	2b00      	cmp	r3, #0
  402f1e:	d104      	bne.n	402f2a <main+0x96>
			pisca_led(1, delay);
  402f20:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
  402f24:	2001      	movs	r0, #1
  402f26:	4b87      	ldr	r3, [pc, #540]	; (403144 <main+0x2b0>)
  402f28:	4798      	blx	r3
			}
		
		
		//pisca_led(delay,2 );
		if(but_flag){
  402f2a:	4b87      	ldr	r3, [pc, #540]	; (403148 <main+0x2b4>)
  402f2c:	781b      	ldrb	r3, [r3, #0]
  402f2e:	b2db      	uxtb	r3, r3
  402f30:	2b00      	cmp	r3, #0
  402f32:	f000 80a8 	beq.w	403086 <main+0x1f2>
			int i=0;
  402f36:	2300      	movs	r3, #0
  402f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(i<=200 && but_flag == 1){
  402f3c:	e01e      	b.n	402f7c <main+0xe8>
				delay_ms(1);
  402f3e:	4b83      	ldr	r3, [pc, #524]	; (40314c <main+0x2b8>)
  402f40:	4798      	blx	r3
  402f42:	4603      	mov	r3, r0
  402f44:	f04f 0400 	mov.w	r4, #0
  402f48:	f241 712b 	movw	r1, #5931	; 0x172b
  402f4c:	f04f 0200 	mov.w	r2, #0
  402f50:	eb13 0b01 	adds.w	fp, r3, r1
  402f54:	eb44 0c02 	adc.w	ip, r4, r2
  402f58:	4658      	mov	r0, fp
  402f5a:	4661      	mov	r1, ip
  402f5c:	4c7c      	ldr	r4, [pc, #496]	; (403150 <main+0x2bc>)
  402f5e:	f241 722c 	movw	r2, #5932	; 0x172c
  402f62:	f04f 0300 	mov.w	r3, #0
  402f66:	47a0      	blx	r4
  402f68:	4603      	mov	r3, r0
  402f6a:	460c      	mov	r4, r1
  402f6c:	4618      	mov	r0, r3
  402f6e:	4b79      	ldr	r3, [pc, #484]	; (403154 <main+0x2c0>)
  402f70:	4798      	blx	r3
				i++;
  402f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  402f76:	3301      	adds	r3, #1
  402f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(i<=200 && but_flag == 1){
  402f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  402f80:	2bc8      	cmp	r3, #200	; 0xc8
  402f82:	dc04      	bgt.n	402f8e <main+0xfa>
  402f84:	4b70      	ldr	r3, [pc, #448]	; (403148 <main+0x2b4>)
  402f86:	781b      	ldrb	r3, [r3, #0]
  402f88:	b2db      	uxtb	r3, r3
  402f8a:	2b01      	cmp	r3, #1
  402f8c:	d0d7      	beq.n	402f3e <main+0xaa>
			}
			
			if (i>200){
  402f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  402f92:	2bc8      	cmp	r3, #200	; 0xc8
  402f94:	dd38      	ble.n	403008 <main+0x174>
				delay += 100;
  402f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  402f9a:	3364      	adds	r3, #100	; 0x64
  402f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sprintf(str, "%d", delay);
  402fa0:	463b      	mov	r3, r7
  402fa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  402fa6:	4961      	ldr	r1, [pc, #388]	; (40312c <main+0x298>)
  402fa8:	4618      	mov	r0, r3
  402faa:	4b61      	ldr	r3, [pc, #388]	; (403130 <main+0x29c>)
  402fac:	4798      	blx	r3
				gfx_mono_draw_string(str , 100, 16, &sysfont);
  402fae:	4638      	mov	r0, r7
  402fb0:	4b5b      	ldr	r3, [pc, #364]	; (403120 <main+0x28c>)
  402fb2:	2210      	movs	r2, #16
  402fb4:	2164      	movs	r1, #100	; 0x64
  402fb6:	4c5c      	ldr	r4, [pc, #368]	; (403128 <main+0x294>)
  402fb8:	47a0      	blx	r4
				
				
				gfx_mono_draw_filled_rect(10, 5, 110, 10, GFX_PIXEL_CLR);
  402fba:	2300      	movs	r3, #0
  402fbc:	9300      	str	r3, [sp, #0]
  402fbe:	230a      	movs	r3, #10
  402fc0:	226e      	movs	r2, #110	; 0x6e
  402fc2:	2105      	movs	r1, #5
  402fc4:	200a      	movs	r0, #10
  402fc6:	4c5d      	ldr	r4, [pc, #372]	; (40313c <main+0x2a8>)
  402fc8:	47a0      	blx	r4
				gfx_mono_draw_rect(10,5,110, 10, GFX_PIXEL_SET);
  402fca:	2301      	movs	r3, #1
  402fcc:	9300      	str	r3, [sp, #0]
  402fce:	230a      	movs	r3, #10
  402fd0:	226e      	movs	r2, #110	; 0x6e
  402fd2:	2105      	movs	r1, #5
  402fd4:	200a      	movs	r0, #10
  402fd6:	4c57      	ldr	r4, [pc, #348]	; (403134 <main+0x2a0>)
  402fd8:	47a0      	blx	r4
				gfx_mono_draw_filled_rect(10, 5, 11*(delay/100), 10, GFX_PIXEL_SET);
  402fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  402fde:	4a56      	ldr	r2, [pc, #344]	; (403138 <main+0x2a4>)
  402fe0:	fb82 1203 	smull	r1, r2, r2, r3
  402fe4:	1152      	asrs	r2, r2, #5
  402fe6:	17db      	asrs	r3, r3, #31
  402fe8:	1ad3      	subs	r3, r2, r3
  402fea:	b2db      	uxtb	r3, r3
  402fec:	461a      	mov	r2, r3
  402fee:	0092      	lsls	r2, r2, #2
  402ff0:	441a      	add	r2, r3
  402ff2:	0052      	lsls	r2, r2, #1
  402ff4:	4413      	add	r3, r2
  402ff6:	b2da      	uxtb	r2, r3
  402ff8:	2301      	movs	r3, #1
  402ffa:	9300      	str	r3, [sp, #0]
  402ffc:	230a      	movs	r3, #10
  402ffe:	2105      	movs	r1, #5
  403000:	200a      	movs	r0, #10
  403002:	4c4e      	ldr	r4, [pc, #312]	; (40313c <main+0x2a8>)
  403004:	47a0      	blx	r4
  403006:	e03b      	b.n	403080 <main+0x1ec>

			}
			else if (i<200){
  403008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  40300c:	2bc7      	cmp	r3, #199	; 0xc7
  40300e:	dc37      	bgt.n	403080 <main+0x1ec>
				delay -= 100;
  403010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  403014:	3b64      	subs	r3, #100	; 0x64
  403016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sprintf(str, "%d", delay);
  40301a:	463b      	mov	r3, r7
  40301c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  403020:	4942      	ldr	r1, [pc, #264]	; (40312c <main+0x298>)
  403022:	4618      	mov	r0, r3
  403024:	4b42      	ldr	r3, [pc, #264]	; (403130 <main+0x29c>)
  403026:	4798      	blx	r3
				gfx_mono_draw_string(str , 100, 16, &sysfont);
  403028:	4638      	mov	r0, r7
  40302a:	4b3d      	ldr	r3, [pc, #244]	; (403120 <main+0x28c>)
  40302c:	2210      	movs	r2, #16
  40302e:	2164      	movs	r1, #100	; 0x64
  403030:	4c3d      	ldr	r4, [pc, #244]	; (403128 <main+0x294>)
  403032:	47a0      	blx	r4
				
				
				gfx_mono_draw_filled_rect(10, 5, 110, 10, GFX_PIXEL_CLR);
  403034:	2300      	movs	r3, #0
  403036:	9300      	str	r3, [sp, #0]
  403038:	230a      	movs	r3, #10
  40303a:	226e      	movs	r2, #110	; 0x6e
  40303c:	2105      	movs	r1, #5
  40303e:	200a      	movs	r0, #10
  403040:	4c3e      	ldr	r4, [pc, #248]	; (40313c <main+0x2a8>)
  403042:	47a0      	blx	r4
				gfx_mono_draw_rect(10,5,110, 10, GFX_PIXEL_SET);
  403044:	2301      	movs	r3, #1
  403046:	9300      	str	r3, [sp, #0]
  403048:	230a      	movs	r3, #10
  40304a:	226e      	movs	r2, #110	; 0x6e
  40304c:	2105      	movs	r1, #5
  40304e:	200a      	movs	r0, #10
  403050:	4c38      	ldr	r4, [pc, #224]	; (403134 <main+0x2a0>)
  403052:	47a0      	blx	r4
				gfx_mono_draw_filled_rect(10, 5, 11*(delay/100), 10, GFX_PIXEL_SET);
  403054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  403058:	4a37      	ldr	r2, [pc, #220]	; (403138 <main+0x2a4>)
  40305a:	fb82 1203 	smull	r1, r2, r2, r3
  40305e:	1152      	asrs	r2, r2, #5
  403060:	17db      	asrs	r3, r3, #31
  403062:	1ad3      	subs	r3, r2, r3
  403064:	b2db      	uxtb	r3, r3
  403066:	461a      	mov	r2, r3
  403068:	0092      	lsls	r2, r2, #2
  40306a:	441a      	add	r2, r3
  40306c:	0052      	lsls	r2, r2, #1
  40306e:	4413      	add	r3, r2
  403070:	b2da      	uxtb	r2, r3
  403072:	2301      	movs	r3, #1
  403074:	9300      	str	r3, [sp, #0]
  403076:	230a      	movs	r3, #10
  403078:	2105      	movs	r1, #5
  40307a:	200a      	movs	r0, #10
  40307c:	4c2f      	ldr	r4, [pc, #188]	; (40313c <main+0x2a8>)
  40307e:	47a0      	blx	r4
			}
			
		
			
			but_flag_2 = 0;
  403080:	4b2f      	ldr	r3, [pc, #188]	; (403140 <main+0x2ac>)
  403082:	2200      	movs	r2, #0
  403084:	701a      	strb	r2, [r3, #0]
		}
		if(but_flag_3){
  403086:	4b34      	ldr	r3, [pc, #208]	; (403158 <main+0x2c4>)
  403088:	781b      	ldrb	r3, [r3, #0]
  40308a:	b2db      	uxtb	r3, r3
  40308c:	2b00      	cmp	r3, #0
  40308e:	f43f af42 	beq.w	402f16 <main+0x82>
			delay -=100;
  403092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  403096:	3b64      	subs	r3, #100	; 0x64
  403098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			sprintf(str, "%d", delay);
  40309c:	463b      	mov	r3, r7
  40309e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  4030a2:	4922      	ldr	r1, [pc, #136]	; (40312c <main+0x298>)
  4030a4:	4618      	mov	r0, r3
  4030a6:	4b22      	ldr	r3, [pc, #136]	; (403130 <main+0x29c>)
  4030a8:	4798      	blx	r3
			gfx_mono_draw_string(str , 100, 16, &sysfont);
  4030aa:	4638      	mov	r0, r7
  4030ac:	4b1c      	ldr	r3, [pc, #112]	; (403120 <main+0x28c>)
  4030ae:	2210      	movs	r2, #16
  4030b0:	2164      	movs	r1, #100	; 0x64
  4030b2:	4c1d      	ldr	r4, [pc, #116]	; (403128 <main+0x294>)
  4030b4:	47a0      	blx	r4
			gfx_mono_draw_string(str , 100, 16, &sysfont);
  4030b6:	4638      	mov	r0, r7
  4030b8:	4b19      	ldr	r3, [pc, #100]	; (403120 <main+0x28c>)
  4030ba:	2210      	movs	r2, #16
  4030bc:	2164      	movs	r1, #100	; 0x64
  4030be:	4c1a      	ldr	r4, [pc, #104]	; (403128 <main+0x294>)
  4030c0:	47a0      	blx	r4
			gfx_mono_draw_filled_rect(10, 5, 110, 10, GFX_PIXEL_CLR);
  4030c2:	2300      	movs	r3, #0
  4030c4:	9300      	str	r3, [sp, #0]
  4030c6:	230a      	movs	r3, #10
  4030c8:	226e      	movs	r2, #110	; 0x6e
  4030ca:	2105      	movs	r1, #5
  4030cc:	200a      	movs	r0, #10
  4030ce:	4c1b      	ldr	r4, [pc, #108]	; (40313c <main+0x2a8>)
  4030d0:	47a0      	blx	r4
			gfx_mono_draw_rect(10,5,110, 10, GFX_PIXEL_SET);
  4030d2:	2301      	movs	r3, #1
  4030d4:	9300      	str	r3, [sp, #0]
  4030d6:	230a      	movs	r3, #10
  4030d8:	226e      	movs	r2, #110	; 0x6e
  4030da:	2105      	movs	r1, #5
  4030dc:	200a      	movs	r0, #10
  4030de:	4c15      	ldr	r4, [pc, #84]	; (403134 <main+0x2a0>)
  4030e0:	47a0      	blx	r4
			gfx_mono_draw_filled_rect(10, 5, 11*(delay/100), 10, GFX_PIXEL_SET);
  4030e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  4030e6:	4a14      	ldr	r2, [pc, #80]	; (403138 <main+0x2a4>)
  4030e8:	fb82 1203 	smull	r1, r2, r2, r3
  4030ec:	1152      	asrs	r2, r2, #5
  4030ee:	17db      	asrs	r3, r3, #31
  4030f0:	1ad3      	subs	r3, r2, r3
  4030f2:	b2db      	uxtb	r3, r3
  4030f4:	461a      	mov	r2, r3
  4030f6:	0092      	lsls	r2, r2, #2
  4030f8:	441a      	add	r2, r3
  4030fa:	0052      	lsls	r2, r2, #1
  4030fc:	4413      	add	r3, r2
  4030fe:	b2da      	uxtb	r2, r3
  403100:	2301      	movs	r3, #1
  403102:	9300      	str	r3, [sp, #0]
  403104:	230a      	movs	r3, #10
  403106:	2105      	movs	r1, #5
  403108:	200a      	movs	r0, #10
  40310a:	4c0c      	ldr	r4, [pc, #48]	; (40313c <main+0x2a8>)
  40310c:	47a0      	blx	r4
		if (!but_flag_2){
  40310e:	e702      	b.n	402f16 <main+0x82>
  403110:	00402d5d 	.word	0x00402d5d
  403114:	00401ca9 	.word	0x00401ca9
  403118:	004017e5 	.word	0x004017e5
  40311c:	00400aad 	.word	0x00400aad
  403120:	2040000c 	.word	0x2040000c
  403124:	004084ac 	.word	0x004084ac
  403128:	004009a9 	.word	0x004009a9
  40312c:	004084b4 	.word	0x004084b4
  403130:	00403559 	.word	0x00403559
  403134:	004007b1 	.word	0x004007b1
  403138:	51eb851f 	.word	0x51eb851f
  40313c:	00400825 	.word	0x00400825
  403140:	20400c69 	.word	0x20400c69
  403144:	00402b61 	.word	0x00402b61
  403148:	20400c68 	.word	0x20400c68
  40314c:	00402b4d 	.word	0x00402b4d
  403150:	0040315d 	.word	0x0040315d
  403154:	20400001 	.word	0x20400001
  403158:	20400c6a 	.word	0x20400c6a

0040315c <__aeabi_uldivmod>:
  40315c:	b953      	cbnz	r3, 403174 <__aeabi_uldivmod+0x18>
  40315e:	b94a      	cbnz	r2, 403174 <__aeabi_uldivmod+0x18>
  403160:	2900      	cmp	r1, #0
  403162:	bf08      	it	eq
  403164:	2800      	cmpeq	r0, #0
  403166:	bf1c      	itt	ne
  403168:	f04f 31ff 	movne.w	r1, #4294967295
  40316c:	f04f 30ff 	movne.w	r0, #4294967295
  403170:	f000 b97a 	b.w	403468 <__aeabi_idiv0>
  403174:	f1ad 0c08 	sub.w	ip, sp, #8
  403178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40317c:	f000 f806 	bl	40318c <__udivmoddi4>
  403180:	f8dd e004 	ldr.w	lr, [sp, #4]
  403184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403188:	b004      	add	sp, #16
  40318a:	4770      	bx	lr

0040318c <__udivmoddi4>:
  40318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403190:	468c      	mov	ip, r1
  403192:	460d      	mov	r5, r1
  403194:	4604      	mov	r4, r0
  403196:	9e08      	ldr	r6, [sp, #32]
  403198:	2b00      	cmp	r3, #0
  40319a:	d151      	bne.n	403240 <__udivmoddi4+0xb4>
  40319c:	428a      	cmp	r2, r1
  40319e:	4617      	mov	r7, r2
  4031a0:	d96d      	bls.n	40327e <__udivmoddi4+0xf2>
  4031a2:	fab2 fe82 	clz	lr, r2
  4031a6:	f1be 0f00 	cmp.w	lr, #0
  4031aa:	d00b      	beq.n	4031c4 <__udivmoddi4+0x38>
  4031ac:	f1ce 0c20 	rsb	ip, lr, #32
  4031b0:	fa01 f50e 	lsl.w	r5, r1, lr
  4031b4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4031b8:	fa02 f70e 	lsl.w	r7, r2, lr
  4031bc:	ea4c 0c05 	orr.w	ip, ip, r5
  4031c0:	fa00 f40e 	lsl.w	r4, r0, lr
  4031c4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4031c8:	0c25      	lsrs	r5, r4, #16
  4031ca:	fbbc f8fa 	udiv	r8, ip, sl
  4031ce:	fa1f f987 	uxth.w	r9, r7
  4031d2:	fb0a cc18 	mls	ip, sl, r8, ip
  4031d6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4031da:	fb08 f309 	mul.w	r3, r8, r9
  4031de:	42ab      	cmp	r3, r5
  4031e0:	d90a      	bls.n	4031f8 <__udivmoddi4+0x6c>
  4031e2:	19ed      	adds	r5, r5, r7
  4031e4:	f108 32ff 	add.w	r2, r8, #4294967295
  4031e8:	f080 8123 	bcs.w	403432 <__udivmoddi4+0x2a6>
  4031ec:	42ab      	cmp	r3, r5
  4031ee:	f240 8120 	bls.w	403432 <__udivmoddi4+0x2a6>
  4031f2:	f1a8 0802 	sub.w	r8, r8, #2
  4031f6:	443d      	add	r5, r7
  4031f8:	1aed      	subs	r5, r5, r3
  4031fa:	b2a4      	uxth	r4, r4
  4031fc:	fbb5 f0fa 	udiv	r0, r5, sl
  403200:	fb0a 5510 	mls	r5, sl, r0, r5
  403204:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403208:	fb00 f909 	mul.w	r9, r0, r9
  40320c:	45a1      	cmp	r9, r4
  40320e:	d909      	bls.n	403224 <__udivmoddi4+0x98>
  403210:	19e4      	adds	r4, r4, r7
  403212:	f100 33ff 	add.w	r3, r0, #4294967295
  403216:	f080 810a 	bcs.w	40342e <__udivmoddi4+0x2a2>
  40321a:	45a1      	cmp	r9, r4
  40321c:	f240 8107 	bls.w	40342e <__udivmoddi4+0x2a2>
  403220:	3802      	subs	r0, #2
  403222:	443c      	add	r4, r7
  403224:	eba4 0409 	sub.w	r4, r4, r9
  403228:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40322c:	2100      	movs	r1, #0
  40322e:	2e00      	cmp	r6, #0
  403230:	d061      	beq.n	4032f6 <__udivmoddi4+0x16a>
  403232:	fa24 f40e 	lsr.w	r4, r4, lr
  403236:	2300      	movs	r3, #0
  403238:	6034      	str	r4, [r6, #0]
  40323a:	6073      	str	r3, [r6, #4]
  40323c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403240:	428b      	cmp	r3, r1
  403242:	d907      	bls.n	403254 <__udivmoddi4+0xc8>
  403244:	2e00      	cmp	r6, #0
  403246:	d054      	beq.n	4032f2 <__udivmoddi4+0x166>
  403248:	2100      	movs	r1, #0
  40324a:	e886 0021 	stmia.w	r6, {r0, r5}
  40324e:	4608      	mov	r0, r1
  403250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403254:	fab3 f183 	clz	r1, r3
  403258:	2900      	cmp	r1, #0
  40325a:	f040 808e 	bne.w	40337a <__udivmoddi4+0x1ee>
  40325e:	42ab      	cmp	r3, r5
  403260:	d302      	bcc.n	403268 <__udivmoddi4+0xdc>
  403262:	4282      	cmp	r2, r0
  403264:	f200 80fa 	bhi.w	40345c <__udivmoddi4+0x2d0>
  403268:	1a84      	subs	r4, r0, r2
  40326a:	eb65 0503 	sbc.w	r5, r5, r3
  40326e:	2001      	movs	r0, #1
  403270:	46ac      	mov	ip, r5
  403272:	2e00      	cmp	r6, #0
  403274:	d03f      	beq.n	4032f6 <__udivmoddi4+0x16a>
  403276:	e886 1010 	stmia.w	r6, {r4, ip}
  40327a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40327e:	b912      	cbnz	r2, 403286 <__udivmoddi4+0xfa>
  403280:	2701      	movs	r7, #1
  403282:	fbb7 f7f2 	udiv	r7, r7, r2
  403286:	fab7 fe87 	clz	lr, r7
  40328a:	f1be 0f00 	cmp.w	lr, #0
  40328e:	d134      	bne.n	4032fa <__udivmoddi4+0x16e>
  403290:	1beb      	subs	r3, r5, r7
  403292:	0c3a      	lsrs	r2, r7, #16
  403294:	fa1f fc87 	uxth.w	ip, r7
  403298:	2101      	movs	r1, #1
  40329a:	fbb3 f8f2 	udiv	r8, r3, r2
  40329e:	0c25      	lsrs	r5, r4, #16
  4032a0:	fb02 3318 	mls	r3, r2, r8, r3
  4032a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4032a8:	fb0c f308 	mul.w	r3, ip, r8
  4032ac:	42ab      	cmp	r3, r5
  4032ae:	d907      	bls.n	4032c0 <__udivmoddi4+0x134>
  4032b0:	19ed      	adds	r5, r5, r7
  4032b2:	f108 30ff 	add.w	r0, r8, #4294967295
  4032b6:	d202      	bcs.n	4032be <__udivmoddi4+0x132>
  4032b8:	42ab      	cmp	r3, r5
  4032ba:	f200 80d1 	bhi.w	403460 <__udivmoddi4+0x2d4>
  4032be:	4680      	mov	r8, r0
  4032c0:	1aed      	subs	r5, r5, r3
  4032c2:	b2a3      	uxth	r3, r4
  4032c4:	fbb5 f0f2 	udiv	r0, r5, r2
  4032c8:	fb02 5510 	mls	r5, r2, r0, r5
  4032cc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4032d0:	fb0c fc00 	mul.w	ip, ip, r0
  4032d4:	45a4      	cmp	ip, r4
  4032d6:	d907      	bls.n	4032e8 <__udivmoddi4+0x15c>
  4032d8:	19e4      	adds	r4, r4, r7
  4032da:	f100 33ff 	add.w	r3, r0, #4294967295
  4032de:	d202      	bcs.n	4032e6 <__udivmoddi4+0x15a>
  4032e0:	45a4      	cmp	ip, r4
  4032e2:	f200 80b8 	bhi.w	403456 <__udivmoddi4+0x2ca>
  4032e6:	4618      	mov	r0, r3
  4032e8:	eba4 040c 	sub.w	r4, r4, ip
  4032ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4032f0:	e79d      	b.n	40322e <__udivmoddi4+0xa2>
  4032f2:	4631      	mov	r1, r6
  4032f4:	4630      	mov	r0, r6
  4032f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032fa:	f1ce 0420 	rsb	r4, lr, #32
  4032fe:	fa05 f30e 	lsl.w	r3, r5, lr
  403302:	fa07 f70e 	lsl.w	r7, r7, lr
  403306:	fa20 f804 	lsr.w	r8, r0, r4
  40330a:	0c3a      	lsrs	r2, r7, #16
  40330c:	fa25 f404 	lsr.w	r4, r5, r4
  403310:	ea48 0803 	orr.w	r8, r8, r3
  403314:	fbb4 f1f2 	udiv	r1, r4, r2
  403318:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40331c:	fb02 4411 	mls	r4, r2, r1, r4
  403320:	fa1f fc87 	uxth.w	ip, r7
  403324:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403328:	fb01 f30c 	mul.w	r3, r1, ip
  40332c:	42ab      	cmp	r3, r5
  40332e:	fa00 f40e 	lsl.w	r4, r0, lr
  403332:	d909      	bls.n	403348 <__udivmoddi4+0x1bc>
  403334:	19ed      	adds	r5, r5, r7
  403336:	f101 30ff 	add.w	r0, r1, #4294967295
  40333a:	f080 808a 	bcs.w	403452 <__udivmoddi4+0x2c6>
  40333e:	42ab      	cmp	r3, r5
  403340:	f240 8087 	bls.w	403452 <__udivmoddi4+0x2c6>
  403344:	3902      	subs	r1, #2
  403346:	443d      	add	r5, r7
  403348:	1aeb      	subs	r3, r5, r3
  40334a:	fa1f f588 	uxth.w	r5, r8
  40334e:	fbb3 f0f2 	udiv	r0, r3, r2
  403352:	fb02 3310 	mls	r3, r2, r0, r3
  403356:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40335a:	fb00 f30c 	mul.w	r3, r0, ip
  40335e:	42ab      	cmp	r3, r5
  403360:	d907      	bls.n	403372 <__udivmoddi4+0x1e6>
  403362:	19ed      	adds	r5, r5, r7
  403364:	f100 38ff 	add.w	r8, r0, #4294967295
  403368:	d26f      	bcs.n	40344a <__udivmoddi4+0x2be>
  40336a:	42ab      	cmp	r3, r5
  40336c:	d96d      	bls.n	40344a <__udivmoddi4+0x2be>
  40336e:	3802      	subs	r0, #2
  403370:	443d      	add	r5, r7
  403372:	1aeb      	subs	r3, r5, r3
  403374:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403378:	e78f      	b.n	40329a <__udivmoddi4+0x10e>
  40337a:	f1c1 0720 	rsb	r7, r1, #32
  40337e:	fa22 f807 	lsr.w	r8, r2, r7
  403382:	408b      	lsls	r3, r1
  403384:	fa05 f401 	lsl.w	r4, r5, r1
  403388:	ea48 0303 	orr.w	r3, r8, r3
  40338c:	fa20 fe07 	lsr.w	lr, r0, r7
  403390:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403394:	40fd      	lsrs	r5, r7
  403396:	ea4e 0e04 	orr.w	lr, lr, r4
  40339a:	fbb5 f9fc 	udiv	r9, r5, ip
  40339e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4033a2:	fb0c 5519 	mls	r5, ip, r9, r5
  4033a6:	fa1f f883 	uxth.w	r8, r3
  4033aa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4033ae:	fb09 f408 	mul.w	r4, r9, r8
  4033b2:	42ac      	cmp	r4, r5
  4033b4:	fa02 f201 	lsl.w	r2, r2, r1
  4033b8:	fa00 fa01 	lsl.w	sl, r0, r1
  4033bc:	d908      	bls.n	4033d0 <__udivmoddi4+0x244>
  4033be:	18ed      	adds	r5, r5, r3
  4033c0:	f109 30ff 	add.w	r0, r9, #4294967295
  4033c4:	d243      	bcs.n	40344e <__udivmoddi4+0x2c2>
  4033c6:	42ac      	cmp	r4, r5
  4033c8:	d941      	bls.n	40344e <__udivmoddi4+0x2c2>
  4033ca:	f1a9 0902 	sub.w	r9, r9, #2
  4033ce:	441d      	add	r5, r3
  4033d0:	1b2d      	subs	r5, r5, r4
  4033d2:	fa1f fe8e 	uxth.w	lr, lr
  4033d6:	fbb5 f0fc 	udiv	r0, r5, ip
  4033da:	fb0c 5510 	mls	r5, ip, r0, r5
  4033de:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4033e2:	fb00 f808 	mul.w	r8, r0, r8
  4033e6:	45a0      	cmp	r8, r4
  4033e8:	d907      	bls.n	4033fa <__udivmoddi4+0x26e>
  4033ea:	18e4      	adds	r4, r4, r3
  4033ec:	f100 35ff 	add.w	r5, r0, #4294967295
  4033f0:	d229      	bcs.n	403446 <__udivmoddi4+0x2ba>
  4033f2:	45a0      	cmp	r8, r4
  4033f4:	d927      	bls.n	403446 <__udivmoddi4+0x2ba>
  4033f6:	3802      	subs	r0, #2
  4033f8:	441c      	add	r4, r3
  4033fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4033fe:	eba4 0408 	sub.w	r4, r4, r8
  403402:	fba0 8902 	umull	r8, r9, r0, r2
  403406:	454c      	cmp	r4, r9
  403408:	46c6      	mov	lr, r8
  40340a:	464d      	mov	r5, r9
  40340c:	d315      	bcc.n	40343a <__udivmoddi4+0x2ae>
  40340e:	d012      	beq.n	403436 <__udivmoddi4+0x2aa>
  403410:	b156      	cbz	r6, 403428 <__udivmoddi4+0x29c>
  403412:	ebba 030e 	subs.w	r3, sl, lr
  403416:	eb64 0405 	sbc.w	r4, r4, r5
  40341a:	fa04 f707 	lsl.w	r7, r4, r7
  40341e:	40cb      	lsrs	r3, r1
  403420:	431f      	orrs	r7, r3
  403422:	40cc      	lsrs	r4, r1
  403424:	6037      	str	r7, [r6, #0]
  403426:	6074      	str	r4, [r6, #4]
  403428:	2100      	movs	r1, #0
  40342a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40342e:	4618      	mov	r0, r3
  403430:	e6f8      	b.n	403224 <__udivmoddi4+0x98>
  403432:	4690      	mov	r8, r2
  403434:	e6e0      	b.n	4031f8 <__udivmoddi4+0x6c>
  403436:	45c2      	cmp	sl, r8
  403438:	d2ea      	bcs.n	403410 <__udivmoddi4+0x284>
  40343a:	ebb8 0e02 	subs.w	lr, r8, r2
  40343e:	eb69 0503 	sbc.w	r5, r9, r3
  403442:	3801      	subs	r0, #1
  403444:	e7e4      	b.n	403410 <__udivmoddi4+0x284>
  403446:	4628      	mov	r0, r5
  403448:	e7d7      	b.n	4033fa <__udivmoddi4+0x26e>
  40344a:	4640      	mov	r0, r8
  40344c:	e791      	b.n	403372 <__udivmoddi4+0x1e6>
  40344e:	4681      	mov	r9, r0
  403450:	e7be      	b.n	4033d0 <__udivmoddi4+0x244>
  403452:	4601      	mov	r1, r0
  403454:	e778      	b.n	403348 <__udivmoddi4+0x1bc>
  403456:	3802      	subs	r0, #2
  403458:	443c      	add	r4, r7
  40345a:	e745      	b.n	4032e8 <__udivmoddi4+0x15c>
  40345c:	4608      	mov	r0, r1
  40345e:	e708      	b.n	403272 <__udivmoddi4+0xe6>
  403460:	f1a8 0802 	sub.w	r8, r8, #2
  403464:	443d      	add	r5, r7
  403466:	e72b      	b.n	4032c0 <__udivmoddi4+0x134>

00403468 <__aeabi_idiv0>:
  403468:	4770      	bx	lr
  40346a:	bf00      	nop

0040346c <__libc_init_array>:
  40346c:	b570      	push	{r4, r5, r6, lr}
  40346e:	4e0f      	ldr	r6, [pc, #60]	; (4034ac <__libc_init_array+0x40>)
  403470:	4d0f      	ldr	r5, [pc, #60]	; (4034b0 <__libc_init_array+0x44>)
  403472:	1b76      	subs	r6, r6, r5
  403474:	10b6      	asrs	r6, r6, #2
  403476:	bf18      	it	ne
  403478:	2400      	movne	r4, #0
  40347a:	d005      	beq.n	403488 <__libc_init_array+0x1c>
  40347c:	3401      	adds	r4, #1
  40347e:	f855 3b04 	ldr.w	r3, [r5], #4
  403482:	4798      	blx	r3
  403484:	42a6      	cmp	r6, r4
  403486:	d1f9      	bne.n	40347c <__libc_init_array+0x10>
  403488:	4e0a      	ldr	r6, [pc, #40]	; (4034b4 <__libc_init_array+0x48>)
  40348a:	4d0b      	ldr	r5, [pc, #44]	; (4034b8 <__libc_init_array+0x4c>)
  40348c:	1b76      	subs	r6, r6, r5
  40348e:	f005 f957 	bl	408740 <_init>
  403492:	10b6      	asrs	r6, r6, #2
  403494:	bf18      	it	ne
  403496:	2400      	movne	r4, #0
  403498:	d006      	beq.n	4034a8 <__libc_init_array+0x3c>
  40349a:	3401      	adds	r4, #1
  40349c:	f855 3b04 	ldr.w	r3, [r5], #4
  4034a0:	4798      	blx	r3
  4034a2:	42a6      	cmp	r6, r4
  4034a4:	d1f9      	bne.n	40349a <__libc_init_array+0x2e>
  4034a6:	bd70      	pop	{r4, r5, r6, pc}
  4034a8:	bd70      	pop	{r4, r5, r6, pc}
  4034aa:	bf00      	nop
  4034ac:	0040874c 	.word	0x0040874c
  4034b0:	0040874c 	.word	0x0040874c
  4034b4:	00408754 	.word	0x00408754
  4034b8:	0040874c 	.word	0x0040874c

004034bc <memset>:
  4034bc:	b470      	push	{r4, r5, r6}
  4034be:	0786      	lsls	r6, r0, #30
  4034c0:	d046      	beq.n	403550 <memset+0x94>
  4034c2:	1e54      	subs	r4, r2, #1
  4034c4:	2a00      	cmp	r2, #0
  4034c6:	d041      	beq.n	40354c <memset+0x90>
  4034c8:	b2ca      	uxtb	r2, r1
  4034ca:	4603      	mov	r3, r0
  4034cc:	e002      	b.n	4034d4 <memset+0x18>
  4034ce:	f114 34ff 	adds.w	r4, r4, #4294967295
  4034d2:	d33b      	bcc.n	40354c <memset+0x90>
  4034d4:	f803 2b01 	strb.w	r2, [r3], #1
  4034d8:	079d      	lsls	r5, r3, #30
  4034da:	d1f8      	bne.n	4034ce <memset+0x12>
  4034dc:	2c03      	cmp	r4, #3
  4034de:	d92e      	bls.n	40353e <memset+0x82>
  4034e0:	b2cd      	uxtb	r5, r1
  4034e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4034e6:	2c0f      	cmp	r4, #15
  4034e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4034ec:	d919      	bls.n	403522 <memset+0x66>
  4034ee:	f103 0210 	add.w	r2, r3, #16
  4034f2:	4626      	mov	r6, r4
  4034f4:	3e10      	subs	r6, #16
  4034f6:	2e0f      	cmp	r6, #15
  4034f8:	f842 5c10 	str.w	r5, [r2, #-16]
  4034fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  403500:	f842 5c08 	str.w	r5, [r2, #-8]
  403504:	f842 5c04 	str.w	r5, [r2, #-4]
  403508:	f102 0210 	add.w	r2, r2, #16
  40350c:	d8f2      	bhi.n	4034f4 <memset+0x38>
  40350e:	f1a4 0210 	sub.w	r2, r4, #16
  403512:	f022 020f 	bic.w	r2, r2, #15
  403516:	f004 040f 	and.w	r4, r4, #15
  40351a:	3210      	adds	r2, #16
  40351c:	2c03      	cmp	r4, #3
  40351e:	4413      	add	r3, r2
  403520:	d90d      	bls.n	40353e <memset+0x82>
  403522:	461e      	mov	r6, r3
  403524:	4622      	mov	r2, r4
  403526:	3a04      	subs	r2, #4
  403528:	2a03      	cmp	r2, #3
  40352a:	f846 5b04 	str.w	r5, [r6], #4
  40352e:	d8fa      	bhi.n	403526 <memset+0x6a>
  403530:	1f22      	subs	r2, r4, #4
  403532:	f022 0203 	bic.w	r2, r2, #3
  403536:	3204      	adds	r2, #4
  403538:	4413      	add	r3, r2
  40353a:	f004 0403 	and.w	r4, r4, #3
  40353e:	b12c      	cbz	r4, 40354c <memset+0x90>
  403540:	b2c9      	uxtb	r1, r1
  403542:	441c      	add	r4, r3
  403544:	f803 1b01 	strb.w	r1, [r3], #1
  403548:	429c      	cmp	r4, r3
  40354a:	d1fb      	bne.n	403544 <memset+0x88>
  40354c:	bc70      	pop	{r4, r5, r6}
  40354e:	4770      	bx	lr
  403550:	4614      	mov	r4, r2
  403552:	4603      	mov	r3, r0
  403554:	e7c2      	b.n	4034dc <memset+0x20>
  403556:	bf00      	nop

00403558 <sprintf>:
  403558:	b40e      	push	{r1, r2, r3}
  40355a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40355c:	b09c      	sub	sp, #112	; 0x70
  40355e:	ab21      	add	r3, sp, #132	; 0x84
  403560:	490f      	ldr	r1, [pc, #60]	; (4035a0 <sprintf+0x48>)
  403562:	f853 2b04 	ldr.w	r2, [r3], #4
  403566:	9301      	str	r3, [sp, #4]
  403568:	4605      	mov	r5, r0
  40356a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40356e:	6808      	ldr	r0, [r1, #0]
  403570:	9502      	str	r5, [sp, #8]
  403572:	f44f 7702 	mov.w	r7, #520	; 0x208
  403576:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40357a:	a902      	add	r1, sp, #8
  40357c:	9506      	str	r5, [sp, #24]
  40357e:	f8ad 7014 	strh.w	r7, [sp, #20]
  403582:	9404      	str	r4, [sp, #16]
  403584:	9407      	str	r4, [sp, #28]
  403586:	f8ad 6016 	strh.w	r6, [sp, #22]
  40358a:	f000 f80b 	bl	4035a4 <_svfprintf_r>
  40358e:	9b02      	ldr	r3, [sp, #8]
  403590:	2200      	movs	r2, #0
  403592:	701a      	strb	r2, [r3, #0]
  403594:	b01c      	add	sp, #112	; 0x70
  403596:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40359a:	b003      	add	sp, #12
  40359c:	4770      	bx	lr
  40359e:	bf00      	nop
  4035a0:	20400020 	.word	0x20400020

004035a4 <_svfprintf_r>:
  4035a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035a8:	b0c3      	sub	sp, #268	; 0x10c
  4035aa:	460c      	mov	r4, r1
  4035ac:	910b      	str	r1, [sp, #44]	; 0x2c
  4035ae:	4692      	mov	sl, r2
  4035b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4035b2:	900c      	str	r0, [sp, #48]	; 0x30
  4035b4:	f002 fa0c 	bl	4059d0 <_localeconv_r>
  4035b8:	6803      	ldr	r3, [r0, #0]
  4035ba:	931a      	str	r3, [sp, #104]	; 0x68
  4035bc:	4618      	mov	r0, r3
  4035be:	f003 f8df 	bl	406780 <strlen>
  4035c2:	89a3      	ldrh	r3, [r4, #12]
  4035c4:	9019      	str	r0, [sp, #100]	; 0x64
  4035c6:	0619      	lsls	r1, r3, #24
  4035c8:	d503      	bpl.n	4035d2 <_svfprintf_r+0x2e>
  4035ca:	6923      	ldr	r3, [r4, #16]
  4035cc:	2b00      	cmp	r3, #0
  4035ce:	f001 8003 	beq.w	4045d8 <_svfprintf_r+0x1034>
  4035d2:	2300      	movs	r3, #0
  4035d4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4035d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4035da:	9315      	str	r3, [sp, #84]	; 0x54
  4035dc:	9314      	str	r3, [sp, #80]	; 0x50
  4035de:	9327      	str	r3, [sp, #156]	; 0x9c
  4035e0:	9326      	str	r3, [sp, #152]	; 0x98
  4035e2:	9318      	str	r3, [sp, #96]	; 0x60
  4035e4:	931b      	str	r3, [sp, #108]	; 0x6c
  4035e6:	9309      	str	r3, [sp, #36]	; 0x24
  4035e8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4035ec:	46c8      	mov	r8, r9
  4035ee:	9316      	str	r3, [sp, #88]	; 0x58
  4035f0:	9317      	str	r3, [sp, #92]	; 0x5c
  4035f2:	f89a 3000 	ldrb.w	r3, [sl]
  4035f6:	4654      	mov	r4, sl
  4035f8:	b1e3      	cbz	r3, 403634 <_svfprintf_r+0x90>
  4035fa:	2b25      	cmp	r3, #37	; 0x25
  4035fc:	d102      	bne.n	403604 <_svfprintf_r+0x60>
  4035fe:	e019      	b.n	403634 <_svfprintf_r+0x90>
  403600:	2b25      	cmp	r3, #37	; 0x25
  403602:	d003      	beq.n	40360c <_svfprintf_r+0x68>
  403604:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403608:	2b00      	cmp	r3, #0
  40360a:	d1f9      	bne.n	403600 <_svfprintf_r+0x5c>
  40360c:	eba4 050a 	sub.w	r5, r4, sl
  403610:	b185      	cbz	r5, 403634 <_svfprintf_r+0x90>
  403612:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403614:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403616:	f8c8 a000 	str.w	sl, [r8]
  40361a:	3301      	adds	r3, #1
  40361c:	442a      	add	r2, r5
  40361e:	2b07      	cmp	r3, #7
  403620:	f8c8 5004 	str.w	r5, [r8, #4]
  403624:	9227      	str	r2, [sp, #156]	; 0x9c
  403626:	9326      	str	r3, [sp, #152]	; 0x98
  403628:	dc7f      	bgt.n	40372a <_svfprintf_r+0x186>
  40362a:	f108 0808 	add.w	r8, r8, #8
  40362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403630:	442b      	add	r3, r5
  403632:	9309      	str	r3, [sp, #36]	; 0x24
  403634:	7823      	ldrb	r3, [r4, #0]
  403636:	2b00      	cmp	r3, #0
  403638:	d07f      	beq.n	40373a <_svfprintf_r+0x196>
  40363a:	2300      	movs	r3, #0
  40363c:	461a      	mov	r2, r3
  40363e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403642:	4619      	mov	r1, r3
  403644:	930d      	str	r3, [sp, #52]	; 0x34
  403646:	469b      	mov	fp, r3
  403648:	f04f 30ff 	mov.w	r0, #4294967295
  40364c:	7863      	ldrb	r3, [r4, #1]
  40364e:	900a      	str	r0, [sp, #40]	; 0x28
  403650:	f104 0a01 	add.w	sl, r4, #1
  403654:	f10a 0a01 	add.w	sl, sl, #1
  403658:	f1a3 0020 	sub.w	r0, r3, #32
  40365c:	2858      	cmp	r0, #88	; 0x58
  40365e:	f200 83c1 	bhi.w	403de4 <_svfprintf_r+0x840>
  403662:	e8df f010 	tbh	[pc, r0, lsl #1]
  403666:	0238      	.short	0x0238
  403668:	03bf03bf 	.word	0x03bf03bf
  40366c:	03bf0240 	.word	0x03bf0240
  403670:	03bf03bf 	.word	0x03bf03bf
  403674:	03bf03bf 	.word	0x03bf03bf
  403678:	024503bf 	.word	0x024503bf
  40367c:	03bf0203 	.word	0x03bf0203
  403680:	026b005d 	.word	0x026b005d
  403684:	028603bf 	.word	0x028603bf
  403688:	039d039d 	.word	0x039d039d
  40368c:	039d039d 	.word	0x039d039d
  403690:	039d039d 	.word	0x039d039d
  403694:	039d039d 	.word	0x039d039d
  403698:	03bf039d 	.word	0x03bf039d
  40369c:	03bf03bf 	.word	0x03bf03bf
  4036a0:	03bf03bf 	.word	0x03bf03bf
  4036a4:	03bf03bf 	.word	0x03bf03bf
  4036a8:	03bf03bf 	.word	0x03bf03bf
  4036ac:	033703bf 	.word	0x033703bf
  4036b0:	03bf0357 	.word	0x03bf0357
  4036b4:	03bf0357 	.word	0x03bf0357
  4036b8:	03bf03bf 	.word	0x03bf03bf
  4036bc:	039803bf 	.word	0x039803bf
  4036c0:	03bf03bf 	.word	0x03bf03bf
  4036c4:	03bf03ad 	.word	0x03bf03ad
  4036c8:	03bf03bf 	.word	0x03bf03bf
  4036cc:	03bf03bf 	.word	0x03bf03bf
  4036d0:	03bf0259 	.word	0x03bf0259
  4036d4:	031e03bf 	.word	0x031e03bf
  4036d8:	03bf03bf 	.word	0x03bf03bf
  4036dc:	03bf03bf 	.word	0x03bf03bf
  4036e0:	03bf03bf 	.word	0x03bf03bf
  4036e4:	03bf03bf 	.word	0x03bf03bf
  4036e8:	03bf03bf 	.word	0x03bf03bf
  4036ec:	02db02c6 	.word	0x02db02c6
  4036f0:	03570357 	.word	0x03570357
  4036f4:	028b0357 	.word	0x028b0357
  4036f8:	03bf02db 	.word	0x03bf02db
  4036fc:	029003bf 	.word	0x029003bf
  403700:	029d03bf 	.word	0x029d03bf
  403704:	02b401cc 	.word	0x02b401cc
  403708:	03bf0208 	.word	0x03bf0208
  40370c:	03bf01e1 	.word	0x03bf01e1
  403710:	03bf007e 	.word	0x03bf007e
  403714:	020d03bf 	.word	0x020d03bf
  403718:	980d      	ldr	r0, [sp, #52]	; 0x34
  40371a:	930f      	str	r3, [sp, #60]	; 0x3c
  40371c:	4240      	negs	r0, r0
  40371e:	900d      	str	r0, [sp, #52]	; 0x34
  403720:	f04b 0b04 	orr.w	fp, fp, #4
  403724:	f89a 3000 	ldrb.w	r3, [sl]
  403728:	e794      	b.n	403654 <_svfprintf_r+0xb0>
  40372a:	aa25      	add	r2, sp, #148	; 0x94
  40372c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40372e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403730:	f003 f894 	bl	40685c <__ssprint_r>
  403734:	b940      	cbnz	r0, 403748 <_svfprintf_r+0x1a4>
  403736:	46c8      	mov	r8, r9
  403738:	e779      	b.n	40362e <_svfprintf_r+0x8a>
  40373a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40373c:	b123      	cbz	r3, 403748 <_svfprintf_r+0x1a4>
  40373e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403740:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403742:	aa25      	add	r2, sp, #148	; 0x94
  403744:	f003 f88a 	bl	40685c <__ssprint_r>
  403748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40374a:	899b      	ldrh	r3, [r3, #12]
  40374c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403750:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403752:	bf18      	it	ne
  403754:	f04f 33ff 	movne.w	r3, #4294967295
  403758:	9309      	str	r3, [sp, #36]	; 0x24
  40375a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40375c:	b043      	add	sp, #268	; 0x10c
  40375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403762:	f01b 0f20 	tst.w	fp, #32
  403766:	9311      	str	r3, [sp, #68]	; 0x44
  403768:	f040 81dd 	bne.w	403b26 <_svfprintf_r+0x582>
  40376c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40376e:	f01b 0f10 	tst.w	fp, #16
  403772:	4613      	mov	r3, r2
  403774:	f040 856e 	bne.w	404254 <_svfprintf_r+0xcb0>
  403778:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40377c:	f000 856a 	beq.w	404254 <_svfprintf_r+0xcb0>
  403780:	8814      	ldrh	r4, [r2, #0]
  403782:	3204      	adds	r2, #4
  403784:	2500      	movs	r5, #0
  403786:	2301      	movs	r3, #1
  403788:	920f      	str	r2, [sp, #60]	; 0x3c
  40378a:	2700      	movs	r7, #0
  40378c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403790:	990a      	ldr	r1, [sp, #40]	; 0x28
  403792:	1c4a      	adds	r2, r1, #1
  403794:	f000 8265 	beq.w	403c62 <_svfprintf_r+0x6be>
  403798:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40379c:	9207      	str	r2, [sp, #28]
  40379e:	ea54 0205 	orrs.w	r2, r4, r5
  4037a2:	f040 8264 	bne.w	403c6e <_svfprintf_r+0x6ca>
  4037a6:	2900      	cmp	r1, #0
  4037a8:	f040 843c 	bne.w	404024 <_svfprintf_r+0xa80>
  4037ac:	2b00      	cmp	r3, #0
  4037ae:	f040 84d7 	bne.w	404160 <_svfprintf_r+0xbbc>
  4037b2:	f01b 0301 	ands.w	r3, fp, #1
  4037b6:	930e      	str	r3, [sp, #56]	; 0x38
  4037b8:	f000 8604 	beq.w	4043c4 <_svfprintf_r+0xe20>
  4037bc:	ae42      	add	r6, sp, #264	; 0x108
  4037be:	2330      	movs	r3, #48	; 0x30
  4037c0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4037c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4037c8:	4293      	cmp	r3, r2
  4037ca:	bfb8      	it	lt
  4037cc:	4613      	movlt	r3, r2
  4037ce:	9308      	str	r3, [sp, #32]
  4037d0:	2300      	movs	r3, #0
  4037d2:	9312      	str	r3, [sp, #72]	; 0x48
  4037d4:	b117      	cbz	r7, 4037dc <_svfprintf_r+0x238>
  4037d6:	9b08      	ldr	r3, [sp, #32]
  4037d8:	3301      	adds	r3, #1
  4037da:	9308      	str	r3, [sp, #32]
  4037dc:	9b07      	ldr	r3, [sp, #28]
  4037de:	f013 0302 	ands.w	r3, r3, #2
  4037e2:	9310      	str	r3, [sp, #64]	; 0x40
  4037e4:	d002      	beq.n	4037ec <_svfprintf_r+0x248>
  4037e6:	9b08      	ldr	r3, [sp, #32]
  4037e8:	3302      	adds	r3, #2
  4037ea:	9308      	str	r3, [sp, #32]
  4037ec:	9b07      	ldr	r3, [sp, #28]
  4037ee:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4037f2:	f040 830e 	bne.w	403e12 <_svfprintf_r+0x86e>
  4037f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4037f8:	9a08      	ldr	r2, [sp, #32]
  4037fa:	eba3 0b02 	sub.w	fp, r3, r2
  4037fe:	f1bb 0f00 	cmp.w	fp, #0
  403802:	f340 8306 	ble.w	403e12 <_svfprintf_r+0x86e>
  403806:	f1bb 0f10 	cmp.w	fp, #16
  40380a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40380c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40380e:	dd29      	ble.n	403864 <_svfprintf_r+0x2c0>
  403810:	4643      	mov	r3, r8
  403812:	4621      	mov	r1, r4
  403814:	46a8      	mov	r8, r5
  403816:	2710      	movs	r7, #16
  403818:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40381a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40381c:	e006      	b.n	40382c <_svfprintf_r+0x288>
  40381e:	f1ab 0b10 	sub.w	fp, fp, #16
  403822:	f1bb 0f10 	cmp.w	fp, #16
  403826:	f103 0308 	add.w	r3, r3, #8
  40382a:	dd18      	ble.n	40385e <_svfprintf_r+0x2ba>
  40382c:	3201      	adds	r2, #1
  40382e:	48b7      	ldr	r0, [pc, #732]	; (403b0c <_svfprintf_r+0x568>)
  403830:	9226      	str	r2, [sp, #152]	; 0x98
  403832:	3110      	adds	r1, #16
  403834:	2a07      	cmp	r2, #7
  403836:	9127      	str	r1, [sp, #156]	; 0x9c
  403838:	e883 0081 	stmia.w	r3, {r0, r7}
  40383c:	ddef      	ble.n	40381e <_svfprintf_r+0x27a>
  40383e:	aa25      	add	r2, sp, #148	; 0x94
  403840:	4629      	mov	r1, r5
  403842:	4620      	mov	r0, r4
  403844:	f003 f80a 	bl	40685c <__ssprint_r>
  403848:	2800      	cmp	r0, #0
  40384a:	f47f af7d 	bne.w	403748 <_svfprintf_r+0x1a4>
  40384e:	f1ab 0b10 	sub.w	fp, fp, #16
  403852:	f1bb 0f10 	cmp.w	fp, #16
  403856:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403858:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40385a:	464b      	mov	r3, r9
  40385c:	dce6      	bgt.n	40382c <_svfprintf_r+0x288>
  40385e:	4645      	mov	r5, r8
  403860:	460c      	mov	r4, r1
  403862:	4698      	mov	r8, r3
  403864:	3201      	adds	r2, #1
  403866:	4ba9      	ldr	r3, [pc, #676]	; (403b0c <_svfprintf_r+0x568>)
  403868:	9226      	str	r2, [sp, #152]	; 0x98
  40386a:	445c      	add	r4, fp
  40386c:	2a07      	cmp	r2, #7
  40386e:	9427      	str	r4, [sp, #156]	; 0x9c
  403870:	e888 0808 	stmia.w	r8, {r3, fp}
  403874:	f300 8498 	bgt.w	4041a8 <_svfprintf_r+0xc04>
  403878:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40387c:	f108 0808 	add.w	r8, r8, #8
  403880:	b177      	cbz	r7, 4038a0 <_svfprintf_r+0x2fc>
  403882:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403884:	3301      	adds	r3, #1
  403886:	3401      	adds	r4, #1
  403888:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40388c:	2201      	movs	r2, #1
  40388e:	2b07      	cmp	r3, #7
  403890:	9427      	str	r4, [sp, #156]	; 0x9c
  403892:	9326      	str	r3, [sp, #152]	; 0x98
  403894:	e888 0006 	stmia.w	r8, {r1, r2}
  403898:	f300 83db 	bgt.w	404052 <_svfprintf_r+0xaae>
  40389c:	f108 0808 	add.w	r8, r8, #8
  4038a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4038a2:	b16b      	cbz	r3, 4038c0 <_svfprintf_r+0x31c>
  4038a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038a6:	3301      	adds	r3, #1
  4038a8:	3402      	adds	r4, #2
  4038aa:	a91e      	add	r1, sp, #120	; 0x78
  4038ac:	2202      	movs	r2, #2
  4038ae:	2b07      	cmp	r3, #7
  4038b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4038b2:	9326      	str	r3, [sp, #152]	; 0x98
  4038b4:	e888 0006 	stmia.w	r8, {r1, r2}
  4038b8:	f300 83d6 	bgt.w	404068 <_svfprintf_r+0xac4>
  4038bc:	f108 0808 	add.w	r8, r8, #8
  4038c0:	2d80      	cmp	r5, #128	; 0x80
  4038c2:	f000 8315 	beq.w	403ef0 <_svfprintf_r+0x94c>
  4038c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038ca:	1a9f      	subs	r7, r3, r2
  4038cc:	2f00      	cmp	r7, #0
  4038ce:	dd36      	ble.n	40393e <_svfprintf_r+0x39a>
  4038d0:	2f10      	cmp	r7, #16
  4038d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038d4:	4d8e      	ldr	r5, [pc, #568]	; (403b10 <_svfprintf_r+0x56c>)
  4038d6:	dd27      	ble.n	403928 <_svfprintf_r+0x384>
  4038d8:	4642      	mov	r2, r8
  4038da:	4621      	mov	r1, r4
  4038dc:	46b0      	mov	r8, r6
  4038de:	f04f 0b10 	mov.w	fp, #16
  4038e2:	462e      	mov	r6, r5
  4038e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4038e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4038e8:	e004      	b.n	4038f4 <_svfprintf_r+0x350>
  4038ea:	3f10      	subs	r7, #16
  4038ec:	2f10      	cmp	r7, #16
  4038ee:	f102 0208 	add.w	r2, r2, #8
  4038f2:	dd15      	ble.n	403920 <_svfprintf_r+0x37c>
  4038f4:	3301      	adds	r3, #1
  4038f6:	3110      	adds	r1, #16
  4038f8:	2b07      	cmp	r3, #7
  4038fa:	9127      	str	r1, [sp, #156]	; 0x9c
  4038fc:	9326      	str	r3, [sp, #152]	; 0x98
  4038fe:	e882 0840 	stmia.w	r2, {r6, fp}
  403902:	ddf2      	ble.n	4038ea <_svfprintf_r+0x346>
  403904:	aa25      	add	r2, sp, #148	; 0x94
  403906:	4629      	mov	r1, r5
  403908:	4620      	mov	r0, r4
  40390a:	f002 ffa7 	bl	40685c <__ssprint_r>
  40390e:	2800      	cmp	r0, #0
  403910:	f47f af1a 	bne.w	403748 <_svfprintf_r+0x1a4>
  403914:	3f10      	subs	r7, #16
  403916:	2f10      	cmp	r7, #16
  403918:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40391a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40391c:	464a      	mov	r2, r9
  40391e:	dce9      	bgt.n	4038f4 <_svfprintf_r+0x350>
  403920:	4635      	mov	r5, r6
  403922:	460c      	mov	r4, r1
  403924:	4646      	mov	r6, r8
  403926:	4690      	mov	r8, r2
  403928:	3301      	adds	r3, #1
  40392a:	443c      	add	r4, r7
  40392c:	2b07      	cmp	r3, #7
  40392e:	9427      	str	r4, [sp, #156]	; 0x9c
  403930:	9326      	str	r3, [sp, #152]	; 0x98
  403932:	e888 00a0 	stmia.w	r8, {r5, r7}
  403936:	f300 8381 	bgt.w	40403c <_svfprintf_r+0xa98>
  40393a:	f108 0808 	add.w	r8, r8, #8
  40393e:	9b07      	ldr	r3, [sp, #28]
  403940:	05df      	lsls	r7, r3, #23
  403942:	f100 8268 	bmi.w	403e16 <_svfprintf_r+0x872>
  403946:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403948:	990e      	ldr	r1, [sp, #56]	; 0x38
  40394a:	f8c8 6000 	str.w	r6, [r8]
  40394e:	3301      	adds	r3, #1
  403950:	440c      	add	r4, r1
  403952:	2b07      	cmp	r3, #7
  403954:	9427      	str	r4, [sp, #156]	; 0x9c
  403956:	f8c8 1004 	str.w	r1, [r8, #4]
  40395a:	9326      	str	r3, [sp, #152]	; 0x98
  40395c:	f300 834d 	bgt.w	403ffa <_svfprintf_r+0xa56>
  403960:	f108 0808 	add.w	r8, r8, #8
  403964:	9b07      	ldr	r3, [sp, #28]
  403966:	075b      	lsls	r3, r3, #29
  403968:	d53a      	bpl.n	4039e0 <_svfprintf_r+0x43c>
  40396a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40396c:	9a08      	ldr	r2, [sp, #32]
  40396e:	1a9d      	subs	r5, r3, r2
  403970:	2d00      	cmp	r5, #0
  403972:	dd35      	ble.n	4039e0 <_svfprintf_r+0x43c>
  403974:	2d10      	cmp	r5, #16
  403976:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403978:	dd20      	ble.n	4039bc <_svfprintf_r+0x418>
  40397a:	2610      	movs	r6, #16
  40397c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40397e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403982:	e004      	b.n	40398e <_svfprintf_r+0x3ea>
  403984:	3d10      	subs	r5, #16
  403986:	2d10      	cmp	r5, #16
  403988:	f108 0808 	add.w	r8, r8, #8
  40398c:	dd16      	ble.n	4039bc <_svfprintf_r+0x418>
  40398e:	3301      	adds	r3, #1
  403990:	4a5e      	ldr	r2, [pc, #376]	; (403b0c <_svfprintf_r+0x568>)
  403992:	9326      	str	r3, [sp, #152]	; 0x98
  403994:	3410      	adds	r4, #16
  403996:	2b07      	cmp	r3, #7
  403998:	9427      	str	r4, [sp, #156]	; 0x9c
  40399a:	e888 0044 	stmia.w	r8, {r2, r6}
  40399e:	ddf1      	ble.n	403984 <_svfprintf_r+0x3e0>
  4039a0:	aa25      	add	r2, sp, #148	; 0x94
  4039a2:	4659      	mov	r1, fp
  4039a4:	4638      	mov	r0, r7
  4039a6:	f002 ff59 	bl	40685c <__ssprint_r>
  4039aa:	2800      	cmp	r0, #0
  4039ac:	f47f aecc 	bne.w	403748 <_svfprintf_r+0x1a4>
  4039b0:	3d10      	subs	r5, #16
  4039b2:	2d10      	cmp	r5, #16
  4039b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039b8:	46c8      	mov	r8, r9
  4039ba:	dce8      	bgt.n	40398e <_svfprintf_r+0x3ea>
  4039bc:	3301      	adds	r3, #1
  4039be:	4a53      	ldr	r2, [pc, #332]	; (403b0c <_svfprintf_r+0x568>)
  4039c0:	9326      	str	r3, [sp, #152]	; 0x98
  4039c2:	442c      	add	r4, r5
  4039c4:	2b07      	cmp	r3, #7
  4039c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4039c8:	e888 0024 	stmia.w	r8, {r2, r5}
  4039cc:	dd08      	ble.n	4039e0 <_svfprintf_r+0x43c>
  4039ce:	aa25      	add	r2, sp, #148	; 0x94
  4039d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4039d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039d4:	f002 ff42 	bl	40685c <__ssprint_r>
  4039d8:	2800      	cmp	r0, #0
  4039da:	f47f aeb5 	bne.w	403748 <_svfprintf_r+0x1a4>
  4039de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4039e4:	9908      	ldr	r1, [sp, #32]
  4039e6:	428a      	cmp	r2, r1
  4039e8:	bfac      	ite	ge
  4039ea:	189b      	addge	r3, r3, r2
  4039ec:	185b      	addlt	r3, r3, r1
  4039ee:	9309      	str	r3, [sp, #36]	; 0x24
  4039f0:	2c00      	cmp	r4, #0
  4039f2:	f040 830d 	bne.w	404010 <_svfprintf_r+0xa6c>
  4039f6:	2300      	movs	r3, #0
  4039f8:	9326      	str	r3, [sp, #152]	; 0x98
  4039fa:	46c8      	mov	r8, r9
  4039fc:	e5f9      	b.n	4035f2 <_svfprintf_r+0x4e>
  4039fe:	9311      	str	r3, [sp, #68]	; 0x44
  403a00:	f01b 0320 	ands.w	r3, fp, #32
  403a04:	f040 81e3 	bne.w	403dce <_svfprintf_r+0x82a>
  403a08:	f01b 0210 	ands.w	r2, fp, #16
  403a0c:	f040 842e 	bne.w	40426c <_svfprintf_r+0xcc8>
  403a10:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403a14:	f000 842a 	beq.w	40426c <_svfprintf_r+0xcc8>
  403a18:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a1a:	4613      	mov	r3, r2
  403a1c:	460a      	mov	r2, r1
  403a1e:	3204      	adds	r2, #4
  403a20:	880c      	ldrh	r4, [r1, #0]
  403a22:	920f      	str	r2, [sp, #60]	; 0x3c
  403a24:	2500      	movs	r5, #0
  403a26:	e6b0      	b.n	40378a <_svfprintf_r+0x1e6>
  403a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a2a:	9311      	str	r3, [sp, #68]	; 0x44
  403a2c:	6816      	ldr	r6, [r2, #0]
  403a2e:	2400      	movs	r4, #0
  403a30:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403a34:	1d15      	adds	r5, r2, #4
  403a36:	2e00      	cmp	r6, #0
  403a38:	f000 86a7 	beq.w	40478a <_svfprintf_r+0x11e6>
  403a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403a3e:	1c53      	adds	r3, r2, #1
  403a40:	f000 8609 	beq.w	404656 <_svfprintf_r+0x10b2>
  403a44:	4621      	mov	r1, r4
  403a46:	4630      	mov	r0, r6
  403a48:	f002 fa8a 	bl	405f60 <memchr>
  403a4c:	2800      	cmp	r0, #0
  403a4e:	f000 86e1 	beq.w	404814 <_svfprintf_r+0x1270>
  403a52:	1b83      	subs	r3, r0, r6
  403a54:	930e      	str	r3, [sp, #56]	; 0x38
  403a56:	940a      	str	r4, [sp, #40]	; 0x28
  403a58:	950f      	str	r5, [sp, #60]	; 0x3c
  403a5a:	f8cd b01c 	str.w	fp, [sp, #28]
  403a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403a62:	9308      	str	r3, [sp, #32]
  403a64:	9412      	str	r4, [sp, #72]	; 0x48
  403a66:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403a6a:	e6b3      	b.n	4037d4 <_svfprintf_r+0x230>
  403a6c:	f89a 3000 	ldrb.w	r3, [sl]
  403a70:	2201      	movs	r2, #1
  403a72:	212b      	movs	r1, #43	; 0x2b
  403a74:	e5ee      	b.n	403654 <_svfprintf_r+0xb0>
  403a76:	f04b 0b20 	orr.w	fp, fp, #32
  403a7a:	f89a 3000 	ldrb.w	r3, [sl]
  403a7e:	e5e9      	b.n	403654 <_svfprintf_r+0xb0>
  403a80:	9311      	str	r3, [sp, #68]	; 0x44
  403a82:	2a00      	cmp	r2, #0
  403a84:	f040 8795 	bne.w	4049b2 <_svfprintf_r+0x140e>
  403a88:	4b22      	ldr	r3, [pc, #136]	; (403b14 <_svfprintf_r+0x570>)
  403a8a:	9318      	str	r3, [sp, #96]	; 0x60
  403a8c:	f01b 0f20 	tst.w	fp, #32
  403a90:	f040 8111 	bne.w	403cb6 <_svfprintf_r+0x712>
  403a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a96:	f01b 0f10 	tst.w	fp, #16
  403a9a:	4613      	mov	r3, r2
  403a9c:	f040 83e1 	bne.w	404262 <_svfprintf_r+0xcbe>
  403aa0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403aa4:	f000 83dd 	beq.w	404262 <_svfprintf_r+0xcbe>
  403aa8:	3304      	adds	r3, #4
  403aaa:	8814      	ldrh	r4, [r2, #0]
  403aac:	930f      	str	r3, [sp, #60]	; 0x3c
  403aae:	2500      	movs	r5, #0
  403ab0:	f01b 0f01 	tst.w	fp, #1
  403ab4:	f000 810c 	beq.w	403cd0 <_svfprintf_r+0x72c>
  403ab8:	ea54 0305 	orrs.w	r3, r4, r5
  403abc:	f000 8108 	beq.w	403cd0 <_svfprintf_r+0x72c>
  403ac0:	2330      	movs	r3, #48	; 0x30
  403ac2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403ac6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403aca:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403ace:	f04b 0b02 	orr.w	fp, fp, #2
  403ad2:	2302      	movs	r3, #2
  403ad4:	e659      	b.n	40378a <_svfprintf_r+0x1e6>
  403ad6:	f89a 3000 	ldrb.w	r3, [sl]
  403ada:	2900      	cmp	r1, #0
  403adc:	f47f adba 	bne.w	403654 <_svfprintf_r+0xb0>
  403ae0:	2201      	movs	r2, #1
  403ae2:	2120      	movs	r1, #32
  403ae4:	e5b6      	b.n	403654 <_svfprintf_r+0xb0>
  403ae6:	f04b 0b01 	orr.w	fp, fp, #1
  403aea:	f89a 3000 	ldrb.w	r3, [sl]
  403aee:	e5b1      	b.n	403654 <_svfprintf_r+0xb0>
  403af0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403af2:	6823      	ldr	r3, [r4, #0]
  403af4:	930d      	str	r3, [sp, #52]	; 0x34
  403af6:	4618      	mov	r0, r3
  403af8:	2800      	cmp	r0, #0
  403afa:	4623      	mov	r3, r4
  403afc:	f103 0304 	add.w	r3, r3, #4
  403b00:	f6ff ae0a 	blt.w	403718 <_svfprintf_r+0x174>
  403b04:	930f      	str	r3, [sp, #60]	; 0x3c
  403b06:	f89a 3000 	ldrb.w	r3, [sl]
  403b0a:	e5a3      	b.n	403654 <_svfprintf_r+0xb0>
  403b0c:	00408500 	.word	0x00408500
  403b10:	00408510 	.word	0x00408510
  403b14:	004084e0 	.word	0x004084e0
  403b18:	f04b 0b10 	orr.w	fp, fp, #16
  403b1c:	f01b 0f20 	tst.w	fp, #32
  403b20:	9311      	str	r3, [sp, #68]	; 0x44
  403b22:	f43f ae23 	beq.w	40376c <_svfprintf_r+0x1c8>
  403b26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b28:	3507      	adds	r5, #7
  403b2a:	f025 0307 	bic.w	r3, r5, #7
  403b2e:	f103 0208 	add.w	r2, r3, #8
  403b32:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b36:	920f      	str	r2, [sp, #60]	; 0x3c
  403b38:	2301      	movs	r3, #1
  403b3a:	e626      	b.n	40378a <_svfprintf_r+0x1e6>
  403b3c:	f89a 3000 	ldrb.w	r3, [sl]
  403b40:	2b2a      	cmp	r3, #42	; 0x2a
  403b42:	f10a 0401 	add.w	r4, sl, #1
  403b46:	f000 8727 	beq.w	404998 <_svfprintf_r+0x13f4>
  403b4a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b4e:	2809      	cmp	r0, #9
  403b50:	46a2      	mov	sl, r4
  403b52:	f200 86ad 	bhi.w	4048b0 <_svfprintf_r+0x130c>
  403b56:	2300      	movs	r3, #0
  403b58:	461c      	mov	r4, r3
  403b5a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403b5e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403b62:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403b66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b6a:	2809      	cmp	r0, #9
  403b6c:	d9f5      	bls.n	403b5a <_svfprintf_r+0x5b6>
  403b6e:	940a      	str	r4, [sp, #40]	; 0x28
  403b70:	e572      	b.n	403658 <_svfprintf_r+0xb4>
  403b72:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403b76:	f89a 3000 	ldrb.w	r3, [sl]
  403b7a:	e56b      	b.n	403654 <_svfprintf_r+0xb0>
  403b7c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403b80:	f89a 3000 	ldrb.w	r3, [sl]
  403b84:	e566      	b.n	403654 <_svfprintf_r+0xb0>
  403b86:	f89a 3000 	ldrb.w	r3, [sl]
  403b8a:	2b6c      	cmp	r3, #108	; 0x6c
  403b8c:	bf03      	ittte	eq
  403b8e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403b92:	f04b 0b20 	orreq.w	fp, fp, #32
  403b96:	f10a 0a01 	addeq.w	sl, sl, #1
  403b9a:	f04b 0b10 	orrne.w	fp, fp, #16
  403b9e:	e559      	b.n	403654 <_svfprintf_r+0xb0>
  403ba0:	2a00      	cmp	r2, #0
  403ba2:	f040 8711 	bne.w	4049c8 <_svfprintf_r+0x1424>
  403ba6:	f01b 0f20 	tst.w	fp, #32
  403baa:	f040 84f9 	bne.w	4045a0 <_svfprintf_r+0xffc>
  403bae:	f01b 0f10 	tst.w	fp, #16
  403bb2:	f040 84ac 	bne.w	40450e <_svfprintf_r+0xf6a>
  403bb6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bba:	f000 84a8 	beq.w	40450e <_svfprintf_r+0xf6a>
  403bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403bc0:	6813      	ldr	r3, [r2, #0]
  403bc2:	3204      	adds	r2, #4
  403bc4:	920f      	str	r2, [sp, #60]	; 0x3c
  403bc6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403bca:	801a      	strh	r2, [r3, #0]
  403bcc:	e511      	b.n	4035f2 <_svfprintf_r+0x4e>
  403bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bd0:	4bb3      	ldr	r3, [pc, #716]	; (403ea0 <_svfprintf_r+0x8fc>)
  403bd2:	680c      	ldr	r4, [r1, #0]
  403bd4:	9318      	str	r3, [sp, #96]	; 0x60
  403bd6:	2230      	movs	r2, #48	; 0x30
  403bd8:	2378      	movs	r3, #120	; 0x78
  403bda:	3104      	adds	r1, #4
  403bdc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403be0:	9311      	str	r3, [sp, #68]	; 0x44
  403be2:	f04b 0b02 	orr.w	fp, fp, #2
  403be6:	910f      	str	r1, [sp, #60]	; 0x3c
  403be8:	2500      	movs	r5, #0
  403bea:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403bee:	2302      	movs	r3, #2
  403bf0:	e5cb      	b.n	40378a <_svfprintf_r+0x1e6>
  403bf2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bf4:	9311      	str	r3, [sp, #68]	; 0x44
  403bf6:	680a      	ldr	r2, [r1, #0]
  403bf8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403bfc:	2300      	movs	r3, #0
  403bfe:	460a      	mov	r2, r1
  403c00:	461f      	mov	r7, r3
  403c02:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403c06:	3204      	adds	r2, #4
  403c08:	2301      	movs	r3, #1
  403c0a:	9308      	str	r3, [sp, #32]
  403c0c:	f8cd b01c 	str.w	fp, [sp, #28]
  403c10:	970a      	str	r7, [sp, #40]	; 0x28
  403c12:	9712      	str	r7, [sp, #72]	; 0x48
  403c14:	920f      	str	r2, [sp, #60]	; 0x3c
  403c16:	930e      	str	r3, [sp, #56]	; 0x38
  403c18:	ae28      	add	r6, sp, #160	; 0xa0
  403c1a:	e5df      	b.n	4037dc <_svfprintf_r+0x238>
  403c1c:	9311      	str	r3, [sp, #68]	; 0x44
  403c1e:	2a00      	cmp	r2, #0
  403c20:	f040 86ea 	bne.w	4049f8 <_svfprintf_r+0x1454>
  403c24:	f01b 0f20 	tst.w	fp, #32
  403c28:	d15d      	bne.n	403ce6 <_svfprintf_r+0x742>
  403c2a:	f01b 0f10 	tst.w	fp, #16
  403c2e:	f040 8308 	bne.w	404242 <_svfprintf_r+0xc9e>
  403c32:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c36:	f000 8304 	beq.w	404242 <_svfprintf_r+0xc9e>
  403c3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c3c:	f9b1 4000 	ldrsh.w	r4, [r1]
  403c40:	3104      	adds	r1, #4
  403c42:	17e5      	asrs	r5, r4, #31
  403c44:	4622      	mov	r2, r4
  403c46:	462b      	mov	r3, r5
  403c48:	910f      	str	r1, [sp, #60]	; 0x3c
  403c4a:	2a00      	cmp	r2, #0
  403c4c:	f173 0300 	sbcs.w	r3, r3, #0
  403c50:	db58      	blt.n	403d04 <_svfprintf_r+0x760>
  403c52:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c54:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c58:	1c4a      	adds	r2, r1, #1
  403c5a:	f04f 0301 	mov.w	r3, #1
  403c5e:	f47f ad9b 	bne.w	403798 <_svfprintf_r+0x1f4>
  403c62:	ea54 0205 	orrs.w	r2, r4, r5
  403c66:	f000 81df 	beq.w	404028 <_svfprintf_r+0xa84>
  403c6a:	f8cd b01c 	str.w	fp, [sp, #28]
  403c6e:	2b01      	cmp	r3, #1
  403c70:	f000 827b 	beq.w	40416a <_svfprintf_r+0xbc6>
  403c74:	2b02      	cmp	r3, #2
  403c76:	f040 8206 	bne.w	404086 <_svfprintf_r+0xae2>
  403c7a:	9818      	ldr	r0, [sp, #96]	; 0x60
  403c7c:	464e      	mov	r6, r9
  403c7e:	0923      	lsrs	r3, r4, #4
  403c80:	f004 010f 	and.w	r1, r4, #15
  403c84:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403c88:	092a      	lsrs	r2, r5, #4
  403c8a:	461c      	mov	r4, r3
  403c8c:	4615      	mov	r5, r2
  403c8e:	5c43      	ldrb	r3, [r0, r1]
  403c90:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403c94:	ea54 0305 	orrs.w	r3, r4, r5
  403c98:	d1f1      	bne.n	403c7e <_svfprintf_r+0x6da>
  403c9a:	eba9 0306 	sub.w	r3, r9, r6
  403c9e:	930e      	str	r3, [sp, #56]	; 0x38
  403ca0:	e590      	b.n	4037c4 <_svfprintf_r+0x220>
  403ca2:	9311      	str	r3, [sp, #68]	; 0x44
  403ca4:	2a00      	cmp	r2, #0
  403ca6:	f040 86a3 	bne.w	4049f0 <_svfprintf_r+0x144c>
  403caa:	4b7e      	ldr	r3, [pc, #504]	; (403ea4 <_svfprintf_r+0x900>)
  403cac:	9318      	str	r3, [sp, #96]	; 0x60
  403cae:	f01b 0f20 	tst.w	fp, #32
  403cb2:	f43f aeef 	beq.w	403a94 <_svfprintf_r+0x4f0>
  403cb6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403cb8:	3507      	adds	r5, #7
  403cba:	f025 0307 	bic.w	r3, r5, #7
  403cbe:	f103 0208 	add.w	r2, r3, #8
  403cc2:	f01b 0f01 	tst.w	fp, #1
  403cc6:	920f      	str	r2, [sp, #60]	; 0x3c
  403cc8:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ccc:	f47f aef4 	bne.w	403ab8 <_svfprintf_r+0x514>
  403cd0:	2302      	movs	r3, #2
  403cd2:	e55a      	b.n	40378a <_svfprintf_r+0x1e6>
  403cd4:	9311      	str	r3, [sp, #68]	; 0x44
  403cd6:	2a00      	cmp	r2, #0
  403cd8:	f040 8686 	bne.w	4049e8 <_svfprintf_r+0x1444>
  403cdc:	f04b 0b10 	orr.w	fp, fp, #16
  403ce0:	f01b 0f20 	tst.w	fp, #32
  403ce4:	d0a1      	beq.n	403c2a <_svfprintf_r+0x686>
  403ce6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ce8:	3507      	adds	r5, #7
  403cea:	f025 0507 	bic.w	r5, r5, #7
  403cee:	e9d5 2300 	ldrd	r2, r3, [r5]
  403cf2:	2a00      	cmp	r2, #0
  403cf4:	f105 0108 	add.w	r1, r5, #8
  403cf8:	461d      	mov	r5, r3
  403cfa:	f173 0300 	sbcs.w	r3, r3, #0
  403cfe:	910f      	str	r1, [sp, #60]	; 0x3c
  403d00:	4614      	mov	r4, r2
  403d02:	daa6      	bge.n	403c52 <_svfprintf_r+0x6ae>
  403d04:	272d      	movs	r7, #45	; 0x2d
  403d06:	4264      	negs	r4, r4
  403d08:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403d0c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d10:	2301      	movs	r3, #1
  403d12:	e53d      	b.n	403790 <_svfprintf_r+0x1ec>
  403d14:	9311      	str	r3, [sp, #68]	; 0x44
  403d16:	2a00      	cmp	r2, #0
  403d18:	f040 8662 	bne.w	4049e0 <_svfprintf_r+0x143c>
  403d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d1e:	3507      	adds	r5, #7
  403d20:	f025 0307 	bic.w	r3, r5, #7
  403d24:	f103 0208 	add.w	r2, r3, #8
  403d28:	920f      	str	r2, [sp, #60]	; 0x3c
  403d2a:	681a      	ldr	r2, [r3, #0]
  403d2c:	9215      	str	r2, [sp, #84]	; 0x54
  403d2e:	685b      	ldr	r3, [r3, #4]
  403d30:	9314      	str	r3, [sp, #80]	; 0x50
  403d32:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403d34:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403d36:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403d3a:	4628      	mov	r0, r5
  403d3c:	4621      	mov	r1, r4
  403d3e:	f04f 32ff 	mov.w	r2, #4294967295
  403d42:	4b59      	ldr	r3, [pc, #356]	; (403ea8 <_svfprintf_r+0x904>)
  403d44:	f003 fe50 	bl	4079e8 <__aeabi_dcmpun>
  403d48:	2800      	cmp	r0, #0
  403d4a:	f040 834a 	bne.w	4043e2 <_svfprintf_r+0xe3e>
  403d4e:	4628      	mov	r0, r5
  403d50:	4621      	mov	r1, r4
  403d52:	f04f 32ff 	mov.w	r2, #4294967295
  403d56:	4b54      	ldr	r3, [pc, #336]	; (403ea8 <_svfprintf_r+0x904>)
  403d58:	f003 fe28 	bl	4079ac <__aeabi_dcmple>
  403d5c:	2800      	cmp	r0, #0
  403d5e:	f040 8340 	bne.w	4043e2 <_svfprintf_r+0xe3e>
  403d62:	a815      	add	r0, sp, #84	; 0x54
  403d64:	c80d      	ldmia	r0, {r0, r2, r3}
  403d66:	9914      	ldr	r1, [sp, #80]	; 0x50
  403d68:	f003 fe16 	bl	407998 <__aeabi_dcmplt>
  403d6c:	2800      	cmp	r0, #0
  403d6e:	f040 8530 	bne.w	4047d2 <_svfprintf_r+0x122e>
  403d72:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d76:	4e4d      	ldr	r6, [pc, #308]	; (403eac <_svfprintf_r+0x908>)
  403d78:	4b4d      	ldr	r3, [pc, #308]	; (403eb0 <_svfprintf_r+0x90c>)
  403d7a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403d7e:	9007      	str	r0, [sp, #28]
  403d80:	9811      	ldr	r0, [sp, #68]	; 0x44
  403d82:	2203      	movs	r2, #3
  403d84:	2100      	movs	r1, #0
  403d86:	9208      	str	r2, [sp, #32]
  403d88:	910a      	str	r1, [sp, #40]	; 0x28
  403d8a:	2847      	cmp	r0, #71	; 0x47
  403d8c:	bfd8      	it	le
  403d8e:	461e      	movle	r6, r3
  403d90:	920e      	str	r2, [sp, #56]	; 0x38
  403d92:	9112      	str	r1, [sp, #72]	; 0x48
  403d94:	e51e      	b.n	4037d4 <_svfprintf_r+0x230>
  403d96:	f04b 0b08 	orr.w	fp, fp, #8
  403d9a:	f89a 3000 	ldrb.w	r3, [sl]
  403d9e:	e459      	b.n	403654 <_svfprintf_r+0xb0>
  403da0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403da4:	2300      	movs	r3, #0
  403da6:	461c      	mov	r4, r3
  403da8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403dac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403db0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403db4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403db8:	2809      	cmp	r0, #9
  403dba:	d9f5      	bls.n	403da8 <_svfprintf_r+0x804>
  403dbc:	940d      	str	r4, [sp, #52]	; 0x34
  403dbe:	e44b      	b.n	403658 <_svfprintf_r+0xb4>
  403dc0:	f04b 0b10 	orr.w	fp, fp, #16
  403dc4:	9311      	str	r3, [sp, #68]	; 0x44
  403dc6:	f01b 0320 	ands.w	r3, fp, #32
  403dca:	f43f ae1d 	beq.w	403a08 <_svfprintf_r+0x464>
  403dce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403dd0:	3507      	adds	r5, #7
  403dd2:	f025 0307 	bic.w	r3, r5, #7
  403dd6:	f103 0208 	add.w	r2, r3, #8
  403dda:	e9d3 4500 	ldrd	r4, r5, [r3]
  403dde:	920f      	str	r2, [sp, #60]	; 0x3c
  403de0:	2300      	movs	r3, #0
  403de2:	e4d2      	b.n	40378a <_svfprintf_r+0x1e6>
  403de4:	9311      	str	r3, [sp, #68]	; 0x44
  403de6:	2a00      	cmp	r2, #0
  403de8:	f040 85e7 	bne.w	4049ba <_svfprintf_r+0x1416>
  403dec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403dee:	2a00      	cmp	r2, #0
  403df0:	f43f aca3 	beq.w	40373a <_svfprintf_r+0x196>
  403df4:	2300      	movs	r3, #0
  403df6:	2101      	movs	r1, #1
  403df8:	461f      	mov	r7, r3
  403dfa:	9108      	str	r1, [sp, #32]
  403dfc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403e00:	f8cd b01c 	str.w	fp, [sp, #28]
  403e04:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403e08:	930a      	str	r3, [sp, #40]	; 0x28
  403e0a:	9312      	str	r3, [sp, #72]	; 0x48
  403e0c:	910e      	str	r1, [sp, #56]	; 0x38
  403e0e:	ae28      	add	r6, sp, #160	; 0xa0
  403e10:	e4e4      	b.n	4037dc <_svfprintf_r+0x238>
  403e12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e14:	e534      	b.n	403880 <_svfprintf_r+0x2dc>
  403e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e18:	2b65      	cmp	r3, #101	; 0x65
  403e1a:	f340 80a7 	ble.w	403f6c <_svfprintf_r+0x9c8>
  403e1e:	a815      	add	r0, sp, #84	; 0x54
  403e20:	c80d      	ldmia	r0, {r0, r2, r3}
  403e22:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e24:	f003 fdae 	bl	407984 <__aeabi_dcmpeq>
  403e28:	2800      	cmp	r0, #0
  403e2a:	f000 8150 	beq.w	4040ce <_svfprintf_r+0xb2a>
  403e2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e30:	4a20      	ldr	r2, [pc, #128]	; (403eb4 <_svfprintf_r+0x910>)
  403e32:	f8c8 2000 	str.w	r2, [r8]
  403e36:	3301      	adds	r3, #1
  403e38:	3401      	adds	r4, #1
  403e3a:	2201      	movs	r2, #1
  403e3c:	2b07      	cmp	r3, #7
  403e3e:	9427      	str	r4, [sp, #156]	; 0x9c
  403e40:	9326      	str	r3, [sp, #152]	; 0x98
  403e42:	f8c8 2004 	str.w	r2, [r8, #4]
  403e46:	f300 836a 	bgt.w	40451e <_svfprintf_r+0xf7a>
  403e4a:	f108 0808 	add.w	r8, r8, #8
  403e4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403e52:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e54:	4293      	cmp	r3, r2
  403e56:	db03      	blt.n	403e60 <_svfprintf_r+0x8bc>
  403e58:	9b07      	ldr	r3, [sp, #28]
  403e5a:	07dd      	lsls	r5, r3, #31
  403e5c:	f57f ad82 	bpl.w	403964 <_svfprintf_r+0x3c0>
  403e60:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e62:	9919      	ldr	r1, [sp, #100]	; 0x64
  403e64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403e66:	f8c8 2000 	str.w	r2, [r8]
  403e6a:	3301      	adds	r3, #1
  403e6c:	440c      	add	r4, r1
  403e6e:	2b07      	cmp	r3, #7
  403e70:	f8c8 1004 	str.w	r1, [r8, #4]
  403e74:	9427      	str	r4, [sp, #156]	; 0x9c
  403e76:	9326      	str	r3, [sp, #152]	; 0x98
  403e78:	f300 839e 	bgt.w	4045b8 <_svfprintf_r+0x1014>
  403e7c:	f108 0808 	add.w	r8, r8, #8
  403e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e82:	1e5e      	subs	r6, r3, #1
  403e84:	2e00      	cmp	r6, #0
  403e86:	f77f ad6d 	ble.w	403964 <_svfprintf_r+0x3c0>
  403e8a:	2e10      	cmp	r6, #16
  403e8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e8e:	4d0a      	ldr	r5, [pc, #40]	; (403eb8 <_svfprintf_r+0x914>)
  403e90:	f340 81f5 	ble.w	40427e <_svfprintf_r+0xcda>
  403e94:	4622      	mov	r2, r4
  403e96:	2710      	movs	r7, #16
  403e98:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403e9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403e9e:	e013      	b.n	403ec8 <_svfprintf_r+0x924>
  403ea0:	004084e0 	.word	0x004084e0
  403ea4:	004084cc 	.word	0x004084cc
  403ea8:	7fefffff 	.word	0x7fefffff
  403eac:	004084c0 	.word	0x004084c0
  403eb0:	004084bc 	.word	0x004084bc
  403eb4:	004084fc 	.word	0x004084fc
  403eb8:	00408510 	.word	0x00408510
  403ebc:	f108 0808 	add.w	r8, r8, #8
  403ec0:	3e10      	subs	r6, #16
  403ec2:	2e10      	cmp	r6, #16
  403ec4:	f340 81da 	ble.w	40427c <_svfprintf_r+0xcd8>
  403ec8:	3301      	adds	r3, #1
  403eca:	3210      	adds	r2, #16
  403ecc:	2b07      	cmp	r3, #7
  403ece:	9227      	str	r2, [sp, #156]	; 0x9c
  403ed0:	9326      	str	r3, [sp, #152]	; 0x98
  403ed2:	e888 00a0 	stmia.w	r8, {r5, r7}
  403ed6:	ddf1      	ble.n	403ebc <_svfprintf_r+0x918>
  403ed8:	aa25      	add	r2, sp, #148	; 0x94
  403eda:	4621      	mov	r1, r4
  403edc:	4658      	mov	r0, fp
  403ede:	f002 fcbd 	bl	40685c <__ssprint_r>
  403ee2:	2800      	cmp	r0, #0
  403ee4:	f47f ac30 	bne.w	403748 <_svfprintf_r+0x1a4>
  403ee8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eec:	46c8      	mov	r8, r9
  403eee:	e7e7      	b.n	403ec0 <_svfprintf_r+0x91c>
  403ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ef2:	9a08      	ldr	r2, [sp, #32]
  403ef4:	1a9f      	subs	r7, r3, r2
  403ef6:	2f00      	cmp	r7, #0
  403ef8:	f77f ace5 	ble.w	4038c6 <_svfprintf_r+0x322>
  403efc:	2f10      	cmp	r7, #16
  403efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f00:	4db6      	ldr	r5, [pc, #728]	; (4041dc <_svfprintf_r+0xc38>)
  403f02:	dd27      	ble.n	403f54 <_svfprintf_r+0x9b0>
  403f04:	4642      	mov	r2, r8
  403f06:	4621      	mov	r1, r4
  403f08:	46b0      	mov	r8, r6
  403f0a:	f04f 0b10 	mov.w	fp, #16
  403f0e:	462e      	mov	r6, r5
  403f10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f14:	e004      	b.n	403f20 <_svfprintf_r+0x97c>
  403f16:	3f10      	subs	r7, #16
  403f18:	2f10      	cmp	r7, #16
  403f1a:	f102 0208 	add.w	r2, r2, #8
  403f1e:	dd15      	ble.n	403f4c <_svfprintf_r+0x9a8>
  403f20:	3301      	adds	r3, #1
  403f22:	3110      	adds	r1, #16
  403f24:	2b07      	cmp	r3, #7
  403f26:	9127      	str	r1, [sp, #156]	; 0x9c
  403f28:	9326      	str	r3, [sp, #152]	; 0x98
  403f2a:	e882 0840 	stmia.w	r2, {r6, fp}
  403f2e:	ddf2      	ble.n	403f16 <_svfprintf_r+0x972>
  403f30:	aa25      	add	r2, sp, #148	; 0x94
  403f32:	4629      	mov	r1, r5
  403f34:	4620      	mov	r0, r4
  403f36:	f002 fc91 	bl	40685c <__ssprint_r>
  403f3a:	2800      	cmp	r0, #0
  403f3c:	f47f ac04 	bne.w	403748 <_svfprintf_r+0x1a4>
  403f40:	3f10      	subs	r7, #16
  403f42:	2f10      	cmp	r7, #16
  403f44:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f48:	464a      	mov	r2, r9
  403f4a:	dce9      	bgt.n	403f20 <_svfprintf_r+0x97c>
  403f4c:	4635      	mov	r5, r6
  403f4e:	460c      	mov	r4, r1
  403f50:	4646      	mov	r6, r8
  403f52:	4690      	mov	r8, r2
  403f54:	3301      	adds	r3, #1
  403f56:	443c      	add	r4, r7
  403f58:	2b07      	cmp	r3, #7
  403f5a:	9427      	str	r4, [sp, #156]	; 0x9c
  403f5c:	9326      	str	r3, [sp, #152]	; 0x98
  403f5e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f62:	f300 8232 	bgt.w	4043ca <_svfprintf_r+0xe26>
  403f66:	f108 0808 	add.w	r8, r8, #8
  403f6a:	e4ac      	b.n	4038c6 <_svfprintf_r+0x322>
  403f6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f6e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403f70:	2b01      	cmp	r3, #1
  403f72:	f340 81fe 	ble.w	404372 <_svfprintf_r+0xdce>
  403f76:	3701      	adds	r7, #1
  403f78:	3401      	adds	r4, #1
  403f7a:	2301      	movs	r3, #1
  403f7c:	2f07      	cmp	r7, #7
  403f7e:	9427      	str	r4, [sp, #156]	; 0x9c
  403f80:	9726      	str	r7, [sp, #152]	; 0x98
  403f82:	f8c8 6000 	str.w	r6, [r8]
  403f86:	f8c8 3004 	str.w	r3, [r8, #4]
  403f8a:	f300 8203 	bgt.w	404394 <_svfprintf_r+0xdf0>
  403f8e:	f108 0808 	add.w	r8, r8, #8
  403f92:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403f94:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403f96:	f8c8 3000 	str.w	r3, [r8]
  403f9a:	3701      	adds	r7, #1
  403f9c:	4414      	add	r4, r2
  403f9e:	2f07      	cmp	r7, #7
  403fa0:	9427      	str	r4, [sp, #156]	; 0x9c
  403fa2:	9726      	str	r7, [sp, #152]	; 0x98
  403fa4:	f8c8 2004 	str.w	r2, [r8, #4]
  403fa8:	f300 8200 	bgt.w	4043ac <_svfprintf_r+0xe08>
  403fac:	f108 0808 	add.w	r8, r8, #8
  403fb0:	a815      	add	r0, sp, #84	; 0x54
  403fb2:	c80d      	ldmia	r0, {r0, r2, r3}
  403fb4:	9914      	ldr	r1, [sp, #80]	; 0x50
  403fb6:	f003 fce5 	bl	407984 <__aeabi_dcmpeq>
  403fba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403fbc:	2800      	cmp	r0, #0
  403fbe:	f040 8101 	bne.w	4041c4 <_svfprintf_r+0xc20>
  403fc2:	3b01      	subs	r3, #1
  403fc4:	3701      	adds	r7, #1
  403fc6:	3601      	adds	r6, #1
  403fc8:	441c      	add	r4, r3
  403fca:	2f07      	cmp	r7, #7
  403fcc:	9726      	str	r7, [sp, #152]	; 0x98
  403fce:	9427      	str	r4, [sp, #156]	; 0x9c
  403fd0:	f8c8 6000 	str.w	r6, [r8]
  403fd4:	f8c8 3004 	str.w	r3, [r8, #4]
  403fd8:	f300 8127 	bgt.w	40422a <_svfprintf_r+0xc86>
  403fdc:	f108 0808 	add.w	r8, r8, #8
  403fe0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403fe2:	f8c8 2004 	str.w	r2, [r8, #4]
  403fe6:	3701      	adds	r7, #1
  403fe8:	4414      	add	r4, r2
  403fea:	ab21      	add	r3, sp, #132	; 0x84
  403fec:	2f07      	cmp	r7, #7
  403fee:	9427      	str	r4, [sp, #156]	; 0x9c
  403ff0:	9726      	str	r7, [sp, #152]	; 0x98
  403ff2:	f8c8 3000 	str.w	r3, [r8]
  403ff6:	f77f acb3 	ble.w	403960 <_svfprintf_r+0x3bc>
  403ffa:	aa25      	add	r2, sp, #148	; 0x94
  403ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404000:	f002 fc2c 	bl	40685c <__ssprint_r>
  404004:	2800      	cmp	r0, #0
  404006:	f47f ab9f 	bne.w	403748 <_svfprintf_r+0x1a4>
  40400a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40400c:	46c8      	mov	r8, r9
  40400e:	e4a9      	b.n	403964 <_svfprintf_r+0x3c0>
  404010:	aa25      	add	r2, sp, #148	; 0x94
  404012:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404014:	980c      	ldr	r0, [sp, #48]	; 0x30
  404016:	f002 fc21 	bl	40685c <__ssprint_r>
  40401a:	2800      	cmp	r0, #0
  40401c:	f43f aceb 	beq.w	4039f6 <_svfprintf_r+0x452>
  404020:	f7ff bb92 	b.w	403748 <_svfprintf_r+0x1a4>
  404024:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404028:	2b01      	cmp	r3, #1
  40402a:	f000 8134 	beq.w	404296 <_svfprintf_r+0xcf2>
  40402e:	2b02      	cmp	r3, #2
  404030:	d125      	bne.n	40407e <_svfprintf_r+0xada>
  404032:	f8cd b01c 	str.w	fp, [sp, #28]
  404036:	2400      	movs	r4, #0
  404038:	2500      	movs	r5, #0
  40403a:	e61e      	b.n	403c7a <_svfprintf_r+0x6d6>
  40403c:	aa25      	add	r2, sp, #148	; 0x94
  40403e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404040:	980c      	ldr	r0, [sp, #48]	; 0x30
  404042:	f002 fc0b 	bl	40685c <__ssprint_r>
  404046:	2800      	cmp	r0, #0
  404048:	f47f ab7e 	bne.w	403748 <_svfprintf_r+0x1a4>
  40404c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40404e:	46c8      	mov	r8, r9
  404050:	e475      	b.n	40393e <_svfprintf_r+0x39a>
  404052:	aa25      	add	r2, sp, #148	; 0x94
  404054:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404056:	980c      	ldr	r0, [sp, #48]	; 0x30
  404058:	f002 fc00 	bl	40685c <__ssprint_r>
  40405c:	2800      	cmp	r0, #0
  40405e:	f47f ab73 	bne.w	403748 <_svfprintf_r+0x1a4>
  404062:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404064:	46c8      	mov	r8, r9
  404066:	e41b      	b.n	4038a0 <_svfprintf_r+0x2fc>
  404068:	aa25      	add	r2, sp, #148	; 0x94
  40406a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40406c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40406e:	f002 fbf5 	bl	40685c <__ssprint_r>
  404072:	2800      	cmp	r0, #0
  404074:	f47f ab68 	bne.w	403748 <_svfprintf_r+0x1a4>
  404078:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40407a:	46c8      	mov	r8, r9
  40407c:	e420      	b.n	4038c0 <_svfprintf_r+0x31c>
  40407e:	f8cd b01c 	str.w	fp, [sp, #28]
  404082:	2400      	movs	r4, #0
  404084:	2500      	movs	r5, #0
  404086:	4649      	mov	r1, r9
  404088:	e000      	b.n	40408c <_svfprintf_r+0xae8>
  40408a:	4631      	mov	r1, r6
  40408c:	08e2      	lsrs	r2, r4, #3
  40408e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404092:	08e8      	lsrs	r0, r5, #3
  404094:	f004 0307 	and.w	r3, r4, #7
  404098:	4605      	mov	r5, r0
  40409a:	4614      	mov	r4, r2
  40409c:	3330      	adds	r3, #48	; 0x30
  40409e:	ea54 0205 	orrs.w	r2, r4, r5
  4040a2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4040a6:	f101 36ff 	add.w	r6, r1, #4294967295
  4040aa:	d1ee      	bne.n	40408a <_svfprintf_r+0xae6>
  4040ac:	9a07      	ldr	r2, [sp, #28]
  4040ae:	07d2      	lsls	r2, r2, #31
  4040b0:	f57f adf3 	bpl.w	403c9a <_svfprintf_r+0x6f6>
  4040b4:	2b30      	cmp	r3, #48	; 0x30
  4040b6:	f43f adf0 	beq.w	403c9a <_svfprintf_r+0x6f6>
  4040ba:	3902      	subs	r1, #2
  4040bc:	2330      	movs	r3, #48	; 0x30
  4040be:	f806 3c01 	strb.w	r3, [r6, #-1]
  4040c2:	eba9 0301 	sub.w	r3, r9, r1
  4040c6:	930e      	str	r3, [sp, #56]	; 0x38
  4040c8:	460e      	mov	r6, r1
  4040ca:	f7ff bb7b 	b.w	4037c4 <_svfprintf_r+0x220>
  4040ce:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4040d0:	2900      	cmp	r1, #0
  4040d2:	f340 822e 	ble.w	404532 <_svfprintf_r+0xf8e>
  4040d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4040da:	4293      	cmp	r3, r2
  4040dc:	bfa8      	it	ge
  4040de:	4613      	movge	r3, r2
  4040e0:	2b00      	cmp	r3, #0
  4040e2:	461f      	mov	r7, r3
  4040e4:	dd0d      	ble.n	404102 <_svfprintf_r+0xb5e>
  4040e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040e8:	f8c8 6000 	str.w	r6, [r8]
  4040ec:	3301      	adds	r3, #1
  4040ee:	443c      	add	r4, r7
  4040f0:	2b07      	cmp	r3, #7
  4040f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4040f4:	f8c8 7004 	str.w	r7, [r8, #4]
  4040f8:	9326      	str	r3, [sp, #152]	; 0x98
  4040fa:	f300 831f 	bgt.w	40473c <_svfprintf_r+0x1198>
  4040fe:	f108 0808 	add.w	r8, r8, #8
  404102:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404104:	2f00      	cmp	r7, #0
  404106:	bfa8      	it	ge
  404108:	1bdb      	subge	r3, r3, r7
  40410a:	2b00      	cmp	r3, #0
  40410c:	461f      	mov	r7, r3
  40410e:	f340 80d6 	ble.w	4042be <_svfprintf_r+0xd1a>
  404112:	2f10      	cmp	r7, #16
  404114:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404116:	4d31      	ldr	r5, [pc, #196]	; (4041dc <_svfprintf_r+0xc38>)
  404118:	f340 81ed 	ble.w	4044f6 <_svfprintf_r+0xf52>
  40411c:	4642      	mov	r2, r8
  40411e:	4621      	mov	r1, r4
  404120:	46b0      	mov	r8, r6
  404122:	f04f 0b10 	mov.w	fp, #16
  404126:	462e      	mov	r6, r5
  404128:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40412a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40412c:	e004      	b.n	404138 <_svfprintf_r+0xb94>
  40412e:	3208      	adds	r2, #8
  404130:	3f10      	subs	r7, #16
  404132:	2f10      	cmp	r7, #16
  404134:	f340 81db 	ble.w	4044ee <_svfprintf_r+0xf4a>
  404138:	3301      	adds	r3, #1
  40413a:	3110      	adds	r1, #16
  40413c:	2b07      	cmp	r3, #7
  40413e:	9127      	str	r1, [sp, #156]	; 0x9c
  404140:	9326      	str	r3, [sp, #152]	; 0x98
  404142:	e882 0840 	stmia.w	r2, {r6, fp}
  404146:	ddf2      	ble.n	40412e <_svfprintf_r+0xb8a>
  404148:	aa25      	add	r2, sp, #148	; 0x94
  40414a:	4629      	mov	r1, r5
  40414c:	4620      	mov	r0, r4
  40414e:	f002 fb85 	bl	40685c <__ssprint_r>
  404152:	2800      	cmp	r0, #0
  404154:	f47f aaf8 	bne.w	403748 <_svfprintf_r+0x1a4>
  404158:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40415a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40415c:	464a      	mov	r2, r9
  40415e:	e7e7      	b.n	404130 <_svfprintf_r+0xb8c>
  404160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404162:	930e      	str	r3, [sp, #56]	; 0x38
  404164:	464e      	mov	r6, r9
  404166:	f7ff bb2d 	b.w	4037c4 <_svfprintf_r+0x220>
  40416a:	2d00      	cmp	r5, #0
  40416c:	bf08      	it	eq
  40416e:	2c0a      	cmpeq	r4, #10
  404170:	f0c0 808f 	bcc.w	404292 <_svfprintf_r+0xcee>
  404174:	464e      	mov	r6, r9
  404176:	4620      	mov	r0, r4
  404178:	4629      	mov	r1, r5
  40417a:	220a      	movs	r2, #10
  40417c:	2300      	movs	r3, #0
  40417e:	f7fe ffed 	bl	40315c <__aeabi_uldivmod>
  404182:	3230      	adds	r2, #48	; 0x30
  404184:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404188:	4620      	mov	r0, r4
  40418a:	4629      	mov	r1, r5
  40418c:	2300      	movs	r3, #0
  40418e:	220a      	movs	r2, #10
  404190:	f7fe ffe4 	bl	40315c <__aeabi_uldivmod>
  404194:	4604      	mov	r4, r0
  404196:	460d      	mov	r5, r1
  404198:	ea54 0305 	orrs.w	r3, r4, r5
  40419c:	d1eb      	bne.n	404176 <_svfprintf_r+0xbd2>
  40419e:	eba9 0306 	sub.w	r3, r9, r6
  4041a2:	930e      	str	r3, [sp, #56]	; 0x38
  4041a4:	f7ff bb0e 	b.w	4037c4 <_svfprintf_r+0x220>
  4041a8:	aa25      	add	r2, sp, #148	; 0x94
  4041aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041ae:	f002 fb55 	bl	40685c <__ssprint_r>
  4041b2:	2800      	cmp	r0, #0
  4041b4:	f47f aac8 	bne.w	403748 <_svfprintf_r+0x1a4>
  4041b8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041be:	46c8      	mov	r8, r9
  4041c0:	f7ff bb5e 	b.w	403880 <_svfprintf_r+0x2dc>
  4041c4:	1e5e      	subs	r6, r3, #1
  4041c6:	2e00      	cmp	r6, #0
  4041c8:	f77f af0a 	ble.w	403fe0 <_svfprintf_r+0xa3c>
  4041cc:	2e10      	cmp	r6, #16
  4041ce:	4d03      	ldr	r5, [pc, #12]	; (4041dc <_svfprintf_r+0xc38>)
  4041d0:	dd22      	ble.n	404218 <_svfprintf_r+0xc74>
  4041d2:	4622      	mov	r2, r4
  4041d4:	f04f 0b10 	mov.w	fp, #16
  4041d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041da:	e006      	b.n	4041ea <_svfprintf_r+0xc46>
  4041dc:	00408510 	.word	0x00408510
  4041e0:	3e10      	subs	r6, #16
  4041e2:	2e10      	cmp	r6, #16
  4041e4:	f108 0808 	add.w	r8, r8, #8
  4041e8:	dd15      	ble.n	404216 <_svfprintf_r+0xc72>
  4041ea:	3701      	adds	r7, #1
  4041ec:	3210      	adds	r2, #16
  4041ee:	2f07      	cmp	r7, #7
  4041f0:	9227      	str	r2, [sp, #156]	; 0x9c
  4041f2:	9726      	str	r7, [sp, #152]	; 0x98
  4041f4:	e888 0820 	stmia.w	r8, {r5, fp}
  4041f8:	ddf2      	ble.n	4041e0 <_svfprintf_r+0xc3c>
  4041fa:	aa25      	add	r2, sp, #148	; 0x94
  4041fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041fe:	4620      	mov	r0, r4
  404200:	f002 fb2c 	bl	40685c <__ssprint_r>
  404204:	2800      	cmp	r0, #0
  404206:	f47f aa9f 	bne.w	403748 <_svfprintf_r+0x1a4>
  40420a:	3e10      	subs	r6, #16
  40420c:	2e10      	cmp	r6, #16
  40420e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404210:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404212:	46c8      	mov	r8, r9
  404214:	dce9      	bgt.n	4041ea <_svfprintf_r+0xc46>
  404216:	4614      	mov	r4, r2
  404218:	3701      	adds	r7, #1
  40421a:	4434      	add	r4, r6
  40421c:	2f07      	cmp	r7, #7
  40421e:	9427      	str	r4, [sp, #156]	; 0x9c
  404220:	9726      	str	r7, [sp, #152]	; 0x98
  404222:	e888 0060 	stmia.w	r8, {r5, r6}
  404226:	f77f aed9 	ble.w	403fdc <_svfprintf_r+0xa38>
  40422a:	aa25      	add	r2, sp, #148	; 0x94
  40422c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40422e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404230:	f002 fb14 	bl	40685c <__ssprint_r>
  404234:	2800      	cmp	r0, #0
  404236:	f47f aa87 	bne.w	403748 <_svfprintf_r+0x1a4>
  40423a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40423c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40423e:	46c8      	mov	r8, r9
  404240:	e6ce      	b.n	403fe0 <_svfprintf_r+0xa3c>
  404242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404244:	6814      	ldr	r4, [r2, #0]
  404246:	4613      	mov	r3, r2
  404248:	3304      	adds	r3, #4
  40424a:	17e5      	asrs	r5, r4, #31
  40424c:	930f      	str	r3, [sp, #60]	; 0x3c
  40424e:	4622      	mov	r2, r4
  404250:	462b      	mov	r3, r5
  404252:	e4fa      	b.n	403c4a <_svfprintf_r+0x6a6>
  404254:	3204      	adds	r2, #4
  404256:	681c      	ldr	r4, [r3, #0]
  404258:	920f      	str	r2, [sp, #60]	; 0x3c
  40425a:	2301      	movs	r3, #1
  40425c:	2500      	movs	r5, #0
  40425e:	f7ff ba94 	b.w	40378a <_svfprintf_r+0x1e6>
  404262:	681c      	ldr	r4, [r3, #0]
  404264:	3304      	adds	r3, #4
  404266:	930f      	str	r3, [sp, #60]	; 0x3c
  404268:	2500      	movs	r5, #0
  40426a:	e421      	b.n	403ab0 <_svfprintf_r+0x50c>
  40426c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40426e:	460a      	mov	r2, r1
  404270:	3204      	adds	r2, #4
  404272:	680c      	ldr	r4, [r1, #0]
  404274:	920f      	str	r2, [sp, #60]	; 0x3c
  404276:	2500      	movs	r5, #0
  404278:	f7ff ba87 	b.w	40378a <_svfprintf_r+0x1e6>
  40427c:	4614      	mov	r4, r2
  40427e:	3301      	adds	r3, #1
  404280:	4434      	add	r4, r6
  404282:	2b07      	cmp	r3, #7
  404284:	9427      	str	r4, [sp, #156]	; 0x9c
  404286:	9326      	str	r3, [sp, #152]	; 0x98
  404288:	e888 0060 	stmia.w	r8, {r5, r6}
  40428c:	f77f ab68 	ble.w	403960 <_svfprintf_r+0x3bc>
  404290:	e6b3      	b.n	403ffa <_svfprintf_r+0xa56>
  404292:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404296:	f8cd b01c 	str.w	fp, [sp, #28]
  40429a:	ae42      	add	r6, sp, #264	; 0x108
  40429c:	3430      	adds	r4, #48	; 0x30
  40429e:	2301      	movs	r3, #1
  4042a0:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4042a4:	930e      	str	r3, [sp, #56]	; 0x38
  4042a6:	f7ff ba8d 	b.w	4037c4 <_svfprintf_r+0x220>
  4042aa:	aa25      	add	r2, sp, #148	; 0x94
  4042ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042b0:	f002 fad4 	bl	40685c <__ssprint_r>
  4042b4:	2800      	cmp	r0, #0
  4042b6:	f47f aa47 	bne.w	403748 <_svfprintf_r+0x1a4>
  4042ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042bc:	46c8      	mov	r8, r9
  4042be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4042c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042c2:	429a      	cmp	r2, r3
  4042c4:	db44      	blt.n	404350 <_svfprintf_r+0xdac>
  4042c6:	9b07      	ldr	r3, [sp, #28]
  4042c8:	07d9      	lsls	r1, r3, #31
  4042ca:	d441      	bmi.n	404350 <_svfprintf_r+0xdac>
  4042cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042ce:	9812      	ldr	r0, [sp, #72]	; 0x48
  4042d0:	1a9a      	subs	r2, r3, r2
  4042d2:	1a1d      	subs	r5, r3, r0
  4042d4:	4295      	cmp	r5, r2
  4042d6:	bfa8      	it	ge
  4042d8:	4615      	movge	r5, r2
  4042da:	2d00      	cmp	r5, #0
  4042dc:	dd0e      	ble.n	4042fc <_svfprintf_r+0xd58>
  4042de:	9926      	ldr	r1, [sp, #152]	; 0x98
  4042e0:	f8c8 5004 	str.w	r5, [r8, #4]
  4042e4:	3101      	adds	r1, #1
  4042e6:	4406      	add	r6, r0
  4042e8:	442c      	add	r4, r5
  4042ea:	2907      	cmp	r1, #7
  4042ec:	f8c8 6000 	str.w	r6, [r8]
  4042f0:	9427      	str	r4, [sp, #156]	; 0x9c
  4042f2:	9126      	str	r1, [sp, #152]	; 0x98
  4042f4:	f300 823b 	bgt.w	40476e <_svfprintf_r+0x11ca>
  4042f8:	f108 0808 	add.w	r8, r8, #8
  4042fc:	2d00      	cmp	r5, #0
  4042fe:	bfac      	ite	ge
  404300:	1b56      	subge	r6, r2, r5
  404302:	4616      	movlt	r6, r2
  404304:	2e00      	cmp	r6, #0
  404306:	f77f ab2d 	ble.w	403964 <_svfprintf_r+0x3c0>
  40430a:	2e10      	cmp	r6, #16
  40430c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40430e:	4db0      	ldr	r5, [pc, #704]	; (4045d0 <_svfprintf_r+0x102c>)
  404310:	ddb5      	ble.n	40427e <_svfprintf_r+0xcda>
  404312:	4622      	mov	r2, r4
  404314:	2710      	movs	r7, #16
  404316:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40431a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40431c:	e004      	b.n	404328 <_svfprintf_r+0xd84>
  40431e:	f108 0808 	add.w	r8, r8, #8
  404322:	3e10      	subs	r6, #16
  404324:	2e10      	cmp	r6, #16
  404326:	dda9      	ble.n	40427c <_svfprintf_r+0xcd8>
  404328:	3301      	adds	r3, #1
  40432a:	3210      	adds	r2, #16
  40432c:	2b07      	cmp	r3, #7
  40432e:	9227      	str	r2, [sp, #156]	; 0x9c
  404330:	9326      	str	r3, [sp, #152]	; 0x98
  404332:	e888 00a0 	stmia.w	r8, {r5, r7}
  404336:	ddf2      	ble.n	40431e <_svfprintf_r+0xd7a>
  404338:	aa25      	add	r2, sp, #148	; 0x94
  40433a:	4621      	mov	r1, r4
  40433c:	4658      	mov	r0, fp
  40433e:	f002 fa8d 	bl	40685c <__ssprint_r>
  404342:	2800      	cmp	r0, #0
  404344:	f47f aa00 	bne.w	403748 <_svfprintf_r+0x1a4>
  404348:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40434a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434c:	46c8      	mov	r8, r9
  40434e:	e7e8      	b.n	404322 <_svfprintf_r+0xd7e>
  404350:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404352:	9819      	ldr	r0, [sp, #100]	; 0x64
  404354:	991a      	ldr	r1, [sp, #104]	; 0x68
  404356:	f8c8 1000 	str.w	r1, [r8]
  40435a:	3301      	adds	r3, #1
  40435c:	4404      	add	r4, r0
  40435e:	2b07      	cmp	r3, #7
  404360:	9427      	str	r4, [sp, #156]	; 0x9c
  404362:	f8c8 0004 	str.w	r0, [r8, #4]
  404366:	9326      	str	r3, [sp, #152]	; 0x98
  404368:	f300 81f5 	bgt.w	404756 <_svfprintf_r+0x11b2>
  40436c:	f108 0808 	add.w	r8, r8, #8
  404370:	e7ac      	b.n	4042cc <_svfprintf_r+0xd28>
  404372:	9b07      	ldr	r3, [sp, #28]
  404374:	07da      	lsls	r2, r3, #31
  404376:	f53f adfe 	bmi.w	403f76 <_svfprintf_r+0x9d2>
  40437a:	3701      	adds	r7, #1
  40437c:	3401      	adds	r4, #1
  40437e:	2301      	movs	r3, #1
  404380:	2f07      	cmp	r7, #7
  404382:	9427      	str	r4, [sp, #156]	; 0x9c
  404384:	9726      	str	r7, [sp, #152]	; 0x98
  404386:	f8c8 6000 	str.w	r6, [r8]
  40438a:	f8c8 3004 	str.w	r3, [r8, #4]
  40438e:	f77f ae25 	ble.w	403fdc <_svfprintf_r+0xa38>
  404392:	e74a      	b.n	40422a <_svfprintf_r+0xc86>
  404394:	aa25      	add	r2, sp, #148	; 0x94
  404396:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404398:	980c      	ldr	r0, [sp, #48]	; 0x30
  40439a:	f002 fa5f 	bl	40685c <__ssprint_r>
  40439e:	2800      	cmp	r0, #0
  4043a0:	f47f a9d2 	bne.w	403748 <_svfprintf_r+0x1a4>
  4043a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043a6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043a8:	46c8      	mov	r8, r9
  4043aa:	e5f2      	b.n	403f92 <_svfprintf_r+0x9ee>
  4043ac:	aa25      	add	r2, sp, #148	; 0x94
  4043ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043b2:	f002 fa53 	bl	40685c <__ssprint_r>
  4043b6:	2800      	cmp	r0, #0
  4043b8:	f47f a9c6 	bne.w	403748 <_svfprintf_r+0x1a4>
  4043bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043be:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043c0:	46c8      	mov	r8, r9
  4043c2:	e5f5      	b.n	403fb0 <_svfprintf_r+0xa0c>
  4043c4:	464e      	mov	r6, r9
  4043c6:	f7ff b9fd 	b.w	4037c4 <_svfprintf_r+0x220>
  4043ca:	aa25      	add	r2, sp, #148	; 0x94
  4043cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043d0:	f002 fa44 	bl	40685c <__ssprint_r>
  4043d4:	2800      	cmp	r0, #0
  4043d6:	f47f a9b7 	bne.w	403748 <_svfprintf_r+0x1a4>
  4043da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043dc:	46c8      	mov	r8, r9
  4043de:	f7ff ba72 	b.w	4038c6 <_svfprintf_r+0x322>
  4043e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4043e4:	4622      	mov	r2, r4
  4043e6:	4620      	mov	r0, r4
  4043e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4043ea:	4623      	mov	r3, r4
  4043ec:	4621      	mov	r1, r4
  4043ee:	f003 fafb 	bl	4079e8 <__aeabi_dcmpun>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	f040 8286 	bne.w	404904 <_svfprintf_r+0x1360>
  4043f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043fa:	3301      	adds	r3, #1
  4043fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043fe:	f023 0320 	bic.w	r3, r3, #32
  404402:	930e      	str	r3, [sp, #56]	; 0x38
  404404:	f000 81e2 	beq.w	4047cc <_svfprintf_r+0x1228>
  404408:	2b47      	cmp	r3, #71	; 0x47
  40440a:	f000 811e 	beq.w	40464a <_svfprintf_r+0x10a6>
  40440e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404412:	9307      	str	r3, [sp, #28]
  404414:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404416:	1e1f      	subs	r7, r3, #0
  404418:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40441a:	9308      	str	r3, [sp, #32]
  40441c:	bfbb      	ittet	lt
  40441e:	463b      	movlt	r3, r7
  404420:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404424:	2300      	movge	r3, #0
  404426:	232d      	movlt	r3, #45	; 0x2d
  404428:	9310      	str	r3, [sp, #64]	; 0x40
  40442a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40442c:	2b66      	cmp	r3, #102	; 0x66
  40442e:	f000 81bb 	beq.w	4047a8 <_svfprintf_r+0x1204>
  404432:	2b46      	cmp	r3, #70	; 0x46
  404434:	f000 80df 	beq.w	4045f6 <_svfprintf_r+0x1052>
  404438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40443a:	9a08      	ldr	r2, [sp, #32]
  40443c:	2b45      	cmp	r3, #69	; 0x45
  40443e:	bf0c      	ite	eq
  404440:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404442:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404444:	a823      	add	r0, sp, #140	; 0x8c
  404446:	a920      	add	r1, sp, #128	; 0x80
  404448:	bf08      	it	eq
  40444a:	1c5d      	addeq	r5, r3, #1
  40444c:	9004      	str	r0, [sp, #16]
  40444e:	9103      	str	r1, [sp, #12]
  404450:	a81f      	add	r0, sp, #124	; 0x7c
  404452:	2102      	movs	r1, #2
  404454:	463b      	mov	r3, r7
  404456:	9002      	str	r0, [sp, #8]
  404458:	9501      	str	r5, [sp, #4]
  40445a:	9100      	str	r1, [sp, #0]
  40445c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40445e:	f000 fb73 	bl	404b48 <_dtoa_r>
  404462:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404464:	2b67      	cmp	r3, #103	; 0x67
  404466:	4606      	mov	r6, r0
  404468:	f040 81e0 	bne.w	40482c <_svfprintf_r+0x1288>
  40446c:	f01b 0f01 	tst.w	fp, #1
  404470:	f000 8246 	beq.w	404900 <_svfprintf_r+0x135c>
  404474:	1974      	adds	r4, r6, r5
  404476:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404478:	9808      	ldr	r0, [sp, #32]
  40447a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40447c:	4639      	mov	r1, r7
  40447e:	f003 fa81 	bl	407984 <__aeabi_dcmpeq>
  404482:	2800      	cmp	r0, #0
  404484:	f040 8165 	bne.w	404752 <_svfprintf_r+0x11ae>
  404488:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40448a:	42a3      	cmp	r3, r4
  40448c:	d206      	bcs.n	40449c <_svfprintf_r+0xef8>
  40448e:	2130      	movs	r1, #48	; 0x30
  404490:	1c5a      	adds	r2, r3, #1
  404492:	9223      	str	r2, [sp, #140]	; 0x8c
  404494:	7019      	strb	r1, [r3, #0]
  404496:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404498:	429c      	cmp	r4, r3
  40449a:	d8f9      	bhi.n	404490 <_svfprintf_r+0xeec>
  40449c:	1b9b      	subs	r3, r3, r6
  40449e:	9313      	str	r3, [sp, #76]	; 0x4c
  4044a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044a2:	2b47      	cmp	r3, #71	; 0x47
  4044a4:	f000 80e9 	beq.w	40467a <_svfprintf_r+0x10d6>
  4044a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044aa:	2b65      	cmp	r3, #101	; 0x65
  4044ac:	f340 81cd 	ble.w	40484a <_svfprintf_r+0x12a6>
  4044b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044b2:	2b66      	cmp	r3, #102	; 0x66
  4044b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4044b6:	9312      	str	r3, [sp, #72]	; 0x48
  4044b8:	f000 819e 	beq.w	4047f8 <_svfprintf_r+0x1254>
  4044bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044be:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4044c0:	4619      	mov	r1, r3
  4044c2:	4291      	cmp	r1, r2
  4044c4:	f300 818a 	bgt.w	4047dc <_svfprintf_r+0x1238>
  4044c8:	f01b 0f01 	tst.w	fp, #1
  4044cc:	f040 8213 	bne.w	4048f6 <_svfprintf_r+0x1352>
  4044d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4044d4:	9308      	str	r3, [sp, #32]
  4044d6:	2367      	movs	r3, #103	; 0x67
  4044d8:	920e      	str	r2, [sp, #56]	; 0x38
  4044da:	9311      	str	r3, [sp, #68]	; 0x44
  4044dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4044de:	2b00      	cmp	r3, #0
  4044e0:	f040 80c4 	bne.w	40466c <_svfprintf_r+0x10c8>
  4044e4:	930a      	str	r3, [sp, #40]	; 0x28
  4044e6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4044ea:	f7ff b973 	b.w	4037d4 <_svfprintf_r+0x230>
  4044ee:	4635      	mov	r5, r6
  4044f0:	460c      	mov	r4, r1
  4044f2:	4646      	mov	r6, r8
  4044f4:	4690      	mov	r8, r2
  4044f6:	3301      	adds	r3, #1
  4044f8:	443c      	add	r4, r7
  4044fa:	2b07      	cmp	r3, #7
  4044fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4044fe:	9326      	str	r3, [sp, #152]	; 0x98
  404500:	e888 00a0 	stmia.w	r8, {r5, r7}
  404504:	f73f aed1 	bgt.w	4042aa <_svfprintf_r+0xd06>
  404508:	f108 0808 	add.w	r8, r8, #8
  40450c:	e6d7      	b.n	4042be <_svfprintf_r+0xd1a>
  40450e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404510:	6813      	ldr	r3, [r2, #0]
  404512:	3204      	adds	r2, #4
  404514:	920f      	str	r2, [sp, #60]	; 0x3c
  404516:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404518:	601a      	str	r2, [r3, #0]
  40451a:	f7ff b86a 	b.w	4035f2 <_svfprintf_r+0x4e>
  40451e:	aa25      	add	r2, sp, #148	; 0x94
  404520:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404522:	980c      	ldr	r0, [sp, #48]	; 0x30
  404524:	f002 f99a 	bl	40685c <__ssprint_r>
  404528:	2800      	cmp	r0, #0
  40452a:	f47f a90d 	bne.w	403748 <_svfprintf_r+0x1a4>
  40452e:	46c8      	mov	r8, r9
  404530:	e48d      	b.n	403e4e <_svfprintf_r+0x8aa>
  404532:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404534:	4a27      	ldr	r2, [pc, #156]	; (4045d4 <_svfprintf_r+0x1030>)
  404536:	f8c8 2000 	str.w	r2, [r8]
  40453a:	3301      	adds	r3, #1
  40453c:	3401      	adds	r4, #1
  40453e:	2201      	movs	r2, #1
  404540:	2b07      	cmp	r3, #7
  404542:	9427      	str	r4, [sp, #156]	; 0x9c
  404544:	9326      	str	r3, [sp, #152]	; 0x98
  404546:	f8c8 2004 	str.w	r2, [r8, #4]
  40454a:	dc72      	bgt.n	404632 <_svfprintf_r+0x108e>
  40454c:	f108 0808 	add.w	r8, r8, #8
  404550:	b929      	cbnz	r1, 40455e <_svfprintf_r+0xfba>
  404552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404554:	b91b      	cbnz	r3, 40455e <_svfprintf_r+0xfba>
  404556:	9b07      	ldr	r3, [sp, #28]
  404558:	07d8      	lsls	r0, r3, #31
  40455a:	f57f aa03 	bpl.w	403964 <_svfprintf_r+0x3c0>
  40455e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404560:	9819      	ldr	r0, [sp, #100]	; 0x64
  404562:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404564:	f8c8 2000 	str.w	r2, [r8]
  404568:	3301      	adds	r3, #1
  40456a:	4602      	mov	r2, r0
  40456c:	4422      	add	r2, r4
  40456e:	2b07      	cmp	r3, #7
  404570:	9227      	str	r2, [sp, #156]	; 0x9c
  404572:	f8c8 0004 	str.w	r0, [r8, #4]
  404576:	9326      	str	r3, [sp, #152]	; 0x98
  404578:	f300 818d 	bgt.w	404896 <_svfprintf_r+0x12f2>
  40457c:	f108 0808 	add.w	r8, r8, #8
  404580:	2900      	cmp	r1, #0
  404582:	f2c0 8165 	blt.w	404850 <_svfprintf_r+0x12ac>
  404586:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404588:	f8c8 6000 	str.w	r6, [r8]
  40458c:	3301      	adds	r3, #1
  40458e:	188c      	adds	r4, r1, r2
  404590:	2b07      	cmp	r3, #7
  404592:	9427      	str	r4, [sp, #156]	; 0x9c
  404594:	9326      	str	r3, [sp, #152]	; 0x98
  404596:	f8c8 1004 	str.w	r1, [r8, #4]
  40459a:	f77f a9e1 	ble.w	403960 <_svfprintf_r+0x3bc>
  40459e:	e52c      	b.n	403ffa <_svfprintf_r+0xa56>
  4045a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045a2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045a4:	6813      	ldr	r3, [r2, #0]
  4045a6:	17cd      	asrs	r5, r1, #31
  4045a8:	4608      	mov	r0, r1
  4045aa:	3204      	adds	r2, #4
  4045ac:	4629      	mov	r1, r5
  4045ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4045b0:	e9c3 0100 	strd	r0, r1, [r3]
  4045b4:	f7ff b81d 	b.w	4035f2 <_svfprintf_r+0x4e>
  4045b8:	aa25      	add	r2, sp, #148	; 0x94
  4045ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045bc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045be:	f002 f94d 	bl	40685c <__ssprint_r>
  4045c2:	2800      	cmp	r0, #0
  4045c4:	f47f a8c0 	bne.w	403748 <_svfprintf_r+0x1a4>
  4045c8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045ca:	46c8      	mov	r8, r9
  4045cc:	e458      	b.n	403e80 <_svfprintf_r+0x8dc>
  4045ce:	bf00      	nop
  4045d0:	00408510 	.word	0x00408510
  4045d4:	004084fc 	.word	0x004084fc
  4045d8:	2140      	movs	r1, #64	; 0x40
  4045da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045dc:	f001 fa0a 	bl	4059f4 <_malloc_r>
  4045e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045e2:	6010      	str	r0, [r2, #0]
  4045e4:	6110      	str	r0, [r2, #16]
  4045e6:	2800      	cmp	r0, #0
  4045e8:	f000 81f2 	beq.w	4049d0 <_svfprintf_r+0x142c>
  4045ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045ee:	2340      	movs	r3, #64	; 0x40
  4045f0:	6153      	str	r3, [r2, #20]
  4045f2:	f7fe bfee 	b.w	4035d2 <_svfprintf_r+0x2e>
  4045f6:	a823      	add	r0, sp, #140	; 0x8c
  4045f8:	a920      	add	r1, sp, #128	; 0x80
  4045fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4045fc:	9004      	str	r0, [sp, #16]
  4045fe:	9103      	str	r1, [sp, #12]
  404600:	a81f      	add	r0, sp, #124	; 0x7c
  404602:	2103      	movs	r1, #3
  404604:	9002      	str	r0, [sp, #8]
  404606:	9a08      	ldr	r2, [sp, #32]
  404608:	9401      	str	r4, [sp, #4]
  40460a:	463b      	mov	r3, r7
  40460c:	9100      	str	r1, [sp, #0]
  40460e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404610:	f000 fa9a 	bl	404b48 <_dtoa_r>
  404614:	4625      	mov	r5, r4
  404616:	4606      	mov	r6, r0
  404618:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40461a:	2b46      	cmp	r3, #70	; 0x46
  40461c:	eb06 0405 	add.w	r4, r6, r5
  404620:	f47f af29 	bne.w	404476 <_svfprintf_r+0xed2>
  404624:	7833      	ldrb	r3, [r6, #0]
  404626:	2b30      	cmp	r3, #48	; 0x30
  404628:	f000 8178 	beq.w	40491c <_svfprintf_r+0x1378>
  40462c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40462e:	442c      	add	r4, r5
  404630:	e721      	b.n	404476 <_svfprintf_r+0xed2>
  404632:	aa25      	add	r2, sp, #148	; 0x94
  404634:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404636:	980c      	ldr	r0, [sp, #48]	; 0x30
  404638:	f002 f910 	bl	40685c <__ssprint_r>
  40463c:	2800      	cmp	r0, #0
  40463e:	f47f a883 	bne.w	403748 <_svfprintf_r+0x1a4>
  404642:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404644:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404646:	46c8      	mov	r8, r9
  404648:	e782      	b.n	404550 <_svfprintf_r+0xfac>
  40464a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40464c:	2b00      	cmp	r3, #0
  40464e:	bf08      	it	eq
  404650:	2301      	moveq	r3, #1
  404652:	930a      	str	r3, [sp, #40]	; 0x28
  404654:	e6db      	b.n	40440e <_svfprintf_r+0xe6a>
  404656:	4630      	mov	r0, r6
  404658:	940a      	str	r4, [sp, #40]	; 0x28
  40465a:	f002 f891 	bl	406780 <strlen>
  40465e:	950f      	str	r5, [sp, #60]	; 0x3c
  404660:	900e      	str	r0, [sp, #56]	; 0x38
  404662:	f8cd b01c 	str.w	fp, [sp, #28]
  404666:	4603      	mov	r3, r0
  404668:	f7ff b9f9 	b.w	403a5e <_svfprintf_r+0x4ba>
  40466c:	272d      	movs	r7, #45	; 0x2d
  40466e:	2300      	movs	r3, #0
  404670:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404674:	930a      	str	r3, [sp, #40]	; 0x28
  404676:	f7ff b8ae 	b.w	4037d6 <_svfprintf_r+0x232>
  40467a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40467c:	9312      	str	r3, [sp, #72]	; 0x48
  40467e:	461a      	mov	r2, r3
  404680:	3303      	adds	r3, #3
  404682:	db04      	blt.n	40468e <_svfprintf_r+0x10ea>
  404684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404686:	4619      	mov	r1, r3
  404688:	4291      	cmp	r1, r2
  40468a:	f6bf af17 	bge.w	4044bc <_svfprintf_r+0xf18>
  40468e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404690:	3b02      	subs	r3, #2
  404692:	9311      	str	r3, [sp, #68]	; 0x44
  404694:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404698:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40469c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40469e:	3b01      	subs	r3, #1
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	931f      	str	r3, [sp, #124]	; 0x7c
  4046a4:	bfbd      	ittte	lt
  4046a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4046a8:	f1c3 0301 	rsblt	r3, r3, #1
  4046ac:	222d      	movlt	r2, #45	; 0x2d
  4046ae:	222b      	movge	r2, #43	; 0x2b
  4046b0:	2b09      	cmp	r3, #9
  4046b2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4046b6:	f340 8116 	ble.w	4048e6 <_svfprintf_r+0x1342>
  4046ba:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4046be:	4620      	mov	r0, r4
  4046c0:	4dab      	ldr	r5, [pc, #684]	; (404970 <_svfprintf_r+0x13cc>)
  4046c2:	e000      	b.n	4046c6 <_svfprintf_r+0x1122>
  4046c4:	4610      	mov	r0, r2
  4046c6:	fb85 1203 	smull	r1, r2, r5, r3
  4046ca:	17d9      	asrs	r1, r3, #31
  4046cc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4046d0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4046d4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4046d8:	3230      	adds	r2, #48	; 0x30
  4046da:	2909      	cmp	r1, #9
  4046dc:	f800 2c01 	strb.w	r2, [r0, #-1]
  4046e0:	460b      	mov	r3, r1
  4046e2:	f100 32ff 	add.w	r2, r0, #4294967295
  4046e6:	dced      	bgt.n	4046c4 <_svfprintf_r+0x1120>
  4046e8:	3330      	adds	r3, #48	; 0x30
  4046ea:	3802      	subs	r0, #2
  4046ec:	b2d9      	uxtb	r1, r3
  4046ee:	4284      	cmp	r4, r0
  4046f0:	f802 1c01 	strb.w	r1, [r2, #-1]
  4046f4:	f240 8165 	bls.w	4049c2 <_svfprintf_r+0x141e>
  4046f8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4046fc:	4613      	mov	r3, r2
  4046fe:	e001      	b.n	404704 <_svfprintf_r+0x1160>
  404700:	f813 1b01 	ldrb.w	r1, [r3], #1
  404704:	f800 1b01 	strb.w	r1, [r0], #1
  404708:	42a3      	cmp	r3, r4
  40470a:	d1f9      	bne.n	404700 <_svfprintf_r+0x115c>
  40470c:	3301      	adds	r3, #1
  40470e:	1a9b      	subs	r3, r3, r2
  404710:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404714:	4413      	add	r3, r2
  404716:	aa21      	add	r2, sp, #132	; 0x84
  404718:	1a9b      	subs	r3, r3, r2
  40471a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40471c:	931b      	str	r3, [sp, #108]	; 0x6c
  40471e:	2a01      	cmp	r2, #1
  404720:	4413      	add	r3, r2
  404722:	930e      	str	r3, [sp, #56]	; 0x38
  404724:	f340 8119 	ble.w	40495a <_svfprintf_r+0x13b6>
  404728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40472a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40472c:	4413      	add	r3, r2
  40472e:	930e      	str	r3, [sp, #56]	; 0x38
  404730:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404734:	9308      	str	r3, [sp, #32]
  404736:	2300      	movs	r3, #0
  404738:	9312      	str	r3, [sp, #72]	; 0x48
  40473a:	e6cf      	b.n	4044dc <_svfprintf_r+0xf38>
  40473c:	aa25      	add	r2, sp, #148	; 0x94
  40473e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404740:	980c      	ldr	r0, [sp, #48]	; 0x30
  404742:	f002 f88b 	bl	40685c <__ssprint_r>
  404746:	2800      	cmp	r0, #0
  404748:	f47e affe 	bne.w	403748 <_svfprintf_r+0x1a4>
  40474c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40474e:	46c8      	mov	r8, r9
  404750:	e4d7      	b.n	404102 <_svfprintf_r+0xb5e>
  404752:	4623      	mov	r3, r4
  404754:	e6a2      	b.n	40449c <_svfprintf_r+0xef8>
  404756:	aa25      	add	r2, sp, #148	; 0x94
  404758:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40475a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40475c:	f002 f87e 	bl	40685c <__ssprint_r>
  404760:	2800      	cmp	r0, #0
  404762:	f47e aff1 	bne.w	403748 <_svfprintf_r+0x1a4>
  404766:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404768:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40476a:	46c8      	mov	r8, r9
  40476c:	e5ae      	b.n	4042cc <_svfprintf_r+0xd28>
  40476e:	aa25      	add	r2, sp, #148	; 0x94
  404770:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404772:	980c      	ldr	r0, [sp, #48]	; 0x30
  404774:	f002 f872 	bl	40685c <__ssprint_r>
  404778:	2800      	cmp	r0, #0
  40477a:	f47e afe5 	bne.w	403748 <_svfprintf_r+0x1a4>
  40477e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404782:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404784:	1a9a      	subs	r2, r3, r2
  404786:	46c8      	mov	r8, r9
  404788:	e5b8      	b.n	4042fc <_svfprintf_r+0xd58>
  40478a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40478c:	9612      	str	r6, [sp, #72]	; 0x48
  40478e:	2b06      	cmp	r3, #6
  404790:	bf28      	it	cs
  404792:	2306      	movcs	r3, #6
  404794:	960a      	str	r6, [sp, #40]	; 0x28
  404796:	4637      	mov	r7, r6
  404798:	9308      	str	r3, [sp, #32]
  40479a:	950f      	str	r5, [sp, #60]	; 0x3c
  40479c:	f8cd b01c 	str.w	fp, [sp, #28]
  4047a0:	930e      	str	r3, [sp, #56]	; 0x38
  4047a2:	4e74      	ldr	r6, [pc, #464]	; (404974 <_svfprintf_r+0x13d0>)
  4047a4:	f7ff b816 	b.w	4037d4 <_svfprintf_r+0x230>
  4047a8:	a823      	add	r0, sp, #140	; 0x8c
  4047aa:	a920      	add	r1, sp, #128	; 0x80
  4047ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4047ae:	9004      	str	r0, [sp, #16]
  4047b0:	9103      	str	r1, [sp, #12]
  4047b2:	a81f      	add	r0, sp, #124	; 0x7c
  4047b4:	2103      	movs	r1, #3
  4047b6:	9002      	str	r0, [sp, #8]
  4047b8:	9a08      	ldr	r2, [sp, #32]
  4047ba:	9501      	str	r5, [sp, #4]
  4047bc:	463b      	mov	r3, r7
  4047be:	9100      	str	r1, [sp, #0]
  4047c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047c2:	f000 f9c1 	bl	404b48 <_dtoa_r>
  4047c6:	4606      	mov	r6, r0
  4047c8:	1944      	adds	r4, r0, r5
  4047ca:	e72b      	b.n	404624 <_svfprintf_r+0x1080>
  4047cc:	2306      	movs	r3, #6
  4047ce:	930a      	str	r3, [sp, #40]	; 0x28
  4047d0:	e61d      	b.n	40440e <_svfprintf_r+0xe6a>
  4047d2:	272d      	movs	r7, #45	; 0x2d
  4047d4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4047d8:	f7ff bacd 	b.w	403d76 <_svfprintf_r+0x7d2>
  4047dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047e0:	4413      	add	r3, r2
  4047e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4047e4:	930e      	str	r3, [sp, #56]	; 0x38
  4047e6:	2a00      	cmp	r2, #0
  4047e8:	f340 80b0 	ble.w	40494c <_svfprintf_r+0x13a8>
  4047ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047f0:	9308      	str	r3, [sp, #32]
  4047f2:	2367      	movs	r3, #103	; 0x67
  4047f4:	9311      	str	r3, [sp, #68]	; 0x44
  4047f6:	e671      	b.n	4044dc <_svfprintf_r+0xf38>
  4047f8:	2b00      	cmp	r3, #0
  4047fa:	f340 80c3 	ble.w	404984 <_svfprintf_r+0x13e0>
  4047fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404800:	2a00      	cmp	r2, #0
  404802:	f040 8099 	bne.w	404938 <_svfprintf_r+0x1394>
  404806:	f01b 0f01 	tst.w	fp, #1
  40480a:	f040 8095 	bne.w	404938 <_svfprintf_r+0x1394>
  40480e:	9308      	str	r3, [sp, #32]
  404810:	930e      	str	r3, [sp, #56]	; 0x38
  404812:	e663      	b.n	4044dc <_svfprintf_r+0xf38>
  404814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404816:	9308      	str	r3, [sp, #32]
  404818:	930e      	str	r3, [sp, #56]	; 0x38
  40481a:	900a      	str	r0, [sp, #40]	; 0x28
  40481c:	950f      	str	r5, [sp, #60]	; 0x3c
  40481e:	f8cd b01c 	str.w	fp, [sp, #28]
  404822:	9012      	str	r0, [sp, #72]	; 0x48
  404824:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404828:	f7fe bfd4 	b.w	4037d4 <_svfprintf_r+0x230>
  40482c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40482e:	2b47      	cmp	r3, #71	; 0x47
  404830:	f47f ae20 	bne.w	404474 <_svfprintf_r+0xed0>
  404834:	f01b 0f01 	tst.w	fp, #1
  404838:	f47f aeee 	bne.w	404618 <_svfprintf_r+0x1074>
  40483c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40483e:	1b9b      	subs	r3, r3, r6
  404840:	9313      	str	r3, [sp, #76]	; 0x4c
  404842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404844:	2b47      	cmp	r3, #71	; 0x47
  404846:	f43f af18 	beq.w	40467a <_svfprintf_r+0x10d6>
  40484a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40484c:	9312      	str	r3, [sp, #72]	; 0x48
  40484e:	e721      	b.n	404694 <_svfprintf_r+0x10f0>
  404850:	424f      	negs	r7, r1
  404852:	3110      	adds	r1, #16
  404854:	4d48      	ldr	r5, [pc, #288]	; (404978 <_svfprintf_r+0x13d4>)
  404856:	da2f      	bge.n	4048b8 <_svfprintf_r+0x1314>
  404858:	2410      	movs	r4, #16
  40485a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40485e:	e004      	b.n	40486a <_svfprintf_r+0x12c6>
  404860:	f108 0808 	add.w	r8, r8, #8
  404864:	3f10      	subs	r7, #16
  404866:	2f10      	cmp	r7, #16
  404868:	dd26      	ble.n	4048b8 <_svfprintf_r+0x1314>
  40486a:	3301      	adds	r3, #1
  40486c:	3210      	adds	r2, #16
  40486e:	2b07      	cmp	r3, #7
  404870:	9227      	str	r2, [sp, #156]	; 0x9c
  404872:	9326      	str	r3, [sp, #152]	; 0x98
  404874:	f8c8 5000 	str.w	r5, [r8]
  404878:	f8c8 4004 	str.w	r4, [r8, #4]
  40487c:	ddf0      	ble.n	404860 <_svfprintf_r+0x12bc>
  40487e:	aa25      	add	r2, sp, #148	; 0x94
  404880:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404882:	4658      	mov	r0, fp
  404884:	f001 ffea 	bl	40685c <__ssprint_r>
  404888:	2800      	cmp	r0, #0
  40488a:	f47e af5d 	bne.w	403748 <_svfprintf_r+0x1a4>
  40488e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404890:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404892:	46c8      	mov	r8, r9
  404894:	e7e6      	b.n	404864 <_svfprintf_r+0x12c0>
  404896:	aa25      	add	r2, sp, #148	; 0x94
  404898:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40489a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40489c:	f001 ffde 	bl	40685c <__ssprint_r>
  4048a0:	2800      	cmp	r0, #0
  4048a2:	f47e af51 	bne.w	403748 <_svfprintf_r+0x1a4>
  4048a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4048a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048ac:	46c8      	mov	r8, r9
  4048ae:	e667      	b.n	404580 <_svfprintf_r+0xfdc>
  4048b0:	2000      	movs	r0, #0
  4048b2:	900a      	str	r0, [sp, #40]	; 0x28
  4048b4:	f7fe bed0 	b.w	403658 <_svfprintf_r+0xb4>
  4048b8:	3301      	adds	r3, #1
  4048ba:	443a      	add	r2, r7
  4048bc:	2b07      	cmp	r3, #7
  4048be:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048c2:	9227      	str	r2, [sp, #156]	; 0x9c
  4048c4:	9326      	str	r3, [sp, #152]	; 0x98
  4048c6:	f108 0808 	add.w	r8, r8, #8
  4048ca:	f77f ae5c 	ble.w	404586 <_svfprintf_r+0xfe2>
  4048ce:	aa25      	add	r2, sp, #148	; 0x94
  4048d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048d4:	f001 ffc2 	bl	40685c <__ssprint_r>
  4048d8:	2800      	cmp	r0, #0
  4048da:	f47e af35 	bne.w	403748 <_svfprintf_r+0x1a4>
  4048de:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048e2:	46c8      	mov	r8, r9
  4048e4:	e64f      	b.n	404586 <_svfprintf_r+0xfe2>
  4048e6:	3330      	adds	r3, #48	; 0x30
  4048e8:	2230      	movs	r2, #48	; 0x30
  4048ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4048ee:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4048f2:	ab22      	add	r3, sp, #136	; 0x88
  4048f4:	e70f      	b.n	404716 <_svfprintf_r+0x1172>
  4048f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048fa:	4413      	add	r3, r2
  4048fc:	930e      	str	r3, [sp, #56]	; 0x38
  4048fe:	e775      	b.n	4047ec <_svfprintf_r+0x1248>
  404900:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404902:	e5cb      	b.n	40449c <_svfprintf_r+0xef8>
  404904:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404906:	4e1d      	ldr	r6, [pc, #116]	; (40497c <_svfprintf_r+0x13d8>)
  404908:	2b00      	cmp	r3, #0
  40490a:	bfb6      	itet	lt
  40490c:	272d      	movlt	r7, #45	; 0x2d
  40490e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404912:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404916:	4b1a      	ldr	r3, [pc, #104]	; (404980 <_svfprintf_r+0x13dc>)
  404918:	f7ff ba2f 	b.w	403d7a <_svfprintf_r+0x7d6>
  40491c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40491e:	9808      	ldr	r0, [sp, #32]
  404920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404922:	4639      	mov	r1, r7
  404924:	f003 f82e 	bl	407984 <__aeabi_dcmpeq>
  404928:	2800      	cmp	r0, #0
  40492a:	f47f ae7f 	bne.w	40462c <_svfprintf_r+0x1088>
  40492e:	f1c5 0501 	rsb	r5, r5, #1
  404932:	951f      	str	r5, [sp, #124]	; 0x7c
  404934:	442c      	add	r4, r5
  404936:	e59e      	b.n	404476 <_svfprintf_r+0xed2>
  404938:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40493a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40493c:	4413      	add	r3, r2
  40493e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404940:	441a      	add	r2, r3
  404942:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404946:	920e      	str	r2, [sp, #56]	; 0x38
  404948:	9308      	str	r3, [sp, #32]
  40494a:	e5c7      	b.n	4044dc <_svfprintf_r+0xf38>
  40494c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40494e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404950:	f1c3 0301 	rsb	r3, r3, #1
  404954:	441a      	add	r2, r3
  404956:	4613      	mov	r3, r2
  404958:	e7d0      	b.n	4048fc <_svfprintf_r+0x1358>
  40495a:	f01b 0301 	ands.w	r3, fp, #1
  40495e:	9312      	str	r3, [sp, #72]	; 0x48
  404960:	f47f aee2 	bne.w	404728 <_svfprintf_r+0x1184>
  404964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40496a:	9308      	str	r3, [sp, #32]
  40496c:	e5b6      	b.n	4044dc <_svfprintf_r+0xf38>
  40496e:	bf00      	nop
  404970:	66666667 	.word	0x66666667
  404974:	004084f4 	.word	0x004084f4
  404978:	00408510 	.word	0x00408510
  40497c:	004084c8 	.word	0x004084c8
  404980:	004084c4 	.word	0x004084c4
  404984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404986:	b913      	cbnz	r3, 40498e <_svfprintf_r+0x13ea>
  404988:	f01b 0f01 	tst.w	fp, #1
  40498c:	d002      	beq.n	404994 <_svfprintf_r+0x13f0>
  40498e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404990:	3301      	adds	r3, #1
  404992:	e7d4      	b.n	40493e <_svfprintf_r+0x139a>
  404994:	2301      	movs	r3, #1
  404996:	e73a      	b.n	40480e <_svfprintf_r+0x126a>
  404998:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40499a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40499e:	6828      	ldr	r0, [r5, #0]
  4049a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4049a4:	900a      	str	r0, [sp, #40]	; 0x28
  4049a6:	4628      	mov	r0, r5
  4049a8:	3004      	adds	r0, #4
  4049aa:	46a2      	mov	sl, r4
  4049ac:	900f      	str	r0, [sp, #60]	; 0x3c
  4049ae:	f7fe be51 	b.w	403654 <_svfprintf_r+0xb0>
  4049b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049b6:	f7ff b867 	b.w	403a88 <_svfprintf_r+0x4e4>
  4049ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049be:	f7ff ba15 	b.w	403dec <_svfprintf_r+0x848>
  4049c2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4049c6:	e6a6      	b.n	404716 <_svfprintf_r+0x1172>
  4049c8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049cc:	f7ff b8eb 	b.w	403ba6 <_svfprintf_r+0x602>
  4049d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4049d2:	230c      	movs	r3, #12
  4049d4:	6013      	str	r3, [r2, #0]
  4049d6:	f04f 33ff 	mov.w	r3, #4294967295
  4049da:	9309      	str	r3, [sp, #36]	; 0x24
  4049dc:	f7fe bebd 	b.w	40375a <_svfprintf_r+0x1b6>
  4049e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049e4:	f7ff b99a 	b.w	403d1c <_svfprintf_r+0x778>
  4049e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049ec:	f7ff b976 	b.w	403cdc <_svfprintf_r+0x738>
  4049f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049f4:	f7ff b959 	b.w	403caa <_svfprintf_r+0x706>
  4049f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049fc:	f7ff b912 	b.w	403c24 <_svfprintf_r+0x680>

00404a00 <register_fini>:
  404a00:	4b02      	ldr	r3, [pc, #8]	; (404a0c <register_fini+0xc>)
  404a02:	b113      	cbz	r3, 404a0a <register_fini+0xa>
  404a04:	4802      	ldr	r0, [pc, #8]	; (404a10 <register_fini+0x10>)
  404a06:	f000 b805 	b.w	404a14 <atexit>
  404a0a:	4770      	bx	lr
  404a0c:	00000000 	.word	0x00000000
  404a10:	0040599d 	.word	0x0040599d

00404a14 <atexit>:
  404a14:	2300      	movs	r3, #0
  404a16:	4601      	mov	r1, r0
  404a18:	461a      	mov	r2, r3
  404a1a:	4618      	mov	r0, r3
  404a1c:	f001 bf9c 	b.w	406958 <__register_exitproc>

00404a20 <quorem>:
  404a20:	6902      	ldr	r2, [r0, #16]
  404a22:	690b      	ldr	r3, [r1, #16]
  404a24:	4293      	cmp	r3, r2
  404a26:	f300 808d 	bgt.w	404b44 <quorem+0x124>
  404a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a2e:	f103 38ff 	add.w	r8, r3, #4294967295
  404a32:	f101 0714 	add.w	r7, r1, #20
  404a36:	f100 0b14 	add.w	fp, r0, #20
  404a3a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404a3e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404a42:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404a46:	b083      	sub	sp, #12
  404a48:	3201      	adds	r2, #1
  404a4a:	fbb3 f9f2 	udiv	r9, r3, r2
  404a4e:	eb0b 0304 	add.w	r3, fp, r4
  404a52:	9400      	str	r4, [sp, #0]
  404a54:	eb07 0a04 	add.w	sl, r7, r4
  404a58:	9301      	str	r3, [sp, #4]
  404a5a:	f1b9 0f00 	cmp.w	r9, #0
  404a5e:	d039      	beq.n	404ad4 <quorem+0xb4>
  404a60:	2500      	movs	r5, #0
  404a62:	462e      	mov	r6, r5
  404a64:	46bc      	mov	ip, r7
  404a66:	46de      	mov	lr, fp
  404a68:	f85c 4b04 	ldr.w	r4, [ip], #4
  404a6c:	f8de 3000 	ldr.w	r3, [lr]
  404a70:	b2a2      	uxth	r2, r4
  404a72:	fb09 5502 	mla	r5, r9, r2, r5
  404a76:	0c22      	lsrs	r2, r4, #16
  404a78:	0c2c      	lsrs	r4, r5, #16
  404a7a:	fb09 4202 	mla	r2, r9, r2, r4
  404a7e:	b2ad      	uxth	r5, r5
  404a80:	1b75      	subs	r5, r6, r5
  404a82:	b296      	uxth	r6, r2
  404a84:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404a88:	fa15 f383 	uxtah	r3, r5, r3
  404a8c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404a90:	b29b      	uxth	r3, r3
  404a92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404a96:	45e2      	cmp	sl, ip
  404a98:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404a9c:	f84e 3b04 	str.w	r3, [lr], #4
  404aa0:	ea4f 4626 	mov.w	r6, r6, asr #16
  404aa4:	d2e0      	bcs.n	404a68 <quorem+0x48>
  404aa6:	9b00      	ldr	r3, [sp, #0]
  404aa8:	f85b 3003 	ldr.w	r3, [fp, r3]
  404aac:	b993      	cbnz	r3, 404ad4 <quorem+0xb4>
  404aae:	9c01      	ldr	r4, [sp, #4]
  404ab0:	1f23      	subs	r3, r4, #4
  404ab2:	459b      	cmp	fp, r3
  404ab4:	d20c      	bcs.n	404ad0 <quorem+0xb0>
  404ab6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404aba:	b94b      	cbnz	r3, 404ad0 <quorem+0xb0>
  404abc:	f1a4 0308 	sub.w	r3, r4, #8
  404ac0:	e002      	b.n	404ac8 <quorem+0xa8>
  404ac2:	681a      	ldr	r2, [r3, #0]
  404ac4:	3b04      	subs	r3, #4
  404ac6:	b91a      	cbnz	r2, 404ad0 <quorem+0xb0>
  404ac8:	459b      	cmp	fp, r3
  404aca:	f108 38ff 	add.w	r8, r8, #4294967295
  404ace:	d3f8      	bcc.n	404ac2 <quorem+0xa2>
  404ad0:	f8c0 8010 	str.w	r8, [r0, #16]
  404ad4:	4604      	mov	r4, r0
  404ad6:	f001 fd37 	bl	406548 <__mcmp>
  404ada:	2800      	cmp	r0, #0
  404adc:	db2e      	blt.n	404b3c <quorem+0x11c>
  404ade:	f109 0901 	add.w	r9, r9, #1
  404ae2:	465d      	mov	r5, fp
  404ae4:	2300      	movs	r3, #0
  404ae6:	f857 1b04 	ldr.w	r1, [r7], #4
  404aea:	6828      	ldr	r0, [r5, #0]
  404aec:	b28a      	uxth	r2, r1
  404aee:	1a9a      	subs	r2, r3, r2
  404af0:	0c0b      	lsrs	r3, r1, #16
  404af2:	fa12 f280 	uxtah	r2, r2, r0
  404af6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404afa:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404afe:	b292      	uxth	r2, r2
  404b00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404b04:	45ba      	cmp	sl, r7
  404b06:	f845 2b04 	str.w	r2, [r5], #4
  404b0a:	ea4f 4323 	mov.w	r3, r3, asr #16
  404b0e:	d2ea      	bcs.n	404ae6 <quorem+0xc6>
  404b10:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404b14:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404b18:	b982      	cbnz	r2, 404b3c <quorem+0x11c>
  404b1a:	1f1a      	subs	r2, r3, #4
  404b1c:	4593      	cmp	fp, r2
  404b1e:	d20b      	bcs.n	404b38 <quorem+0x118>
  404b20:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404b24:	b942      	cbnz	r2, 404b38 <quorem+0x118>
  404b26:	3b08      	subs	r3, #8
  404b28:	e002      	b.n	404b30 <quorem+0x110>
  404b2a:	681a      	ldr	r2, [r3, #0]
  404b2c:	3b04      	subs	r3, #4
  404b2e:	b91a      	cbnz	r2, 404b38 <quorem+0x118>
  404b30:	459b      	cmp	fp, r3
  404b32:	f108 38ff 	add.w	r8, r8, #4294967295
  404b36:	d3f8      	bcc.n	404b2a <quorem+0x10a>
  404b38:	f8c4 8010 	str.w	r8, [r4, #16]
  404b3c:	4648      	mov	r0, r9
  404b3e:	b003      	add	sp, #12
  404b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b44:	2000      	movs	r0, #0
  404b46:	4770      	bx	lr

00404b48 <_dtoa_r>:
  404b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404b4e:	b09b      	sub	sp, #108	; 0x6c
  404b50:	4604      	mov	r4, r0
  404b52:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404b54:	4692      	mov	sl, r2
  404b56:	469b      	mov	fp, r3
  404b58:	b141      	cbz	r1, 404b6c <_dtoa_r+0x24>
  404b5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404b5c:	604a      	str	r2, [r1, #4]
  404b5e:	2301      	movs	r3, #1
  404b60:	4093      	lsls	r3, r2
  404b62:	608b      	str	r3, [r1, #8]
  404b64:	f001 fb18 	bl	406198 <_Bfree>
  404b68:	2300      	movs	r3, #0
  404b6a:	6423      	str	r3, [r4, #64]	; 0x40
  404b6c:	f1bb 0f00 	cmp.w	fp, #0
  404b70:	465d      	mov	r5, fp
  404b72:	db35      	blt.n	404be0 <_dtoa_r+0x98>
  404b74:	2300      	movs	r3, #0
  404b76:	6033      	str	r3, [r6, #0]
  404b78:	4b9d      	ldr	r3, [pc, #628]	; (404df0 <_dtoa_r+0x2a8>)
  404b7a:	43ab      	bics	r3, r5
  404b7c:	d015      	beq.n	404baa <_dtoa_r+0x62>
  404b7e:	4650      	mov	r0, sl
  404b80:	4659      	mov	r1, fp
  404b82:	2200      	movs	r2, #0
  404b84:	2300      	movs	r3, #0
  404b86:	f002 fefd 	bl	407984 <__aeabi_dcmpeq>
  404b8a:	4680      	mov	r8, r0
  404b8c:	2800      	cmp	r0, #0
  404b8e:	d02d      	beq.n	404bec <_dtoa_r+0xa4>
  404b90:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b92:	2301      	movs	r3, #1
  404b94:	6013      	str	r3, [r2, #0]
  404b96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404b98:	2b00      	cmp	r3, #0
  404b9a:	f000 80bd 	beq.w	404d18 <_dtoa_r+0x1d0>
  404b9e:	4895      	ldr	r0, [pc, #596]	; (404df4 <_dtoa_r+0x2ac>)
  404ba0:	6018      	str	r0, [r3, #0]
  404ba2:	3801      	subs	r0, #1
  404ba4:	b01b      	add	sp, #108	; 0x6c
  404ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404baa:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404bac:	f242 730f 	movw	r3, #9999	; 0x270f
  404bb0:	6013      	str	r3, [r2, #0]
  404bb2:	f1ba 0f00 	cmp.w	sl, #0
  404bb6:	d10d      	bne.n	404bd4 <_dtoa_r+0x8c>
  404bb8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404bbc:	b955      	cbnz	r5, 404bd4 <_dtoa_r+0x8c>
  404bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bc0:	488d      	ldr	r0, [pc, #564]	; (404df8 <_dtoa_r+0x2b0>)
  404bc2:	2b00      	cmp	r3, #0
  404bc4:	d0ee      	beq.n	404ba4 <_dtoa_r+0x5c>
  404bc6:	f100 0308 	add.w	r3, r0, #8
  404bca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404bcc:	6013      	str	r3, [r2, #0]
  404bce:	b01b      	add	sp, #108	; 0x6c
  404bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bd6:	4889      	ldr	r0, [pc, #548]	; (404dfc <_dtoa_r+0x2b4>)
  404bd8:	2b00      	cmp	r3, #0
  404bda:	d0e3      	beq.n	404ba4 <_dtoa_r+0x5c>
  404bdc:	1cc3      	adds	r3, r0, #3
  404bde:	e7f4      	b.n	404bca <_dtoa_r+0x82>
  404be0:	2301      	movs	r3, #1
  404be2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404be6:	6033      	str	r3, [r6, #0]
  404be8:	46ab      	mov	fp, r5
  404bea:	e7c5      	b.n	404b78 <_dtoa_r+0x30>
  404bec:	aa18      	add	r2, sp, #96	; 0x60
  404bee:	ab19      	add	r3, sp, #100	; 0x64
  404bf0:	9201      	str	r2, [sp, #4]
  404bf2:	9300      	str	r3, [sp, #0]
  404bf4:	4652      	mov	r2, sl
  404bf6:	465b      	mov	r3, fp
  404bf8:	4620      	mov	r0, r4
  404bfa:	f001 fd45 	bl	406688 <__d2b>
  404bfe:	0d2b      	lsrs	r3, r5, #20
  404c00:	4681      	mov	r9, r0
  404c02:	d071      	beq.n	404ce8 <_dtoa_r+0x1a0>
  404c04:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404c08:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404c0c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404c0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404c12:	4650      	mov	r0, sl
  404c14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404c18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404c1c:	2200      	movs	r2, #0
  404c1e:	4b78      	ldr	r3, [pc, #480]	; (404e00 <_dtoa_r+0x2b8>)
  404c20:	f002 fa94 	bl	40714c <__aeabi_dsub>
  404c24:	a36c      	add	r3, pc, #432	; (adr r3, 404dd8 <_dtoa_r+0x290>)
  404c26:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c2a:	f002 fc43 	bl	4074b4 <__aeabi_dmul>
  404c2e:	a36c      	add	r3, pc, #432	; (adr r3, 404de0 <_dtoa_r+0x298>)
  404c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c34:	f002 fa8c 	bl	407150 <__adddf3>
  404c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c3c:	4630      	mov	r0, r6
  404c3e:	f002 fbd3 	bl	4073e8 <__aeabi_i2d>
  404c42:	a369      	add	r3, pc, #420	; (adr r3, 404de8 <_dtoa_r+0x2a0>)
  404c44:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c48:	f002 fc34 	bl	4074b4 <__aeabi_dmul>
  404c4c:	4602      	mov	r2, r0
  404c4e:	460b      	mov	r3, r1
  404c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c54:	f002 fa7c 	bl	407150 <__adddf3>
  404c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404c5c:	f002 feda 	bl	407a14 <__aeabi_d2iz>
  404c60:	2200      	movs	r2, #0
  404c62:	9002      	str	r0, [sp, #8]
  404c64:	2300      	movs	r3, #0
  404c66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c6a:	f002 fe95 	bl	407998 <__aeabi_dcmplt>
  404c6e:	2800      	cmp	r0, #0
  404c70:	f040 8173 	bne.w	404f5a <_dtoa_r+0x412>
  404c74:	9d02      	ldr	r5, [sp, #8]
  404c76:	2d16      	cmp	r5, #22
  404c78:	f200 815d 	bhi.w	404f36 <_dtoa_r+0x3ee>
  404c7c:	4b61      	ldr	r3, [pc, #388]	; (404e04 <_dtoa_r+0x2bc>)
  404c7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404c82:	e9d3 0100 	ldrd	r0, r1, [r3]
  404c86:	4652      	mov	r2, sl
  404c88:	465b      	mov	r3, fp
  404c8a:	f002 fea3 	bl	4079d4 <__aeabi_dcmpgt>
  404c8e:	2800      	cmp	r0, #0
  404c90:	f000 81c5 	beq.w	40501e <_dtoa_r+0x4d6>
  404c94:	1e6b      	subs	r3, r5, #1
  404c96:	9302      	str	r3, [sp, #8]
  404c98:	2300      	movs	r3, #0
  404c9a:	930e      	str	r3, [sp, #56]	; 0x38
  404c9c:	1bbf      	subs	r7, r7, r6
  404c9e:	1e7b      	subs	r3, r7, #1
  404ca0:	9306      	str	r3, [sp, #24]
  404ca2:	f100 8154 	bmi.w	404f4e <_dtoa_r+0x406>
  404ca6:	2300      	movs	r3, #0
  404ca8:	9308      	str	r3, [sp, #32]
  404caa:	9b02      	ldr	r3, [sp, #8]
  404cac:	2b00      	cmp	r3, #0
  404cae:	f2c0 8145 	blt.w	404f3c <_dtoa_r+0x3f4>
  404cb2:	9a06      	ldr	r2, [sp, #24]
  404cb4:	930d      	str	r3, [sp, #52]	; 0x34
  404cb6:	4611      	mov	r1, r2
  404cb8:	4419      	add	r1, r3
  404cba:	2300      	movs	r3, #0
  404cbc:	9106      	str	r1, [sp, #24]
  404cbe:	930c      	str	r3, [sp, #48]	; 0x30
  404cc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cc2:	2b09      	cmp	r3, #9
  404cc4:	d82a      	bhi.n	404d1c <_dtoa_r+0x1d4>
  404cc6:	2b05      	cmp	r3, #5
  404cc8:	f340 865b 	ble.w	405982 <_dtoa_r+0xe3a>
  404ccc:	3b04      	subs	r3, #4
  404cce:	9324      	str	r3, [sp, #144]	; 0x90
  404cd0:	2500      	movs	r5, #0
  404cd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cd4:	3b02      	subs	r3, #2
  404cd6:	2b03      	cmp	r3, #3
  404cd8:	f200 8642 	bhi.w	405960 <_dtoa_r+0xe18>
  404cdc:	e8df f013 	tbh	[pc, r3, lsl #1]
  404ce0:	02c903d4 	.word	0x02c903d4
  404ce4:	046103df 	.word	0x046103df
  404ce8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404cea:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404cec:	443e      	add	r6, r7
  404cee:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404cf2:	2b20      	cmp	r3, #32
  404cf4:	f340 818e 	ble.w	405014 <_dtoa_r+0x4cc>
  404cf8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404cfc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404d00:	409d      	lsls	r5, r3
  404d02:	fa2a f000 	lsr.w	r0, sl, r0
  404d06:	4328      	orrs	r0, r5
  404d08:	f002 fb5e 	bl	4073c8 <__aeabi_ui2d>
  404d0c:	2301      	movs	r3, #1
  404d0e:	3e01      	subs	r6, #1
  404d10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404d14:	9314      	str	r3, [sp, #80]	; 0x50
  404d16:	e781      	b.n	404c1c <_dtoa_r+0xd4>
  404d18:	483b      	ldr	r0, [pc, #236]	; (404e08 <_dtoa_r+0x2c0>)
  404d1a:	e743      	b.n	404ba4 <_dtoa_r+0x5c>
  404d1c:	2100      	movs	r1, #0
  404d1e:	6461      	str	r1, [r4, #68]	; 0x44
  404d20:	4620      	mov	r0, r4
  404d22:	9125      	str	r1, [sp, #148]	; 0x94
  404d24:	f001 fa12 	bl	40614c <_Balloc>
  404d28:	f04f 33ff 	mov.w	r3, #4294967295
  404d2c:	930a      	str	r3, [sp, #40]	; 0x28
  404d2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d30:	930f      	str	r3, [sp, #60]	; 0x3c
  404d32:	2301      	movs	r3, #1
  404d34:	9004      	str	r0, [sp, #16]
  404d36:	6420      	str	r0, [r4, #64]	; 0x40
  404d38:	9224      	str	r2, [sp, #144]	; 0x90
  404d3a:	930b      	str	r3, [sp, #44]	; 0x2c
  404d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404d3e:	2b00      	cmp	r3, #0
  404d40:	f2c0 80d9 	blt.w	404ef6 <_dtoa_r+0x3ae>
  404d44:	9a02      	ldr	r2, [sp, #8]
  404d46:	2a0e      	cmp	r2, #14
  404d48:	f300 80d5 	bgt.w	404ef6 <_dtoa_r+0x3ae>
  404d4c:	4b2d      	ldr	r3, [pc, #180]	; (404e04 <_dtoa_r+0x2bc>)
  404d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d52:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d56:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404d5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404d5c:	2b00      	cmp	r3, #0
  404d5e:	f2c0 83ba 	blt.w	4054d6 <_dtoa_r+0x98e>
  404d62:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404d66:	4650      	mov	r0, sl
  404d68:	462a      	mov	r2, r5
  404d6a:	4633      	mov	r3, r6
  404d6c:	4659      	mov	r1, fp
  404d6e:	f002 fccb 	bl	407708 <__aeabi_ddiv>
  404d72:	f002 fe4f 	bl	407a14 <__aeabi_d2iz>
  404d76:	4680      	mov	r8, r0
  404d78:	f002 fb36 	bl	4073e8 <__aeabi_i2d>
  404d7c:	462a      	mov	r2, r5
  404d7e:	4633      	mov	r3, r6
  404d80:	f002 fb98 	bl	4074b4 <__aeabi_dmul>
  404d84:	460b      	mov	r3, r1
  404d86:	4602      	mov	r2, r0
  404d88:	4659      	mov	r1, fp
  404d8a:	4650      	mov	r0, sl
  404d8c:	f002 f9de 	bl	40714c <__aeabi_dsub>
  404d90:	9d04      	ldr	r5, [sp, #16]
  404d92:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404d96:	702b      	strb	r3, [r5, #0]
  404d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d9a:	2b01      	cmp	r3, #1
  404d9c:	4606      	mov	r6, r0
  404d9e:	460f      	mov	r7, r1
  404da0:	f105 0501 	add.w	r5, r5, #1
  404da4:	d068      	beq.n	404e78 <_dtoa_r+0x330>
  404da6:	2200      	movs	r2, #0
  404da8:	4b18      	ldr	r3, [pc, #96]	; (404e0c <_dtoa_r+0x2c4>)
  404daa:	f002 fb83 	bl	4074b4 <__aeabi_dmul>
  404dae:	2200      	movs	r2, #0
  404db0:	2300      	movs	r3, #0
  404db2:	4606      	mov	r6, r0
  404db4:	460f      	mov	r7, r1
  404db6:	f002 fde5 	bl	407984 <__aeabi_dcmpeq>
  404dba:	2800      	cmp	r0, #0
  404dbc:	f040 8088 	bne.w	404ed0 <_dtoa_r+0x388>
  404dc0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404dc4:	f04f 0a00 	mov.w	sl, #0
  404dc8:	f8df b040 	ldr.w	fp, [pc, #64]	; 404e0c <_dtoa_r+0x2c4>
  404dcc:	940c      	str	r4, [sp, #48]	; 0x30
  404dce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404dd2:	e028      	b.n	404e26 <_dtoa_r+0x2de>
  404dd4:	f3af 8000 	nop.w
  404dd8:	636f4361 	.word	0x636f4361
  404ddc:	3fd287a7 	.word	0x3fd287a7
  404de0:	8b60c8b3 	.word	0x8b60c8b3
  404de4:	3fc68a28 	.word	0x3fc68a28
  404de8:	509f79fb 	.word	0x509f79fb
  404dec:	3fd34413 	.word	0x3fd34413
  404df0:	7ff00000 	.word	0x7ff00000
  404df4:	004084fd 	.word	0x004084fd
  404df8:	00408520 	.word	0x00408520
  404dfc:	0040852c 	.word	0x0040852c
  404e00:	3ff80000 	.word	0x3ff80000
  404e04:	00408558 	.word	0x00408558
  404e08:	004084fc 	.word	0x004084fc
  404e0c:	40240000 	.word	0x40240000
  404e10:	f002 fb50 	bl	4074b4 <__aeabi_dmul>
  404e14:	2200      	movs	r2, #0
  404e16:	2300      	movs	r3, #0
  404e18:	4606      	mov	r6, r0
  404e1a:	460f      	mov	r7, r1
  404e1c:	f002 fdb2 	bl	407984 <__aeabi_dcmpeq>
  404e20:	2800      	cmp	r0, #0
  404e22:	f040 83c1 	bne.w	4055a8 <_dtoa_r+0xa60>
  404e26:	4642      	mov	r2, r8
  404e28:	464b      	mov	r3, r9
  404e2a:	4630      	mov	r0, r6
  404e2c:	4639      	mov	r1, r7
  404e2e:	f002 fc6b 	bl	407708 <__aeabi_ddiv>
  404e32:	f002 fdef 	bl	407a14 <__aeabi_d2iz>
  404e36:	4604      	mov	r4, r0
  404e38:	f002 fad6 	bl	4073e8 <__aeabi_i2d>
  404e3c:	4642      	mov	r2, r8
  404e3e:	464b      	mov	r3, r9
  404e40:	f002 fb38 	bl	4074b4 <__aeabi_dmul>
  404e44:	4602      	mov	r2, r0
  404e46:	460b      	mov	r3, r1
  404e48:	4630      	mov	r0, r6
  404e4a:	4639      	mov	r1, r7
  404e4c:	f002 f97e 	bl	40714c <__aeabi_dsub>
  404e50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404e54:	9e04      	ldr	r6, [sp, #16]
  404e56:	f805 eb01 	strb.w	lr, [r5], #1
  404e5a:	eba5 0e06 	sub.w	lr, r5, r6
  404e5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404e60:	45b6      	cmp	lr, r6
  404e62:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404e66:	4652      	mov	r2, sl
  404e68:	465b      	mov	r3, fp
  404e6a:	d1d1      	bne.n	404e10 <_dtoa_r+0x2c8>
  404e6c:	46a0      	mov	r8, r4
  404e6e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e74:	4606      	mov	r6, r0
  404e76:	460f      	mov	r7, r1
  404e78:	4632      	mov	r2, r6
  404e7a:	463b      	mov	r3, r7
  404e7c:	4630      	mov	r0, r6
  404e7e:	4639      	mov	r1, r7
  404e80:	f002 f966 	bl	407150 <__adddf3>
  404e84:	4606      	mov	r6, r0
  404e86:	460f      	mov	r7, r1
  404e88:	4602      	mov	r2, r0
  404e8a:	460b      	mov	r3, r1
  404e8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404e90:	f002 fd82 	bl	407998 <__aeabi_dcmplt>
  404e94:	b948      	cbnz	r0, 404eaa <_dtoa_r+0x362>
  404e96:	4632      	mov	r2, r6
  404e98:	463b      	mov	r3, r7
  404e9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404e9e:	f002 fd71 	bl	407984 <__aeabi_dcmpeq>
  404ea2:	b1a8      	cbz	r0, 404ed0 <_dtoa_r+0x388>
  404ea4:	f018 0f01 	tst.w	r8, #1
  404ea8:	d012      	beq.n	404ed0 <_dtoa_r+0x388>
  404eaa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404eae:	9a04      	ldr	r2, [sp, #16]
  404eb0:	1e6b      	subs	r3, r5, #1
  404eb2:	e004      	b.n	404ebe <_dtoa_r+0x376>
  404eb4:	429a      	cmp	r2, r3
  404eb6:	f000 8401 	beq.w	4056bc <_dtoa_r+0xb74>
  404eba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404ebe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404ec2:	f103 0501 	add.w	r5, r3, #1
  404ec6:	d0f5      	beq.n	404eb4 <_dtoa_r+0x36c>
  404ec8:	f108 0801 	add.w	r8, r8, #1
  404ecc:	f883 8000 	strb.w	r8, [r3]
  404ed0:	4649      	mov	r1, r9
  404ed2:	4620      	mov	r0, r4
  404ed4:	f001 f960 	bl	406198 <_Bfree>
  404ed8:	2200      	movs	r2, #0
  404eda:	9b02      	ldr	r3, [sp, #8]
  404edc:	702a      	strb	r2, [r5, #0]
  404ede:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404ee0:	3301      	adds	r3, #1
  404ee2:	6013      	str	r3, [r2, #0]
  404ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	f000 839e 	beq.w	405628 <_dtoa_r+0xae0>
  404eec:	9804      	ldr	r0, [sp, #16]
  404eee:	601d      	str	r5, [r3, #0]
  404ef0:	b01b      	add	sp, #108	; 0x6c
  404ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ef8:	2a00      	cmp	r2, #0
  404efa:	d03e      	beq.n	404f7a <_dtoa_r+0x432>
  404efc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404efe:	2a01      	cmp	r2, #1
  404f00:	f340 8311 	ble.w	405526 <_dtoa_r+0x9de>
  404f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404f08:	1e5f      	subs	r7, r3, #1
  404f0a:	42ba      	cmp	r2, r7
  404f0c:	f2c0 838f 	blt.w	40562e <_dtoa_r+0xae6>
  404f10:	1bd7      	subs	r7, r2, r7
  404f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f14:	2b00      	cmp	r3, #0
  404f16:	f2c0 848b 	blt.w	405830 <_dtoa_r+0xce8>
  404f1a:	9d08      	ldr	r5, [sp, #32]
  404f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f1e:	9a08      	ldr	r2, [sp, #32]
  404f20:	441a      	add	r2, r3
  404f22:	9208      	str	r2, [sp, #32]
  404f24:	9a06      	ldr	r2, [sp, #24]
  404f26:	2101      	movs	r1, #1
  404f28:	441a      	add	r2, r3
  404f2a:	4620      	mov	r0, r4
  404f2c:	9206      	str	r2, [sp, #24]
  404f2e:	f001 f9cd 	bl	4062cc <__i2b>
  404f32:	4606      	mov	r6, r0
  404f34:	e024      	b.n	404f80 <_dtoa_r+0x438>
  404f36:	2301      	movs	r3, #1
  404f38:	930e      	str	r3, [sp, #56]	; 0x38
  404f3a:	e6af      	b.n	404c9c <_dtoa_r+0x154>
  404f3c:	9a08      	ldr	r2, [sp, #32]
  404f3e:	9b02      	ldr	r3, [sp, #8]
  404f40:	1ad2      	subs	r2, r2, r3
  404f42:	425b      	negs	r3, r3
  404f44:	930c      	str	r3, [sp, #48]	; 0x30
  404f46:	2300      	movs	r3, #0
  404f48:	9208      	str	r2, [sp, #32]
  404f4a:	930d      	str	r3, [sp, #52]	; 0x34
  404f4c:	e6b8      	b.n	404cc0 <_dtoa_r+0x178>
  404f4e:	f1c7 0301 	rsb	r3, r7, #1
  404f52:	9308      	str	r3, [sp, #32]
  404f54:	2300      	movs	r3, #0
  404f56:	9306      	str	r3, [sp, #24]
  404f58:	e6a7      	b.n	404caa <_dtoa_r+0x162>
  404f5a:	9d02      	ldr	r5, [sp, #8]
  404f5c:	4628      	mov	r0, r5
  404f5e:	f002 fa43 	bl	4073e8 <__aeabi_i2d>
  404f62:	4602      	mov	r2, r0
  404f64:	460b      	mov	r3, r1
  404f66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404f6a:	f002 fd0b 	bl	407984 <__aeabi_dcmpeq>
  404f6e:	2800      	cmp	r0, #0
  404f70:	f47f ae80 	bne.w	404c74 <_dtoa_r+0x12c>
  404f74:	1e6b      	subs	r3, r5, #1
  404f76:	9302      	str	r3, [sp, #8]
  404f78:	e67c      	b.n	404c74 <_dtoa_r+0x12c>
  404f7a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404f7c:	9d08      	ldr	r5, [sp, #32]
  404f7e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404f80:	2d00      	cmp	r5, #0
  404f82:	dd0c      	ble.n	404f9e <_dtoa_r+0x456>
  404f84:	9906      	ldr	r1, [sp, #24]
  404f86:	2900      	cmp	r1, #0
  404f88:	460b      	mov	r3, r1
  404f8a:	dd08      	ble.n	404f9e <_dtoa_r+0x456>
  404f8c:	42a9      	cmp	r1, r5
  404f8e:	9a08      	ldr	r2, [sp, #32]
  404f90:	bfa8      	it	ge
  404f92:	462b      	movge	r3, r5
  404f94:	1ad2      	subs	r2, r2, r3
  404f96:	1aed      	subs	r5, r5, r3
  404f98:	1acb      	subs	r3, r1, r3
  404f9a:	9208      	str	r2, [sp, #32]
  404f9c:	9306      	str	r3, [sp, #24]
  404f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404fa0:	b1d3      	cbz	r3, 404fd8 <_dtoa_r+0x490>
  404fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fa4:	2b00      	cmp	r3, #0
  404fa6:	f000 82b7 	beq.w	405518 <_dtoa_r+0x9d0>
  404faa:	2f00      	cmp	r7, #0
  404fac:	dd10      	ble.n	404fd0 <_dtoa_r+0x488>
  404fae:	4631      	mov	r1, r6
  404fb0:	463a      	mov	r2, r7
  404fb2:	4620      	mov	r0, r4
  404fb4:	f001 fa26 	bl	406404 <__pow5mult>
  404fb8:	464a      	mov	r2, r9
  404fba:	4601      	mov	r1, r0
  404fbc:	4606      	mov	r6, r0
  404fbe:	4620      	mov	r0, r4
  404fc0:	f001 f98e 	bl	4062e0 <__multiply>
  404fc4:	4649      	mov	r1, r9
  404fc6:	4680      	mov	r8, r0
  404fc8:	4620      	mov	r0, r4
  404fca:	f001 f8e5 	bl	406198 <_Bfree>
  404fce:	46c1      	mov	r9, r8
  404fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404fd2:	1bda      	subs	r2, r3, r7
  404fd4:	f040 82a1 	bne.w	40551a <_dtoa_r+0x9d2>
  404fd8:	2101      	movs	r1, #1
  404fda:	4620      	mov	r0, r4
  404fdc:	f001 f976 	bl	4062cc <__i2b>
  404fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404fe2:	2b00      	cmp	r3, #0
  404fe4:	4680      	mov	r8, r0
  404fe6:	dd1c      	ble.n	405022 <_dtoa_r+0x4da>
  404fe8:	4601      	mov	r1, r0
  404fea:	461a      	mov	r2, r3
  404fec:	4620      	mov	r0, r4
  404fee:	f001 fa09 	bl	406404 <__pow5mult>
  404ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ff4:	2b01      	cmp	r3, #1
  404ff6:	4680      	mov	r8, r0
  404ff8:	f340 8254 	ble.w	4054a4 <_dtoa_r+0x95c>
  404ffc:	2300      	movs	r3, #0
  404ffe:	930c      	str	r3, [sp, #48]	; 0x30
  405000:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405004:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405008:	6918      	ldr	r0, [r3, #16]
  40500a:	f001 f90f 	bl	40622c <__hi0bits>
  40500e:	f1c0 0020 	rsb	r0, r0, #32
  405012:	e010      	b.n	405036 <_dtoa_r+0x4ee>
  405014:	f1c3 0520 	rsb	r5, r3, #32
  405018:	fa0a f005 	lsl.w	r0, sl, r5
  40501c:	e674      	b.n	404d08 <_dtoa_r+0x1c0>
  40501e:	900e      	str	r0, [sp, #56]	; 0x38
  405020:	e63c      	b.n	404c9c <_dtoa_r+0x154>
  405022:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405024:	2b01      	cmp	r3, #1
  405026:	f340 8287 	ble.w	405538 <_dtoa_r+0x9f0>
  40502a:	2300      	movs	r3, #0
  40502c:	930c      	str	r3, [sp, #48]	; 0x30
  40502e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405030:	2001      	movs	r0, #1
  405032:	2b00      	cmp	r3, #0
  405034:	d1e4      	bne.n	405000 <_dtoa_r+0x4b8>
  405036:	9a06      	ldr	r2, [sp, #24]
  405038:	4410      	add	r0, r2
  40503a:	f010 001f 	ands.w	r0, r0, #31
  40503e:	f000 80a1 	beq.w	405184 <_dtoa_r+0x63c>
  405042:	f1c0 0320 	rsb	r3, r0, #32
  405046:	2b04      	cmp	r3, #4
  405048:	f340 849e 	ble.w	405988 <_dtoa_r+0xe40>
  40504c:	9b08      	ldr	r3, [sp, #32]
  40504e:	f1c0 001c 	rsb	r0, r0, #28
  405052:	4403      	add	r3, r0
  405054:	9308      	str	r3, [sp, #32]
  405056:	4613      	mov	r3, r2
  405058:	4403      	add	r3, r0
  40505a:	4405      	add	r5, r0
  40505c:	9306      	str	r3, [sp, #24]
  40505e:	9b08      	ldr	r3, [sp, #32]
  405060:	2b00      	cmp	r3, #0
  405062:	dd05      	ble.n	405070 <_dtoa_r+0x528>
  405064:	4649      	mov	r1, r9
  405066:	461a      	mov	r2, r3
  405068:	4620      	mov	r0, r4
  40506a:	f001 fa1b 	bl	4064a4 <__lshift>
  40506e:	4681      	mov	r9, r0
  405070:	9b06      	ldr	r3, [sp, #24]
  405072:	2b00      	cmp	r3, #0
  405074:	dd05      	ble.n	405082 <_dtoa_r+0x53a>
  405076:	4641      	mov	r1, r8
  405078:	461a      	mov	r2, r3
  40507a:	4620      	mov	r0, r4
  40507c:	f001 fa12 	bl	4064a4 <__lshift>
  405080:	4680      	mov	r8, r0
  405082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405084:	2b00      	cmp	r3, #0
  405086:	f040 8086 	bne.w	405196 <_dtoa_r+0x64e>
  40508a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40508c:	2b00      	cmp	r3, #0
  40508e:	f340 8266 	ble.w	40555e <_dtoa_r+0xa16>
  405092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405094:	2b00      	cmp	r3, #0
  405096:	f000 8098 	beq.w	4051ca <_dtoa_r+0x682>
  40509a:	2d00      	cmp	r5, #0
  40509c:	dd05      	ble.n	4050aa <_dtoa_r+0x562>
  40509e:	4631      	mov	r1, r6
  4050a0:	462a      	mov	r2, r5
  4050a2:	4620      	mov	r0, r4
  4050a4:	f001 f9fe 	bl	4064a4 <__lshift>
  4050a8:	4606      	mov	r6, r0
  4050aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4050ac:	2b00      	cmp	r3, #0
  4050ae:	f040 8337 	bne.w	405720 <_dtoa_r+0xbd8>
  4050b2:	9606      	str	r6, [sp, #24]
  4050b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050b6:	9a04      	ldr	r2, [sp, #16]
  4050b8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4050bc:	3b01      	subs	r3, #1
  4050be:	18d3      	adds	r3, r2, r3
  4050c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4050c2:	f00a 0301 	and.w	r3, sl, #1
  4050c6:	930c      	str	r3, [sp, #48]	; 0x30
  4050c8:	4617      	mov	r7, r2
  4050ca:	46c2      	mov	sl, r8
  4050cc:	4651      	mov	r1, sl
  4050ce:	4648      	mov	r0, r9
  4050d0:	f7ff fca6 	bl	404a20 <quorem>
  4050d4:	4631      	mov	r1, r6
  4050d6:	4605      	mov	r5, r0
  4050d8:	4648      	mov	r0, r9
  4050da:	f001 fa35 	bl	406548 <__mcmp>
  4050de:	465a      	mov	r2, fp
  4050e0:	900a      	str	r0, [sp, #40]	; 0x28
  4050e2:	4651      	mov	r1, sl
  4050e4:	4620      	mov	r0, r4
  4050e6:	f001 fa4b 	bl	406580 <__mdiff>
  4050ea:	68c2      	ldr	r2, [r0, #12]
  4050ec:	4680      	mov	r8, r0
  4050ee:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4050f2:	2a00      	cmp	r2, #0
  4050f4:	f040 822b 	bne.w	40554e <_dtoa_r+0xa06>
  4050f8:	4601      	mov	r1, r0
  4050fa:	4648      	mov	r0, r9
  4050fc:	9308      	str	r3, [sp, #32]
  4050fe:	f001 fa23 	bl	406548 <__mcmp>
  405102:	4641      	mov	r1, r8
  405104:	9006      	str	r0, [sp, #24]
  405106:	4620      	mov	r0, r4
  405108:	f001 f846 	bl	406198 <_Bfree>
  40510c:	9a06      	ldr	r2, [sp, #24]
  40510e:	9b08      	ldr	r3, [sp, #32]
  405110:	b932      	cbnz	r2, 405120 <_dtoa_r+0x5d8>
  405112:	9924      	ldr	r1, [sp, #144]	; 0x90
  405114:	b921      	cbnz	r1, 405120 <_dtoa_r+0x5d8>
  405116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405118:	2a00      	cmp	r2, #0
  40511a:	f000 83ef 	beq.w	4058fc <_dtoa_r+0xdb4>
  40511e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405120:	990a      	ldr	r1, [sp, #40]	; 0x28
  405122:	2900      	cmp	r1, #0
  405124:	f2c0 829f 	blt.w	405666 <_dtoa_r+0xb1e>
  405128:	d105      	bne.n	405136 <_dtoa_r+0x5ee>
  40512a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40512c:	b919      	cbnz	r1, 405136 <_dtoa_r+0x5ee>
  40512e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405130:	2900      	cmp	r1, #0
  405132:	f000 8298 	beq.w	405666 <_dtoa_r+0xb1e>
  405136:	2a00      	cmp	r2, #0
  405138:	f300 8306 	bgt.w	405748 <_dtoa_r+0xc00>
  40513c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40513e:	703b      	strb	r3, [r7, #0]
  405140:	f107 0801 	add.w	r8, r7, #1
  405144:	4297      	cmp	r7, r2
  405146:	4645      	mov	r5, r8
  405148:	f000 830c 	beq.w	405764 <_dtoa_r+0xc1c>
  40514c:	4649      	mov	r1, r9
  40514e:	2300      	movs	r3, #0
  405150:	220a      	movs	r2, #10
  405152:	4620      	mov	r0, r4
  405154:	f001 f82a 	bl	4061ac <__multadd>
  405158:	455e      	cmp	r6, fp
  40515a:	4681      	mov	r9, r0
  40515c:	4631      	mov	r1, r6
  40515e:	f04f 0300 	mov.w	r3, #0
  405162:	f04f 020a 	mov.w	r2, #10
  405166:	4620      	mov	r0, r4
  405168:	f000 81eb 	beq.w	405542 <_dtoa_r+0x9fa>
  40516c:	f001 f81e 	bl	4061ac <__multadd>
  405170:	4659      	mov	r1, fp
  405172:	4606      	mov	r6, r0
  405174:	2300      	movs	r3, #0
  405176:	220a      	movs	r2, #10
  405178:	4620      	mov	r0, r4
  40517a:	f001 f817 	bl	4061ac <__multadd>
  40517e:	4647      	mov	r7, r8
  405180:	4683      	mov	fp, r0
  405182:	e7a3      	b.n	4050cc <_dtoa_r+0x584>
  405184:	201c      	movs	r0, #28
  405186:	9b08      	ldr	r3, [sp, #32]
  405188:	4403      	add	r3, r0
  40518a:	9308      	str	r3, [sp, #32]
  40518c:	9b06      	ldr	r3, [sp, #24]
  40518e:	4403      	add	r3, r0
  405190:	4405      	add	r5, r0
  405192:	9306      	str	r3, [sp, #24]
  405194:	e763      	b.n	40505e <_dtoa_r+0x516>
  405196:	4641      	mov	r1, r8
  405198:	4648      	mov	r0, r9
  40519a:	f001 f9d5 	bl	406548 <__mcmp>
  40519e:	2800      	cmp	r0, #0
  4051a0:	f6bf af73 	bge.w	40508a <_dtoa_r+0x542>
  4051a4:	9f02      	ldr	r7, [sp, #8]
  4051a6:	4649      	mov	r1, r9
  4051a8:	2300      	movs	r3, #0
  4051aa:	220a      	movs	r2, #10
  4051ac:	4620      	mov	r0, r4
  4051ae:	3f01      	subs	r7, #1
  4051b0:	9702      	str	r7, [sp, #8]
  4051b2:	f000 fffb 	bl	4061ac <__multadd>
  4051b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4051b8:	4681      	mov	r9, r0
  4051ba:	2b00      	cmp	r3, #0
  4051bc:	f040 83b6 	bne.w	40592c <_dtoa_r+0xde4>
  4051c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4051c2:	2b00      	cmp	r3, #0
  4051c4:	f340 83bf 	ble.w	405946 <_dtoa_r+0xdfe>
  4051c8:	930a      	str	r3, [sp, #40]	; 0x28
  4051ca:	f8dd b010 	ldr.w	fp, [sp, #16]
  4051ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4051d0:	465d      	mov	r5, fp
  4051d2:	e002      	b.n	4051da <_dtoa_r+0x692>
  4051d4:	f000 ffea 	bl	4061ac <__multadd>
  4051d8:	4681      	mov	r9, r0
  4051da:	4641      	mov	r1, r8
  4051dc:	4648      	mov	r0, r9
  4051de:	f7ff fc1f 	bl	404a20 <quorem>
  4051e2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4051e6:	f805 ab01 	strb.w	sl, [r5], #1
  4051ea:	eba5 030b 	sub.w	r3, r5, fp
  4051ee:	42bb      	cmp	r3, r7
  4051f0:	f04f 020a 	mov.w	r2, #10
  4051f4:	f04f 0300 	mov.w	r3, #0
  4051f8:	4649      	mov	r1, r9
  4051fa:	4620      	mov	r0, r4
  4051fc:	dbea      	blt.n	4051d4 <_dtoa_r+0x68c>
  4051fe:	9b04      	ldr	r3, [sp, #16]
  405200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405202:	2a01      	cmp	r2, #1
  405204:	bfac      	ite	ge
  405206:	189b      	addge	r3, r3, r2
  405208:	3301      	addlt	r3, #1
  40520a:	461d      	mov	r5, r3
  40520c:	f04f 0b00 	mov.w	fp, #0
  405210:	4649      	mov	r1, r9
  405212:	2201      	movs	r2, #1
  405214:	4620      	mov	r0, r4
  405216:	f001 f945 	bl	4064a4 <__lshift>
  40521a:	4641      	mov	r1, r8
  40521c:	4681      	mov	r9, r0
  40521e:	f001 f993 	bl	406548 <__mcmp>
  405222:	2800      	cmp	r0, #0
  405224:	f340 823d 	ble.w	4056a2 <_dtoa_r+0xb5a>
  405228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40522c:	9904      	ldr	r1, [sp, #16]
  40522e:	1e6b      	subs	r3, r5, #1
  405230:	e004      	b.n	40523c <_dtoa_r+0x6f4>
  405232:	428b      	cmp	r3, r1
  405234:	f000 81ae 	beq.w	405594 <_dtoa_r+0xa4c>
  405238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40523c:	2a39      	cmp	r2, #57	; 0x39
  40523e:	f103 0501 	add.w	r5, r3, #1
  405242:	d0f6      	beq.n	405232 <_dtoa_r+0x6ea>
  405244:	3201      	adds	r2, #1
  405246:	701a      	strb	r2, [r3, #0]
  405248:	4641      	mov	r1, r8
  40524a:	4620      	mov	r0, r4
  40524c:	f000 ffa4 	bl	406198 <_Bfree>
  405250:	2e00      	cmp	r6, #0
  405252:	f43f ae3d 	beq.w	404ed0 <_dtoa_r+0x388>
  405256:	f1bb 0f00 	cmp.w	fp, #0
  40525a:	d005      	beq.n	405268 <_dtoa_r+0x720>
  40525c:	45b3      	cmp	fp, r6
  40525e:	d003      	beq.n	405268 <_dtoa_r+0x720>
  405260:	4659      	mov	r1, fp
  405262:	4620      	mov	r0, r4
  405264:	f000 ff98 	bl	406198 <_Bfree>
  405268:	4631      	mov	r1, r6
  40526a:	4620      	mov	r0, r4
  40526c:	f000 ff94 	bl	406198 <_Bfree>
  405270:	e62e      	b.n	404ed0 <_dtoa_r+0x388>
  405272:	2300      	movs	r3, #0
  405274:	930b      	str	r3, [sp, #44]	; 0x2c
  405276:	9b02      	ldr	r3, [sp, #8]
  405278:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40527a:	4413      	add	r3, r2
  40527c:	930f      	str	r3, [sp, #60]	; 0x3c
  40527e:	3301      	adds	r3, #1
  405280:	2b01      	cmp	r3, #1
  405282:	461f      	mov	r7, r3
  405284:	461e      	mov	r6, r3
  405286:	930a      	str	r3, [sp, #40]	; 0x28
  405288:	bfb8      	it	lt
  40528a:	2701      	movlt	r7, #1
  40528c:	2100      	movs	r1, #0
  40528e:	2f17      	cmp	r7, #23
  405290:	6461      	str	r1, [r4, #68]	; 0x44
  405292:	d90a      	bls.n	4052aa <_dtoa_r+0x762>
  405294:	2201      	movs	r2, #1
  405296:	2304      	movs	r3, #4
  405298:	005b      	lsls	r3, r3, #1
  40529a:	f103 0014 	add.w	r0, r3, #20
  40529e:	4287      	cmp	r7, r0
  4052a0:	4611      	mov	r1, r2
  4052a2:	f102 0201 	add.w	r2, r2, #1
  4052a6:	d2f7      	bcs.n	405298 <_dtoa_r+0x750>
  4052a8:	6461      	str	r1, [r4, #68]	; 0x44
  4052aa:	4620      	mov	r0, r4
  4052ac:	f000 ff4e 	bl	40614c <_Balloc>
  4052b0:	2e0e      	cmp	r6, #14
  4052b2:	9004      	str	r0, [sp, #16]
  4052b4:	6420      	str	r0, [r4, #64]	; 0x40
  4052b6:	f63f ad41 	bhi.w	404d3c <_dtoa_r+0x1f4>
  4052ba:	2d00      	cmp	r5, #0
  4052bc:	f43f ad3e 	beq.w	404d3c <_dtoa_r+0x1f4>
  4052c0:	9902      	ldr	r1, [sp, #8]
  4052c2:	2900      	cmp	r1, #0
  4052c4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4052c8:	f340 8202 	ble.w	4056d0 <_dtoa_r+0xb88>
  4052cc:	4bb8      	ldr	r3, [pc, #736]	; (4055b0 <_dtoa_r+0xa68>)
  4052ce:	f001 020f 	and.w	r2, r1, #15
  4052d2:	110d      	asrs	r5, r1, #4
  4052d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4052d8:	06e9      	lsls	r1, r5, #27
  4052da:	e9d3 6700 	ldrd	r6, r7, [r3]
  4052de:	f140 81ae 	bpl.w	40563e <_dtoa_r+0xaf6>
  4052e2:	4bb4      	ldr	r3, [pc, #720]	; (4055b4 <_dtoa_r+0xa6c>)
  4052e4:	4650      	mov	r0, sl
  4052e6:	4659      	mov	r1, fp
  4052e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4052ec:	f002 fa0c 	bl	407708 <__aeabi_ddiv>
  4052f0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4052f4:	f005 050f 	and.w	r5, r5, #15
  4052f8:	f04f 0a03 	mov.w	sl, #3
  4052fc:	b18d      	cbz	r5, 405322 <_dtoa_r+0x7da>
  4052fe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4055b4 <_dtoa_r+0xa6c>
  405302:	07ea      	lsls	r2, r5, #31
  405304:	d509      	bpl.n	40531a <_dtoa_r+0x7d2>
  405306:	4630      	mov	r0, r6
  405308:	4639      	mov	r1, r7
  40530a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40530e:	f002 f8d1 	bl	4074b4 <__aeabi_dmul>
  405312:	f10a 0a01 	add.w	sl, sl, #1
  405316:	4606      	mov	r6, r0
  405318:	460f      	mov	r7, r1
  40531a:	106d      	asrs	r5, r5, #1
  40531c:	f108 0808 	add.w	r8, r8, #8
  405320:	d1ef      	bne.n	405302 <_dtoa_r+0x7ba>
  405322:	463b      	mov	r3, r7
  405324:	4632      	mov	r2, r6
  405326:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40532a:	f002 f9ed 	bl	407708 <__aeabi_ddiv>
  40532e:	4607      	mov	r7, r0
  405330:	4688      	mov	r8, r1
  405332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405334:	b143      	cbz	r3, 405348 <_dtoa_r+0x800>
  405336:	2200      	movs	r2, #0
  405338:	4b9f      	ldr	r3, [pc, #636]	; (4055b8 <_dtoa_r+0xa70>)
  40533a:	4638      	mov	r0, r7
  40533c:	4641      	mov	r1, r8
  40533e:	f002 fb2b 	bl	407998 <__aeabi_dcmplt>
  405342:	2800      	cmp	r0, #0
  405344:	f040 8286 	bne.w	405854 <_dtoa_r+0xd0c>
  405348:	4650      	mov	r0, sl
  40534a:	f002 f84d 	bl	4073e8 <__aeabi_i2d>
  40534e:	463a      	mov	r2, r7
  405350:	4643      	mov	r3, r8
  405352:	f002 f8af 	bl	4074b4 <__aeabi_dmul>
  405356:	4b99      	ldr	r3, [pc, #612]	; (4055bc <_dtoa_r+0xa74>)
  405358:	2200      	movs	r2, #0
  40535a:	f001 fef9 	bl	407150 <__adddf3>
  40535e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405360:	4605      	mov	r5, r0
  405362:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405366:	2b00      	cmp	r3, #0
  405368:	f000 813e 	beq.w	4055e8 <_dtoa_r+0xaa0>
  40536c:	9b02      	ldr	r3, [sp, #8]
  40536e:	9315      	str	r3, [sp, #84]	; 0x54
  405370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405372:	9312      	str	r3, [sp, #72]	; 0x48
  405374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405376:	2b00      	cmp	r3, #0
  405378:	f000 81fa 	beq.w	405770 <_dtoa_r+0xc28>
  40537c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40537e:	4b8c      	ldr	r3, [pc, #560]	; (4055b0 <_dtoa_r+0xa68>)
  405380:	498f      	ldr	r1, [pc, #572]	; (4055c0 <_dtoa_r+0xa78>)
  405382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405386:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40538a:	2000      	movs	r0, #0
  40538c:	f002 f9bc 	bl	407708 <__aeabi_ddiv>
  405390:	462a      	mov	r2, r5
  405392:	4633      	mov	r3, r6
  405394:	f001 feda 	bl	40714c <__aeabi_dsub>
  405398:	4682      	mov	sl, r0
  40539a:	468b      	mov	fp, r1
  40539c:	4638      	mov	r0, r7
  40539e:	4641      	mov	r1, r8
  4053a0:	f002 fb38 	bl	407a14 <__aeabi_d2iz>
  4053a4:	4605      	mov	r5, r0
  4053a6:	f002 f81f 	bl	4073e8 <__aeabi_i2d>
  4053aa:	4602      	mov	r2, r0
  4053ac:	460b      	mov	r3, r1
  4053ae:	4638      	mov	r0, r7
  4053b0:	4641      	mov	r1, r8
  4053b2:	f001 fecb 	bl	40714c <__aeabi_dsub>
  4053b6:	3530      	adds	r5, #48	; 0x30
  4053b8:	fa5f f885 	uxtb.w	r8, r5
  4053bc:	9d04      	ldr	r5, [sp, #16]
  4053be:	4606      	mov	r6, r0
  4053c0:	460f      	mov	r7, r1
  4053c2:	f885 8000 	strb.w	r8, [r5]
  4053c6:	4602      	mov	r2, r0
  4053c8:	460b      	mov	r3, r1
  4053ca:	4650      	mov	r0, sl
  4053cc:	4659      	mov	r1, fp
  4053ce:	3501      	adds	r5, #1
  4053d0:	f002 fb00 	bl	4079d4 <__aeabi_dcmpgt>
  4053d4:	2800      	cmp	r0, #0
  4053d6:	d154      	bne.n	405482 <_dtoa_r+0x93a>
  4053d8:	4632      	mov	r2, r6
  4053da:	463b      	mov	r3, r7
  4053dc:	2000      	movs	r0, #0
  4053de:	4976      	ldr	r1, [pc, #472]	; (4055b8 <_dtoa_r+0xa70>)
  4053e0:	f001 feb4 	bl	40714c <__aeabi_dsub>
  4053e4:	4602      	mov	r2, r0
  4053e6:	460b      	mov	r3, r1
  4053e8:	4650      	mov	r0, sl
  4053ea:	4659      	mov	r1, fp
  4053ec:	f002 faf2 	bl	4079d4 <__aeabi_dcmpgt>
  4053f0:	2800      	cmp	r0, #0
  4053f2:	f040 8270 	bne.w	4058d6 <_dtoa_r+0xd8e>
  4053f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053f8:	2a01      	cmp	r2, #1
  4053fa:	f000 8111 	beq.w	405620 <_dtoa_r+0xad8>
  4053fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405400:	9a04      	ldr	r2, [sp, #16]
  405402:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405406:	4413      	add	r3, r2
  405408:	4699      	mov	r9, r3
  40540a:	e00d      	b.n	405428 <_dtoa_r+0x8e0>
  40540c:	2000      	movs	r0, #0
  40540e:	496a      	ldr	r1, [pc, #424]	; (4055b8 <_dtoa_r+0xa70>)
  405410:	f001 fe9c 	bl	40714c <__aeabi_dsub>
  405414:	4652      	mov	r2, sl
  405416:	465b      	mov	r3, fp
  405418:	f002 fabe 	bl	407998 <__aeabi_dcmplt>
  40541c:	2800      	cmp	r0, #0
  40541e:	f040 8258 	bne.w	4058d2 <_dtoa_r+0xd8a>
  405422:	454d      	cmp	r5, r9
  405424:	f000 80fa 	beq.w	40561c <_dtoa_r+0xad4>
  405428:	4650      	mov	r0, sl
  40542a:	4659      	mov	r1, fp
  40542c:	2200      	movs	r2, #0
  40542e:	4b65      	ldr	r3, [pc, #404]	; (4055c4 <_dtoa_r+0xa7c>)
  405430:	f002 f840 	bl	4074b4 <__aeabi_dmul>
  405434:	2200      	movs	r2, #0
  405436:	4b63      	ldr	r3, [pc, #396]	; (4055c4 <_dtoa_r+0xa7c>)
  405438:	4682      	mov	sl, r0
  40543a:	468b      	mov	fp, r1
  40543c:	4630      	mov	r0, r6
  40543e:	4639      	mov	r1, r7
  405440:	f002 f838 	bl	4074b4 <__aeabi_dmul>
  405444:	460f      	mov	r7, r1
  405446:	4606      	mov	r6, r0
  405448:	f002 fae4 	bl	407a14 <__aeabi_d2iz>
  40544c:	4680      	mov	r8, r0
  40544e:	f001 ffcb 	bl	4073e8 <__aeabi_i2d>
  405452:	4602      	mov	r2, r0
  405454:	460b      	mov	r3, r1
  405456:	4630      	mov	r0, r6
  405458:	4639      	mov	r1, r7
  40545a:	f001 fe77 	bl	40714c <__aeabi_dsub>
  40545e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405462:	fa5f f888 	uxtb.w	r8, r8
  405466:	4652      	mov	r2, sl
  405468:	465b      	mov	r3, fp
  40546a:	f805 8b01 	strb.w	r8, [r5], #1
  40546e:	4606      	mov	r6, r0
  405470:	460f      	mov	r7, r1
  405472:	f002 fa91 	bl	407998 <__aeabi_dcmplt>
  405476:	4632      	mov	r2, r6
  405478:	463b      	mov	r3, r7
  40547a:	2800      	cmp	r0, #0
  40547c:	d0c6      	beq.n	40540c <_dtoa_r+0x8c4>
  40547e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405482:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405484:	9302      	str	r3, [sp, #8]
  405486:	e523      	b.n	404ed0 <_dtoa_r+0x388>
  405488:	2300      	movs	r3, #0
  40548a:	930b      	str	r3, [sp, #44]	; 0x2c
  40548c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40548e:	2b00      	cmp	r3, #0
  405490:	f340 80dc 	ble.w	40564c <_dtoa_r+0xb04>
  405494:	461f      	mov	r7, r3
  405496:	461e      	mov	r6, r3
  405498:	930f      	str	r3, [sp, #60]	; 0x3c
  40549a:	930a      	str	r3, [sp, #40]	; 0x28
  40549c:	e6f6      	b.n	40528c <_dtoa_r+0x744>
  40549e:	2301      	movs	r3, #1
  4054a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4054a2:	e7f3      	b.n	40548c <_dtoa_r+0x944>
  4054a4:	f1ba 0f00 	cmp.w	sl, #0
  4054a8:	f47f ada8 	bne.w	404ffc <_dtoa_r+0x4b4>
  4054ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4054b0:	2b00      	cmp	r3, #0
  4054b2:	f47f adba 	bne.w	40502a <_dtoa_r+0x4e2>
  4054b6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4054ba:	0d3f      	lsrs	r7, r7, #20
  4054bc:	053f      	lsls	r7, r7, #20
  4054be:	2f00      	cmp	r7, #0
  4054c0:	f000 820d 	beq.w	4058de <_dtoa_r+0xd96>
  4054c4:	9b08      	ldr	r3, [sp, #32]
  4054c6:	3301      	adds	r3, #1
  4054c8:	9308      	str	r3, [sp, #32]
  4054ca:	9b06      	ldr	r3, [sp, #24]
  4054cc:	3301      	adds	r3, #1
  4054ce:	9306      	str	r3, [sp, #24]
  4054d0:	2301      	movs	r3, #1
  4054d2:	930c      	str	r3, [sp, #48]	; 0x30
  4054d4:	e5ab      	b.n	40502e <_dtoa_r+0x4e6>
  4054d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054d8:	2b00      	cmp	r3, #0
  4054da:	f73f ac42 	bgt.w	404d62 <_dtoa_r+0x21a>
  4054de:	f040 8221 	bne.w	405924 <_dtoa_r+0xddc>
  4054e2:	2200      	movs	r2, #0
  4054e4:	4b38      	ldr	r3, [pc, #224]	; (4055c8 <_dtoa_r+0xa80>)
  4054e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4054ea:	f001 ffe3 	bl	4074b4 <__aeabi_dmul>
  4054ee:	4652      	mov	r2, sl
  4054f0:	465b      	mov	r3, fp
  4054f2:	f002 fa65 	bl	4079c0 <__aeabi_dcmpge>
  4054f6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4054fa:	4646      	mov	r6, r8
  4054fc:	2800      	cmp	r0, #0
  4054fe:	d041      	beq.n	405584 <_dtoa_r+0xa3c>
  405500:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405502:	9d04      	ldr	r5, [sp, #16]
  405504:	43db      	mvns	r3, r3
  405506:	9302      	str	r3, [sp, #8]
  405508:	4641      	mov	r1, r8
  40550a:	4620      	mov	r0, r4
  40550c:	f000 fe44 	bl	406198 <_Bfree>
  405510:	2e00      	cmp	r6, #0
  405512:	f43f acdd 	beq.w	404ed0 <_dtoa_r+0x388>
  405516:	e6a7      	b.n	405268 <_dtoa_r+0x720>
  405518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40551a:	4649      	mov	r1, r9
  40551c:	4620      	mov	r0, r4
  40551e:	f000 ff71 	bl	406404 <__pow5mult>
  405522:	4681      	mov	r9, r0
  405524:	e558      	b.n	404fd8 <_dtoa_r+0x490>
  405526:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405528:	2a00      	cmp	r2, #0
  40552a:	f000 8187 	beq.w	40583c <_dtoa_r+0xcf4>
  40552e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405532:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405534:	9d08      	ldr	r5, [sp, #32]
  405536:	e4f2      	b.n	404f1e <_dtoa_r+0x3d6>
  405538:	f1ba 0f00 	cmp.w	sl, #0
  40553c:	f47f ad75 	bne.w	40502a <_dtoa_r+0x4e2>
  405540:	e7b4      	b.n	4054ac <_dtoa_r+0x964>
  405542:	f000 fe33 	bl	4061ac <__multadd>
  405546:	4647      	mov	r7, r8
  405548:	4606      	mov	r6, r0
  40554a:	4683      	mov	fp, r0
  40554c:	e5be      	b.n	4050cc <_dtoa_r+0x584>
  40554e:	4601      	mov	r1, r0
  405550:	4620      	mov	r0, r4
  405552:	9306      	str	r3, [sp, #24]
  405554:	f000 fe20 	bl	406198 <_Bfree>
  405558:	2201      	movs	r2, #1
  40555a:	9b06      	ldr	r3, [sp, #24]
  40555c:	e5e0      	b.n	405120 <_dtoa_r+0x5d8>
  40555e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405560:	2b02      	cmp	r3, #2
  405562:	f77f ad96 	ble.w	405092 <_dtoa_r+0x54a>
  405566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405568:	2b00      	cmp	r3, #0
  40556a:	d1c9      	bne.n	405500 <_dtoa_r+0x9b8>
  40556c:	4641      	mov	r1, r8
  40556e:	2205      	movs	r2, #5
  405570:	4620      	mov	r0, r4
  405572:	f000 fe1b 	bl	4061ac <__multadd>
  405576:	4601      	mov	r1, r0
  405578:	4680      	mov	r8, r0
  40557a:	4648      	mov	r0, r9
  40557c:	f000 ffe4 	bl	406548 <__mcmp>
  405580:	2800      	cmp	r0, #0
  405582:	ddbd      	ble.n	405500 <_dtoa_r+0x9b8>
  405584:	9a02      	ldr	r2, [sp, #8]
  405586:	9904      	ldr	r1, [sp, #16]
  405588:	2331      	movs	r3, #49	; 0x31
  40558a:	3201      	adds	r2, #1
  40558c:	9202      	str	r2, [sp, #8]
  40558e:	700b      	strb	r3, [r1, #0]
  405590:	1c4d      	adds	r5, r1, #1
  405592:	e7b9      	b.n	405508 <_dtoa_r+0x9c0>
  405594:	9a02      	ldr	r2, [sp, #8]
  405596:	3201      	adds	r2, #1
  405598:	9202      	str	r2, [sp, #8]
  40559a:	9a04      	ldr	r2, [sp, #16]
  40559c:	2331      	movs	r3, #49	; 0x31
  40559e:	7013      	strb	r3, [r2, #0]
  4055a0:	e652      	b.n	405248 <_dtoa_r+0x700>
  4055a2:	2301      	movs	r3, #1
  4055a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4055a6:	e666      	b.n	405276 <_dtoa_r+0x72e>
  4055a8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4055ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4055ae:	e48f      	b.n	404ed0 <_dtoa_r+0x388>
  4055b0:	00408558 	.word	0x00408558
  4055b4:	00408530 	.word	0x00408530
  4055b8:	3ff00000 	.word	0x3ff00000
  4055bc:	401c0000 	.word	0x401c0000
  4055c0:	3fe00000 	.word	0x3fe00000
  4055c4:	40240000 	.word	0x40240000
  4055c8:	40140000 	.word	0x40140000
  4055cc:	4650      	mov	r0, sl
  4055ce:	f001 ff0b 	bl	4073e8 <__aeabi_i2d>
  4055d2:	463a      	mov	r2, r7
  4055d4:	4643      	mov	r3, r8
  4055d6:	f001 ff6d 	bl	4074b4 <__aeabi_dmul>
  4055da:	2200      	movs	r2, #0
  4055dc:	4bc1      	ldr	r3, [pc, #772]	; (4058e4 <_dtoa_r+0xd9c>)
  4055de:	f001 fdb7 	bl	407150 <__adddf3>
  4055e2:	4605      	mov	r5, r0
  4055e4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4055e8:	4641      	mov	r1, r8
  4055ea:	2200      	movs	r2, #0
  4055ec:	4bbe      	ldr	r3, [pc, #760]	; (4058e8 <_dtoa_r+0xda0>)
  4055ee:	4638      	mov	r0, r7
  4055f0:	f001 fdac 	bl	40714c <__aeabi_dsub>
  4055f4:	462a      	mov	r2, r5
  4055f6:	4633      	mov	r3, r6
  4055f8:	4682      	mov	sl, r0
  4055fa:	468b      	mov	fp, r1
  4055fc:	f002 f9ea 	bl	4079d4 <__aeabi_dcmpgt>
  405600:	4680      	mov	r8, r0
  405602:	2800      	cmp	r0, #0
  405604:	f040 8110 	bne.w	405828 <_dtoa_r+0xce0>
  405608:	462a      	mov	r2, r5
  40560a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40560e:	4650      	mov	r0, sl
  405610:	4659      	mov	r1, fp
  405612:	f002 f9c1 	bl	407998 <__aeabi_dcmplt>
  405616:	b118      	cbz	r0, 405620 <_dtoa_r+0xad8>
  405618:	4646      	mov	r6, r8
  40561a:	e771      	b.n	405500 <_dtoa_r+0x9b8>
  40561c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405620:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405624:	f7ff bb8a 	b.w	404d3c <_dtoa_r+0x1f4>
  405628:	9804      	ldr	r0, [sp, #16]
  40562a:	f7ff babb 	b.w	404ba4 <_dtoa_r+0x5c>
  40562e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405632:	970c      	str	r7, [sp, #48]	; 0x30
  405634:	1afb      	subs	r3, r7, r3
  405636:	441a      	add	r2, r3
  405638:	920d      	str	r2, [sp, #52]	; 0x34
  40563a:	2700      	movs	r7, #0
  40563c:	e469      	b.n	404f12 <_dtoa_r+0x3ca>
  40563e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405642:	f04f 0a02 	mov.w	sl, #2
  405646:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40564a:	e657      	b.n	4052fc <_dtoa_r+0x7b4>
  40564c:	2100      	movs	r1, #0
  40564e:	2301      	movs	r3, #1
  405650:	6461      	str	r1, [r4, #68]	; 0x44
  405652:	4620      	mov	r0, r4
  405654:	9325      	str	r3, [sp, #148]	; 0x94
  405656:	f000 fd79 	bl	40614c <_Balloc>
  40565a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40565c:	9004      	str	r0, [sp, #16]
  40565e:	6420      	str	r0, [r4, #64]	; 0x40
  405660:	930a      	str	r3, [sp, #40]	; 0x28
  405662:	930f      	str	r3, [sp, #60]	; 0x3c
  405664:	e629      	b.n	4052ba <_dtoa_r+0x772>
  405666:	2a00      	cmp	r2, #0
  405668:	46d0      	mov	r8, sl
  40566a:	f8cd b018 	str.w	fp, [sp, #24]
  40566e:	469a      	mov	sl, r3
  405670:	dd11      	ble.n	405696 <_dtoa_r+0xb4e>
  405672:	4649      	mov	r1, r9
  405674:	2201      	movs	r2, #1
  405676:	4620      	mov	r0, r4
  405678:	f000 ff14 	bl	4064a4 <__lshift>
  40567c:	4641      	mov	r1, r8
  40567e:	4681      	mov	r9, r0
  405680:	f000 ff62 	bl	406548 <__mcmp>
  405684:	2800      	cmp	r0, #0
  405686:	f340 8146 	ble.w	405916 <_dtoa_r+0xdce>
  40568a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40568e:	f000 8106 	beq.w	40589e <_dtoa_r+0xd56>
  405692:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405696:	46b3      	mov	fp, r6
  405698:	f887 a000 	strb.w	sl, [r7]
  40569c:	1c7d      	adds	r5, r7, #1
  40569e:	9e06      	ldr	r6, [sp, #24]
  4056a0:	e5d2      	b.n	405248 <_dtoa_r+0x700>
  4056a2:	d104      	bne.n	4056ae <_dtoa_r+0xb66>
  4056a4:	f01a 0f01 	tst.w	sl, #1
  4056a8:	d001      	beq.n	4056ae <_dtoa_r+0xb66>
  4056aa:	e5bd      	b.n	405228 <_dtoa_r+0x6e0>
  4056ac:	4615      	mov	r5, r2
  4056ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4056b2:	2b30      	cmp	r3, #48	; 0x30
  4056b4:	f105 32ff 	add.w	r2, r5, #4294967295
  4056b8:	d0f8      	beq.n	4056ac <_dtoa_r+0xb64>
  4056ba:	e5c5      	b.n	405248 <_dtoa_r+0x700>
  4056bc:	9904      	ldr	r1, [sp, #16]
  4056be:	2230      	movs	r2, #48	; 0x30
  4056c0:	700a      	strb	r2, [r1, #0]
  4056c2:	9a02      	ldr	r2, [sp, #8]
  4056c4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4056c8:	3201      	adds	r2, #1
  4056ca:	9202      	str	r2, [sp, #8]
  4056cc:	f7ff bbfc 	b.w	404ec8 <_dtoa_r+0x380>
  4056d0:	f000 80bb 	beq.w	40584a <_dtoa_r+0xd02>
  4056d4:	9b02      	ldr	r3, [sp, #8]
  4056d6:	425d      	negs	r5, r3
  4056d8:	4b84      	ldr	r3, [pc, #528]	; (4058ec <_dtoa_r+0xda4>)
  4056da:	f005 020f 	and.w	r2, r5, #15
  4056de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4056ea:	f001 fee3 	bl	4074b4 <__aeabi_dmul>
  4056ee:	112d      	asrs	r5, r5, #4
  4056f0:	4607      	mov	r7, r0
  4056f2:	4688      	mov	r8, r1
  4056f4:	f000 812c 	beq.w	405950 <_dtoa_r+0xe08>
  4056f8:	4e7d      	ldr	r6, [pc, #500]	; (4058f0 <_dtoa_r+0xda8>)
  4056fa:	f04f 0a02 	mov.w	sl, #2
  4056fe:	07eb      	lsls	r3, r5, #31
  405700:	d509      	bpl.n	405716 <_dtoa_r+0xbce>
  405702:	4638      	mov	r0, r7
  405704:	4641      	mov	r1, r8
  405706:	e9d6 2300 	ldrd	r2, r3, [r6]
  40570a:	f001 fed3 	bl	4074b4 <__aeabi_dmul>
  40570e:	f10a 0a01 	add.w	sl, sl, #1
  405712:	4607      	mov	r7, r0
  405714:	4688      	mov	r8, r1
  405716:	106d      	asrs	r5, r5, #1
  405718:	f106 0608 	add.w	r6, r6, #8
  40571c:	d1ef      	bne.n	4056fe <_dtoa_r+0xbb6>
  40571e:	e608      	b.n	405332 <_dtoa_r+0x7ea>
  405720:	6871      	ldr	r1, [r6, #4]
  405722:	4620      	mov	r0, r4
  405724:	f000 fd12 	bl	40614c <_Balloc>
  405728:	6933      	ldr	r3, [r6, #16]
  40572a:	3302      	adds	r3, #2
  40572c:	009a      	lsls	r2, r3, #2
  40572e:	4605      	mov	r5, r0
  405730:	f106 010c 	add.w	r1, r6, #12
  405734:	300c      	adds	r0, #12
  405736:	f000 fc63 	bl	406000 <memcpy>
  40573a:	4629      	mov	r1, r5
  40573c:	2201      	movs	r2, #1
  40573e:	4620      	mov	r0, r4
  405740:	f000 feb0 	bl	4064a4 <__lshift>
  405744:	9006      	str	r0, [sp, #24]
  405746:	e4b5      	b.n	4050b4 <_dtoa_r+0x56c>
  405748:	2b39      	cmp	r3, #57	; 0x39
  40574a:	f8cd b018 	str.w	fp, [sp, #24]
  40574e:	46d0      	mov	r8, sl
  405750:	f000 80a5 	beq.w	40589e <_dtoa_r+0xd56>
  405754:	f103 0a01 	add.w	sl, r3, #1
  405758:	46b3      	mov	fp, r6
  40575a:	f887 a000 	strb.w	sl, [r7]
  40575e:	1c7d      	adds	r5, r7, #1
  405760:	9e06      	ldr	r6, [sp, #24]
  405762:	e571      	b.n	405248 <_dtoa_r+0x700>
  405764:	465a      	mov	r2, fp
  405766:	46d0      	mov	r8, sl
  405768:	46b3      	mov	fp, r6
  40576a:	469a      	mov	sl, r3
  40576c:	4616      	mov	r6, r2
  40576e:	e54f      	b.n	405210 <_dtoa_r+0x6c8>
  405770:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405772:	495e      	ldr	r1, [pc, #376]	; (4058ec <_dtoa_r+0xda4>)
  405774:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405778:	462a      	mov	r2, r5
  40577a:	4633      	mov	r3, r6
  40577c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405780:	f001 fe98 	bl	4074b4 <__aeabi_dmul>
  405784:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405788:	4638      	mov	r0, r7
  40578a:	4641      	mov	r1, r8
  40578c:	f002 f942 	bl	407a14 <__aeabi_d2iz>
  405790:	4605      	mov	r5, r0
  405792:	f001 fe29 	bl	4073e8 <__aeabi_i2d>
  405796:	460b      	mov	r3, r1
  405798:	4602      	mov	r2, r0
  40579a:	4641      	mov	r1, r8
  40579c:	4638      	mov	r0, r7
  40579e:	f001 fcd5 	bl	40714c <__aeabi_dsub>
  4057a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057a4:	460f      	mov	r7, r1
  4057a6:	9904      	ldr	r1, [sp, #16]
  4057a8:	3530      	adds	r5, #48	; 0x30
  4057aa:	2b01      	cmp	r3, #1
  4057ac:	700d      	strb	r5, [r1, #0]
  4057ae:	4606      	mov	r6, r0
  4057b0:	f101 0501 	add.w	r5, r1, #1
  4057b4:	d026      	beq.n	405804 <_dtoa_r+0xcbc>
  4057b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057b8:	9a04      	ldr	r2, [sp, #16]
  4057ba:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4058f8 <_dtoa_r+0xdb0>
  4057be:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4057c2:	4413      	add	r3, r2
  4057c4:	f04f 0a00 	mov.w	sl, #0
  4057c8:	4699      	mov	r9, r3
  4057ca:	4652      	mov	r2, sl
  4057cc:	465b      	mov	r3, fp
  4057ce:	4630      	mov	r0, r6
  4057d0:	4639      	mov	r1, r7
  4057d2:	f001 fe6f 	bl	4074b4 <__aeabi_dmul>
  4057d6:	460f      	mov	r7, r1
  4057d8:	4606      	mov	r6, r0
  4057da:	f002 f91b 	bl	407a14 <__aeabi_d2iz>
  4057de:	4680      	mov	r8, r0
  4057e0:	f001 fe02 	bl	4073e8 <__aeabi_i2d>
  4057e4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4057e8:	4602      	mov	r2, r0
  4057ea:	460b      	mov	r3, r1
  4057ec:	4630      	mov	r0, r6
  4057ee:	4639      	mov	r1, r7
  4057f0:	f001 fcac 	bl	40714c <__aeabi_dsub>
  4057f4:	f805 8b01 	strb.w	r8, [r5], #1
  4057f8:	454d      	cmp	r5, r9
  4057fa:	4606      	mov	r6, r0
  4057fc:	460f      	mov	r7, r1
  4057fe:	d1e4      	bne.n	4057ca <_dtoa_r+0xc82>
  405800:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405804:	4b3b      	ldr	r3, [pc, #236]	; (4058f4 <_dtoa_r+0xdac>)
  405806:	2200      	movs	r2, #0
  405808:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40580c:	f001 fca0 	bl	407150 <__adddf3>
  405810:	4632      	mov	r2, r6
  405812:	463b      	mov	r3, r7
  405814:	f002 f8c0 	bl	407998 <__aeabi_dcmplt>
  405818:	2800      	cmp	r0, #0
  40581a:	d046      	beq.n	4058aa <_dtoa_r+0xd62>
  40581c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40581e:	9302      	str	r3, [sp, #8]
  405820:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405824:	f7ff bb43 	b.w	404eae <_dtoa_r+0x366>
  405828:	f04f 0800 	mov.w	r8, #0
  40582c:	4646      	mov	r6, r8
  40582e:	e6a9      	b.n	405584 <_dtoa_r+0xa3c>
  405830:	9b08      	ldr	r3, [sp, #32]
  405832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405834:	1a9d      	subs	r5, r3, r2
  405836:	2300      	movs	r3, #0
  405838:	f7ff bb71 	b.w	404f1e <_dtoa_r+0x3d6>
  40583c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40583e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405840:	9d08      	ldr	r5, [sp, #32]
  405842:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405846:	f7ff bb6a 	b.w	404f1e <_dtoa_r+0x3d6>
  40584a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40584e:	f04f 0a02 	mov.w	sl, #2
  405852:	e56e      	b.n	405332 <_dtoa_r+0x7ea>
  405854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405856:	2b00      	cmp	r3, #0
  405858:	f43f aeb8 	beq.w	4055cc <_dtoa_r+0xa84>
  40585c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40585e:	2b00      	cmp	r3, #0
  405860:	f77f aede 	ble.w	405620 <_dtoa_r+0xad8>
  405864:	2200      	movs	r2, #0
  405866:	4b24      	ldr	r3, [pc, #144]	; (4058f8 <_dtoa_r+0xdb0>)
  405868:	4638      	mov	r0, r7
  40586a:	4641      	mov	r1, r8
  40586c:	f001 fe22 	bl	4074b4 <__aeabi_dmul>
  405870:	4607      	mov	r7, r0
  405872:	4688      	mov	r8, r1
  405874:	f10a 0001 	add.w	r0, sl, #1
  405878:	f001 fdb6 	bl	4073e8 <__aeabi_i2d>
  40587c:	463a      	mov	r2, r7
  40587e:	4643      	mov	r3, r8
  405880:	f001 fe18 	bl	4074b4 <__aeabi_dmul>
  405884:	2200      	movs	r2, #0
  405886:	4b17      	ldr	r3, [pc, #92]	; (4058e4 <_dtoa_r+0xd9c>)
  405888:	f001 fc62 	bl	407150 <__adddf3>
  40588c:	9a02      	ldr	r2, [sp, #8]
  40588e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405890:	9312      	str	r3, [sp, #72]	; 0x48
  405892:	3a01      	subs	r2, #1
  405894:	4605      	mov	r5, r0
  405896:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40589a:	9215      	str	r2, [sp, #84]	; 0x54
  40589c:	e56a      	b.n	405374 <_dtoa_r+0x82c>
  40589e:	2239      	movs	r2, #57	; 0x39
  4058a0:	46b3      	mov	fp, r6
  4058a2:	703a      	strb	r2, [r7, #0]
  4058a4:	9e06      	ldr	r6, [sp, #24]
  4058a6:	1c7d      	adds	r5, r7, #1
  4058a8:	e4c0      	b.n	40522c <_dtoa_r+0x6e4>
  4058aa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4058ae:	2000      	movs	r0, #0
  4058b0:	4910      	ldr	r1, [pc, #64]	; (4058f4 <_dtoa_r+0xdac>)
  4058b2:	f001 fc4b 	bl	40714c <__aeabi_dsub>
  4058b6:	4632      	mov	r2, r6
  4058b8:	463b      	mov	r3, r7
  4058ba:	f002 f88b 	bl	4079d4 <__aeabi_dcmpgt>
  4058be:	b908      	cbnz	r0, 4058c4 <_dtoa_r+0xd7c>
  4058c0:	e6ae      	b.n	405620 <_dtoa_r+0xad8>
  4058c2:	4615      	mov	r5, r2
  4058c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4058c8:	2b30      	cmp	r3, #48	; 0x30
  4058ca:	f105 32ff 	add.w	r2, r5, #4294967295
  4058ce:	d0f8      	beq.n	4058c2 <_dtoa_r+0xd7a>
  4058d0:	e5d7      	b.n	405482 <_dtoa_r+0x93a>
  4058d2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4058d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4058d8:	9302      	str	r3, [sp, #8]
  4058da:	f7ff bae8 	b.w	404eae <_dtoa_r+0x366>
  4058de:	970c      	str	r7, [sp, #48]	; 0x30
  4058e0:	f7ff bba5 	b.w	40502e <_dtoa_r+0x4e6>
  4058e4:	401c0000 	.word	0x401c0000
  4058e8:	40140000 	.word	0x40140000
  4058ec:	00408558 	.word	0x00408558
  4058f0:	00408530 	.word	0x00408530
  4058f4:	3fe00000 	.word	0x3fe00000
  4058f8:	40240000 	.word	0x40240000
  4058fc:	2b39      	cmp	r3, #57	; 0x39
  4058fe:	f8cd b018 	str.w	fp, [sp, #24]
  405902:	46d0      	mov	r8, sl
  405904:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405908:	469a      	mov	sl, r3
  40590a:	d0c8      	beq.n	40589e <_dtoa_r+0xd56>
  40590c:	f1bb 0f00 	cmp.w	fp, #0
  405910:	f73f aebf 	bgt.w	405692 <_dtoa_r+0xb4a>
  405914:	e6bf      	b.n	405696 <_dtoa_r+0xb4e>
  405916:	f47f aebe 	bne.w	405696 <_dtoa_r+0xb4e>
  40591a:	f01a 0f01 	tst.w	sl, #1
  40591e:	f43f aeba 	beq.w	405696 <_dtoa_r+0xb4e>
  405922:	e6b2      	b.n	40568a <_dtoa_r+0xb42>
  405924:	f04f 0800 	mov.w	r8, #0
  405928:	4646      	mov	r6, r8
  40592a:	e5e9      	b.n	405500 <_dtoa_r+0x9b8>
  40592c:	4631      	mov	r1, r6
  40592e:	2300      	movs	r3, #0
  405930:	220a      	movs	r2, #10
  405932:	4620      	mov	r0, r4
  405934:	f000 fc3a 	bl	4061ac <__multadd>
  405938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40593a:	2b00      	cmp	r3, #0
  40593c:	4606      	mov	r6, r0
  40593e:	dd0a      	ble.n	405956 <_dtoa_r+0xe0e>
  405940:	930a      	str	r3, [sp, #40]	; 0x28
  405942:	f7ff bbaa 	b.w	40509a <_dtoa_r+0x552>
  405946:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405948:	2b02      	cmp	r3, #2
  40594a:	dc23      	bgt.n	405994 <_dtoa_r+0xe4c>
  40594c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40594e:	e43b      	b.n	4051c8 <_dtoa_r+0x680>
  405950:	f04f 0a02 	mov.w	sl, #2
  405954:	e4ed      	b.n	405332 <_dtoa_r+0x7ea>
  405956:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405958:	2b02      	cmp	r3, #2
  40595a:	dc1b      	bgt.n	405994 <_dtoa_r+0xe4c>
  40595c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40595e:	e7ef      	b.n	405940 <_dtoa_r+0xdf8>
  405960:	2500      	movs	r5, #0
  405962:	6465      	str	r5, [r4, #68]	; 0x44
  405964:	4629      	mov	r1, r5
  405966:	4620      	mov	r0, r4
  405968:	f000 fbf0 	bl	40614c <_Balloc>
  40596c:	f04f 33ff 	mov.w	r3, #4294967295
  405970:	930a      	str	r3, [sp, #40]	; 0x28
  405972:	930f      	str	r3, [sp, #60]	; 0x3c
  405974:	2301      	movs	r3, #1
  405976:	9004      	str	r0, [sp, #16]
  405978:	9525      	str	r5, [sp, #148]	; 0x94
  40597a:	6420      	str	r0, [r4, #64]	; 0x40
  40597c:	930b      	str	r3, [sp, #44]	; 0x2c
  40597e:	f7ff b9dd 	b.w	404d3c <_dtoa_r+0x1f4>
  405982:	2501      	movs	r5, #1
  405984:	f7ff b9a5 	b.w	404cd2 <_dtoa_r+0x18a>
  405988:	f43f ab69 	beq.w	40505e <_dtoa_r+0x516>
  40598c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405990:	f7ff bbf9 	b.w	405186 <_dtoa_r+0x63e>
  405994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405996:	930a      	str	r3, [sp, #40]	; 0x28
  405998:	e5e5      	b.n	405566 <_dtoa_r+0xa1e>
  40599a:	bf00      	nop

0040599c <__libc_fini_array>:
  40599c:	b538      	push	{r3, r4, r5, lr}
  40599e:	4c0a      	ldr	r4, [pc, #40]	; (4059c8 <__libc_fini_array+0x2c>)
  4059a0:	4d0a      	ldr	r5, [pc, #40]	; (4059cc <__libc_fini_array+0x30>)
  4059a2:	1b64      	subs	r4, r4, r5
  4059a4:	10a4      	asrs	r4, r4, #2
  4059a6:	d00a      	beq.n	4059be <__libc_fini_array+0x22>
  4059a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4059ac:	3b01      	subs	r3, #1
  4059ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4059b2:	3c01      	subs	r4, #1
  4059b4:	f855 3904 	ldr.w	r3, [r5], #-4
  4059b8:	4798      	blx	r3
  4059ba:	2c00      	cmp	r4, #0
  4059bc:	d1f9      	bne.n	4059b2 <__libc_fini_array+0x16>
  4059be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4059c2:	f002 bec7 	b.w	408754 <_fini>
  4059c6:	bf00      	nop
  4059c8:	00408764 	.word	0x00408764
  4059cc:	00408760 	.word	0x00408760

004059d0 <_localeconv_r>:
  4059d0:	4a04      	ldr	r2, [pc, #16]	; (4059e4 <_localeconv_r+0x14>)
  4059d2:	4b05      	ldr	r3, [pc, #20]	; (4059e8 <_localeconv_r+0x18>)
  4059d4:	6812      	ldr	r2, [r2, #0]
  4059d6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4059d8:	2800      	cmp	r0, #0
  4059da:	bf08      	it	eq
  4059dc:	4618      	moveq	r0, r3
  4059de:	30f0      	adds	r0, #240	; 0xf0
  4059e0:	4770      	bx	lr
  4059e2:	bf00      	nop
  4059e4:	20400020 	.word	0x20400020
  4059e8:	20400864 	.word	0x20400864

004059ec <__retarget_lock_acquire_recursive>:
  4059ec:	4770      	bx	lr
  4059ee:	bf00      	nop

004059f0 <__retarget_lock_release_recursive>:
  4059f0:	4770      	bx	lr
  4059f2:	bf00      	nop

004059f4 <_malloc_r>:
  4059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059f8:	f101 060b 	add.w	r6, r1, #11
  4059fc:	2e16      	cmp	r6, #22
  4059fe:	b083      	sub	sp, #12
  405a00:	4605      	mov	r5, r0
  405a02:	f240 809e 	bls.w	405b42 <_malloc_r+0x14e>
  405a06:	f036 0607 	bics.w	r6, r6, #7
  405a0a:	f100 80bd 	bmi.w	405b88 <_malloc_r+0x194>
  405a0e:	42b1      	cmp	r1, r6
  405a10:	f200 80ba 	bhi.w	405b88 <_malloc_r+0x194>
  405a14:	f000 fb8e 	bl	406134 <__malloc_lock>
  405a18:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405a1c:	f0c0 8293 	bcc.w	405f46 <_malloc_r+0x552>
  405a20:	0a73      	lsrs	r3, r6, #9
  405a22:	f000 80b8 	beq.w	405b96 <_malloc_r+0x1a2>
  405a26:	2b04      	cmp	r3, #4
  405a28:	f200 8179 	bhi.w	405d1e <_malloc_r+0x32a>
  405a2c:	09b3      	lsrs	r3, r6, #6
  405a2e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405a32:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405a36:	00c3      	lsls	r3, r0, #3
  405a38:	4fbf      	ldr	r7, [pc, #764]	; (405d38 <_malloc_r+0x344>)
  405a3a:	443b      	add	r3, r7
  405a3c:	f1a3 0108 	sub.w	r1, r3, #8
  405a40:	685c      	ldr	r4, [r3, #4]
  405a42:	42a1      	cmp	r1, r4
  405a44:	d106      	bne.n	405a54 <_malloc_r+0x60>
  405a46:	e00c      	b.n	405a62 <_malloc_r+0x6e>
  405a48:	2a00      	cmp	r2, #0
  405a4a:	f280 80aa 	bge.w	405ba2 <_malloc_r+0x1ae>
  405a4e:	68e4      	ldr	r4, [r4, #12]
  405a50:	42a1      	cmp	r1, r4
  405a52:	d006      	beq.n	405a62 <_malloc_r+0x6e>
  405a54:	6863      	ldr	r3, [r4, #4]
  405a56:	f023 0303 	bic.w	r3, r3, #3
  405a5a:	1b9a      	subs	r2, r3, r6
  405a5c:	2a0f      	cmp	r2, #15
  405a5e:	ddf3      	ble.n	405a48 <_malloc_r+0x54>
  405a60:	4670      	mov	r0, lr
  405a62:	693c      	ldr	r4, [r7, #16]
  405a64:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405d4c <_malloc_r+0x358>
  405a68:	4574      	cmp	r4, lr
  405a6a:	f000 81ab 	beq.w	405dc4 <_malloc_r+0x3d0>
  405a6e:	6863      	ldr	r3, [r4, #4]
  405a70:	f023 0303 	bic.w	r3, r3, #3
  405a74:	1b9a      	subs	r2, r3, r6
  405a76:	2a0f      	cmp	r2, #15
  405a78:	f300 8190 	bgt.w	405d9c <_malloc_r+0x3a8>
  405a7c:	2a00      	cmp	r2, #0
  405a7e:	f8c7 e014 	str.w	lr, [r7, #20]
  405a82:	f8c7 e010 	str.w	lr, [r7, #16]
  405a86:	f280 809d 	bge.w	405bc4 <_malloc_r+0x1d0>
  405a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a8e:	f080 8161 	bcs.w	405d54 <_malloc_r+0x360>
  405a92:	08db      	lsrs	r3, r3, #3
  405a94:	f103 0c01 	add.w	ip, r3, #1
  405a98:	1099      	asrs	r1, r3, #2
  405a9a:	687a      	ldr	r2, [r7, #4]
  405a9c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405aa0:	f8c4 8008 	str.w	r8, [r4, #8]
  405aa4:	2301      	movs	r3, #1
  405aa6:	408b      	lsls	r3, r1
  405aa8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405aac:	4313      	orrs	r3, r2
  405aae:	3908      	subs	r1, #8
  405ab0:	60e1      	str	r1, [r4, #12]
  405ab2:	607b      	str	r3, [r7, #4]
  405ab4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405ab8:	f8c8 400c 	str.w	r4, [r8, #12]
  405abc:	1082      	asrs	r2, r0, #2
  405abe:	2401      	movs	r4, #1
  405ac0:	4094      	lsls	r4, r2
  405ac2:	429c      	cmp	r4, r3
  405ac4:	f200 808b 	bhi.w	405bde <_malloc_r+0x1ea>
  405ac8:	421c      	tst	r4, r3
  405aca:	d106      	bne.n	405ada <_malloc_r+0xe6>
  405acc:	f020 0003 	bic.w	r0, r0, #3
  405ad0:	0064      	lsls	r4, r4, #1
  405ad2:	421c      	tst	r4, r3
  405ad4:	f100 0004 	add.w	r0, r0, #4
  405ad8:	d0fa      	beq.n	405ad0 <_malloc_r+0xdc>
  405ada:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405ade:	46cc      	mov	ip, r9
  405ae0:	4680      	mov	r8, r0
  405ae2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405ae6:	459c      	cmp	ip, r3
  405ae8:	d107      	bne.n	405afa <_malloc_r+0x106>
  405aea:	e16d      	b.n	405dc8 <_malloc_r+0x3d4>
  405aec:	2a00      	cmp	r2, #0
  405aee:	f280 817b 	bge.w	405de8 <_malloc_r+0x3f4>
  405af2:	68db      	ldr	r3, [r3, #12]
  405af4:	459c      	cmp	ip, r3
  405af6:	f000 8167 	beq.w	405dc8 <_malloc_r+0x3d4>
  405afa:	6859      	ldr	r1, [r3, #4]
  405afc:	f021 0103 	bic.w	r1, r1, #3
  405b00:	1b8a      	subs	r2, r1, r6
  405b02:	2a0f      	cmp	r2, #15
  405b04:	ddf2      	ble.n	405aec <_malloc_r+0xf8>
  405b06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405b0a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405b0e:	9300      	str	r3, [sp, #0]
  405b10:	199c      	adds	r4, r3, r6
  405b12:	4628      	mov	r0, r5
  405b14:	f046 0601 	orr.w	r6, r6, #1
  405b18:	f042 0501 	orr.w	r5, r2, #1
  405b1c:	605e      	str	r6, [r3, #4]
  405b1e:	f8c8 c00c 	str.w	ip, [r8, #12]
  405b22:	f8cc 8008 	str.w	r8, [ip, #8]
  405b26:	617c      	str	r4, [r7, #20]
  405b28:	613c      	str	r4, [r7, #16]
  405b2a:	f8c4 e00c 	str.w	lr, [r4, #12]
  405b2e:	f8c4 e008 	str.w	lr, [r4, #8]
  405b32:	6065      	str	r5, [r4, #4]
  405b34:	505a      	str	r2, [r3, r1]
  405b36:	f000 fb03 	bl	406140 <__malloc_unlock>
  405b3a:	9b00      	ldr	r3, [sp, #0]
  405b3c:	f103 0408 	add.w	r4, r3, #8
  405b40:	e01e      	b.n	405b80 <_malloc_r+0x18c>
  405b42:	2910      	cmp	r1, #16
  405b44:	d820      	bhi.n	405b88 <_malloc_r+0x194>
  405b46:	f000 faf5 	bl	406134 <__malloc_lock>
  405b4a:	2610      	movs	r6, #16
  405b4c:	2318      	movs	r3, #24
  405b4e:	2002      	movs	r0, #2
  405b50:	4f79      	ldr	r7, [pc, #484]	; (405d38 <_malloc_r+0x344>)
  405b52:	443b      	add	r3, r7
  405b54:	f1a3 0208 	sub.w	r2, r3, #8
  405b58:	685c      	ldr	r4, [r3, #4]
  405b5a:	4294      	cmp	r4, r2
  405b5c:	f000 813d 	beq.w	405dda <_malloc_r+0x3e6>
  405b60:	6863      	ldr	r3, [r4, #4]
  405b62:	68e1      	ldr	r1, [r4, #12]
  405b64:	68a6      	ldr	r6, [r4, #8]
  405b66:	f023 0303 	bic.w	r3, r3, #3
  405b6a:	4423      	add	r3, r4
  405b6c:	4628      	mov	r0, r5
  405b6e:	685a      	ldr	r2, [r3, #4]
  405b70:	60f1      	str	r1, [r6, #12]
  405b72:	f042 0201 	orr.w	r2, r2, #1
  405b76:	608e      	str	r6, [r1, #8]
  405b78:	605a      	str	r2, [r3, #4]
  405b7a:	f000 fae1 	bl	406140 <__malloc_unlock>
  405b7e:	3408      	adds	r4, #8
  405b80:	4620      	mov	r0, r4
  405b82:	b003      	add	sp, #12
  405b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b88:	2400      	movs	r4, #0
  405b8a:	230c      	movs	r3, #12
  405b8c:	4620      	mov	r0, r4
  405b8e:	602b      	str	r3, [r5, #0]
  405b90:	b003      	add	sp, #12
  405b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b96:	2040      	movs	r0, #64	; 0x40
  405b98:	f44f 7300 	mov.w	r3, #512	; 0x200
  405b9c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405ba0:	e74a      	b.n	405a38 <_malloc_r+0x44>
  405ba2:	4423      	add	r3, r4
  405ba4:	68e1      	ldr	r1, [r4, #12]
  405ba6:	685a      	ldr	r2, [r3, #4]
  405ba8:	68a6      	ldr	r6, [r4, #8]
  405baa:	f042 0201 	orr.w	r2, r2, #1
  405bae:	60f1      	str	r1, [r6, #12]
  405bb0:	4628      	mov	r0, r5
  405bb2:	608e      	str	r6, [r1, #8]
  405bb4:	605a      	str	r2, [r3, #4]
  405bb6:	f000 fac3 	bl	406140 <__malloc_unlock>
  405bba:	3408      	adds	r4, #8
  405bbc:	4620      	mov	r0, r4
  405bbe:	b003      	add	sp, #12
  405bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bc4:	4423      	add	r3, r4
  405bc6:	4628      	mov	r0, r5
  405bc8:	685a      	ldr	r2, [r3, #4]
  405bca:	f042 0201 	orr.w	r2, r2, #1
  405bce:	605a      	str	r2, [r3, #4]
  405bd0:	f000 fab6 	bl	406140 <__malloc_unlock>
  405bd4:	3408      	adds	r4, #8
  405bd6:	4620      	mov	r0, r4
  405bd8:	b003      	add	sp, #12
  405bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bde:	68bc      	ldr	r4, [r7, #8]
  405be0:	6863      	ldr	r3, [r4, #4]
  405be2:	f023 0803 	bic.w	r8, r3, #3
  405be6:	45b0      	cmp	r8, r6
  405be8:	d304      	bcc.n	405bf4 <_malloc_r+0x200>
  405bea:	eba8 0306 	sub.w	r3, r8, r6
  405bee:	2b0f      	cmp	r3, #15
  405bf0:	f300 8085 	bgt.w	405cfe <_malloc_r+0x30a>
  405bf4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405d50 <_malloc_r+0x35c>
  405bf8:	4b50      	ldr	r3, [pc, #320]	; (405d3c <_malloc_r+0x348>)
  405bfa:	f8d9 2000 	ldr.w	r2, [r9]
  405bfe:	681b      	ldr	r3, [r3, #0]
  405c00:	3201      	adds	r2, #1
  405c02:	4433      	add	r3, r6
  405c04:	eb04 0a08 	add.w	sl, r4, r8
  405c08:	f000 8155 	beq.w	405eb6 <_malloc_r+0x4c2>
  405c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405c10:	330f      	adds	r3, #15
  405c12:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405c16:	f02b 0b0f 	bic.w	fp, fp, #15
  405c1a:	4659      	mov	r1, fp
  405c1c:	4628      	mov	r0, r5
  405c1e:	f000 fd8f 	bl	406740 <_sbrk_r>
  405c22:	1c41      	adds	r1, r0, #1
  405c24:	4602      	mov	r2, r0
  405c26:	f000 80fc 	beq.w	405e22 <_malloc_r+0x42e>
  405c2a:	4582      	cmp	sl, r0
  405c2c:	f200 80f7 	bhi.w	405e1e <_malloc_r+0x42a>
  405c30:	4b43      	ldr	r3, [pc, #268]	; (405d40 <_malloc_r+0x34c>)
  405c32:	6819      	ldr	r1, [r3, #0]
  405c34:	4459      	add	r1, fp
  405c36:	6019      	str	r1, [r3, #0]
  405c38:	f000 814d 	beq.w	405ed6 <_malloc_r+0x4e2>
  405c3c:	f8d9 0000 	ldr.w	r0, [r9]
  405c40:	3001      	adds	r0, #1
  405c42:	bf1b      	ittet	ne
  405c44:	eba2 0a0a 	subne.w	sl, r2, sl
  405c48:	4451      	addne	r1, sl
  405c4a:	f8c9 2000 	streq.w	r2, [r9]
  405c4e:	6019      	strne	r1, [r3, #0]
  405c50:	f012 0107 	ands.w	r1, r2, #7
  405c54:	f000 8115 	beq.w	405e82 <_malloc_r+0x48e>
  405c58:	f1c1 0008 	rsb	r0, r1, #8
  405c5c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405c60:	4402      	add	r2, r0
  405c62:	3108      	adds	r1, #8
  405c64:	eb02 090b 	add.w	r9, r2, fp
  405c68:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405c6c:	eba1 0909 	sub.w	r9, r1, r9
  405c70:	4649      	mov	r1, r9
  405c72:	4628      	mov	r0, r5
  405c74:	9301      	str	r3, [sp, #4]
  405c76:	9200      	str	r2, [sp, #0]
  405c78:	f000 fd62 	bl	406740 <_sbrk_r>
  405c7c:	1c43      	adds	r3, r0, #1
  405c7e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405c82:	f000 8143 	beq.w	405f0c <_malloc_r+0x518>
  405c86:	1a80      	subs	r0, r0, r2
  405c88:	4448      	add	r0, r9
  405c8a:	f040 0001 	orr.w	r0, r0, #1
  405c8e:	6819      	ldr	r1, [r3, #0]
  405c90:	60ba      	str	r2, [r7, #8]
  405c92:	4449      	add	r1, r9
  405c94:	42bc      	cmp	r4, r7
  405c96:	6050      	str	r0, [r2, #4]
  405c98:	6019      	str	r1, [r3, #0]
  405c9a:	d017      	beq.n	405ccc <_malloc_r+0x2d8>
  405c9c:	f1b8 0f0f 	cmp.w	r8, #15
  405ca0:	f240 80fb 	bls.w	405e9a <_malloc_r+0x4a6>
  405ca4:	6860      	ldr	r0, [r4, #4]
  405ca6:	f1a8 020c 	sub.w	r2, r8, #12
  405caa:	f022 0207 	bic.w	r2, r2, #7
  405cae:	eb04 0e02 	add.w	lr, r4, r2
  405cb2:	f000 0001 	and.w	r0, r0, #1
  405cb6:	f04f 0c05 	mov.w	ip, #5
  405cba:	4310      	orrs	r0, r2
  405cbc:	2a0f      	cmp	r2, #15
  405cbe:	6060      	str	r0, [r4, #4]
  405cc0:	f8ce c004 	str.w	ip, [lr, #4]
  405cc4:	f8ce c008 	str.w	ip, [lr, #8]
  405cc8:	f200 8117 	bhi.w	405efa <_malloc_r+0x506>
  405ccc:	4b1d      	ldr	r3, [pc, #116]	; (405d44 <_malloc_r+0x350>)
  405cce:	68bc      	ldr	r4, [r7, #8]
  405cd0:	681a      	ldr	r2, [r3, #0]
  405cd2:	4291      	cmp	r1, r2
  405cd4:	bf88      	it	hi
  405cd6:	6019      	strhi	r1, [r3, #0]
  405cd8:	4b1b      	ldr	r3, [pc, #108]	; (405d48 <_malloc_r+0x354>)
  405cda:	681a      	ldr	r2, [r3, #0]
  405cdc:	4291      	cmp	r1, r2
  405cde:	6862      	ldr	r2, [r4, #4]
  405ce0:	bf88      	it	hi
  405ce2:	6019      	strhi	r1, [r3, #0]
  405ce4:	f022 0203 	bic.w	r2, r2, #3
  405ce8:	4296      	cmp	r6, r2
  405cea:	eba2 0306 	sub.w	r3, r2, r6
  405cee:	d801      	bhi.n	405cf4 <_malloc_r+0x300>
  405cf0:	2b0f      	cmp	r3, #15
  405cf2:	dc04      	bgt.n	405cfe <_malloc_r+0x30a>
  405cf4:	4628      	mov	r0, r5
  405cf6:	f000 fa23 	bl	406140 <__malloc_unlock>
  405cfa:	2400      	movs	r4, #0
  405cfc:	e740      	b.n	405b80 <_malloc_r+0x18c>
  405cfe:	19a2      	adds	r2, r4, r6
  405d00:	f043 0301 	orr.w	r3, r3, #1
  405d04:	f046 0601 	orr.w	r6, r6, #1
  405d08:	6066      	str	r6, [r4, #4]
  405d0a:	4628      	mov	r0, r5
  405d0c:	60ba      	str	r2, [r7, #8]
  405d0e:	6053      	str	r3, [r2, #4]
  405d10:	f000 fa16 	bl	406140 <__malloc_unlock>
  405d14:	3408      	adds	r4, #8
  405d16:	4620      	mov	r0, r4
  405d18:	b003      	add	sp, #12
  405d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d1e:	2b14      	cmp	r3, #20
  405d20:	d971      	bls.n	405e06 <_malloc_r+0x412>
  405d22:	2b54      	cmp	r3, #84	; 0x54
  405d24:	f200 80a3 	bhi.w	405e6e <_malloc_r+0x47a>
  405d28:	0b33      	lsrs	r3, r6, #12
  405d2a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405d2e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405d32:	00c3      	lsls	r3, r0, #3
  405d34:	e680      	b.n	405a38 <_malloc_r+0x44>
  405d36:	bf00      	nop
  405d38:	20400454 	.word	0x20400454
  405d3c:	20400c9c 	.word	0x20400c9c
  405d40:	20400c6c 	.word	0x20400c6c
  405d44:	20400c94 	.word	0x20400c94
  405d48:	20400c98 	.word	0x20400c98
  405d4c:	2040045c 	.word	0x2040045c
  405d50:	2040085c 	.word	0x2040085c
  405d54:	0a5a      	lsrs	r2, r3, #9
  405d56:	2a04      	cmp	r2, #4
  405d58:	d95b      	bls.n	405e12 <_malloc_r+0x41e>
  405d5a:	2a14      	cmp	r2, #20
  405d5c:	f200 80ae 	bhi.w	405ebc <_malloc_r+0x4c8>
  405d60:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405d64:	00c9      	lsls	r1, r1, #3
  405d66:	325b      	adds	r2, #91	; 0x5b
  405d68:	eb07 0c01 	add.w	ip, r7, r1
  405d6c:	5879      	ldr	r1, [r7, r1]
  405d6e:	f1ac 0c08 	sub.w	ip, ip, #8
  405d72:	458c      	cmp	ip, r1
  405d74:	f000 8088 	beq.w	405e88 <_malloc_r+0x494>
  405d78:	684a      	ldr	r2, [r1, #4]
  405d7a:	f022 0203 	bic.w	r2, r2, #3
  405d7e:	4293      	cmp	r3, r2
  405d80:	d273      	bcs.n	405e6a <_malloc_r+0x476>
  405d82:	6889      	ldr	r1, [r1, #8]
  405d84:	458c      	cmp	ip, r1
  405d86:	d1f7      	bne.n	405d78 <_malloc_r+0x384>
  405d88:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405d8c:	687b      	ldr	r3, [r7, #4]
  405d8e:	60e2      	str	r2, [r4, #12]
  405d90:	f8c4 c008 	str.w	ip, [r4, #8]
  405d94:	6094      	str	r4, [r2, #8]
  405d96:	f8cc 400c 	str.w	r4, [ip, #12]
  405d9a:	e68f      	b.n	405abc <_malloc_r+0xc8>
  405d9c:	19a1      	adds	r1, r4, r6
  405d9e:	f046 0c01 	orr.w	ip, r6, #1
  405da2:	f042 0601 	orr.w	r6, r2, #1
  405da6:	f8c4 c004 	str.w	ip, [r4, #4]
  405daa:	4628      	mov	r0, r5
  405dac:	6179      	str	r1, [r7, #20]
  405dae:	6139      	str	r1, [r7, #16]
  405db0:	f8c1 e00c 	str.w	lr, [r1, #12]
  405db4:	f8c1 e008 	str.w	lr, [r1, #8]
  405db8:	604e      	str	r6, [r1, #4]
  405dba:	50e2      	str	r2, [r4, r3]
  405dbc:	f000 f9c0 	bl	406140 <__malloc_unlock>
  405dc0:	3408      	adds	r4, #8
  405dc2:	e6dd      	b.n	405b80 <_malloc_r+0x18c>
  405dc4:	687b      	ldr	r3, [r7, #4]
  405dc6:	e679      	b.n	405abc <_malloc_r+0xc8>
  405dc8:	f108 0801 	add.w	r8, r8, #1
  405dcc:	f018 0f03 	tst.w	r8, #3
  405dd0:	f10c 0c08 	add.w	ip, ip, #8
  405dd4:	f47f ae85 	bne.w	405ae2 <_malloc_r+0xee>
  405dd8:	e02d      	b.n	405e36 <_malloc_r+0x442>
  405dda:	68dc      	ldr	r4, [r3, #12]
  405ddc:	42a3      	cmp	r3, r4
  405dde:	bf08      	it	eq
  405de0:	3002      	addeq	r0, #2
  405de2:	f43f ae3e 	beq.w	405a62 <_malloc_r+0x6e>
  405de6:	e6bb      	b.n	405b60 <_malloc_r+0x16c>
  405de8:	4419      	add	r1, r3
  405dea:	461c      	mov	r4, r3
  405dec:	684a      	ldr	r2, [r1, #4]
  405dee:	68db      	ldr	r3, [r3, #12]
  405df0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405df4:	f042 0201 	orr.w	r2, r2, #1
  405df8:	604a      	str	r2, [r1, #4]
  405dfa:	4628      	mov	r0, r5
  405dfc:	60f3      	str	r3, [r6, #12]
  405dfe:	609e      	str	r6, [r3, #8]
  405e00:	f000 f99e 	bl	406140 <__malloc_unlock>
  405e04:	e6bc      	b.n	405b80 <_malloc_r+0x18c>
  405e06:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405e0a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405e0e:	00c3      	lsls	r3, r0, #3
  405e10:	e612      	b.n	405a38 <_malloc_r+0x44>
  405e12:	099a      	lsrs	r2, r3, #6
  405e14:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405e18:	00c9      	lsls	r1, r1, #3
  405e1a:	3238      	adds	r2, #56	; 0x38
  405e1c:	e7a4      	b.n	405d68 <_malloc_r+0x374>
  405e1e:	42bc      	cmp	r4, r7
  405e20:	d054      	beq.n	405ecc <_malloc_r+0x4d8>
  405e22:	68bc      	ldr	r4, [r7, #8]
  405e24:	6862      	ldr	r2, [r4, #4]
  405e26:	f022 0203 	bic.w	r2, r2, #3
  405e2a:	e75d      	b.n	405ce8 <_malloc_r+0x2f4>
  405e2c:	f859 3908 	ldr.w	r3, [r9], #-8
  405e30:	4599      	cmp	r9, r3
  405e32:	f040 8086 	bne.w	405f42 <_malloc_r+0x54e>
  405e36:	f010 0f03 	tst.w	r0, #3
  405e3a:	f100 30ff 	add.w	r0, r0, #4294967295
  405e3e:	d1f5      	bne.n	405e2c <_malloc_r+0x438>
  405e40:	687b      	ldr	r3, [r7, #4]
  405e42:	ea23 0304 	bic.w	r3, r3, r4
  405e46:	607b      	str	r3, [r7, #4]
  405e48:	0064      	lsls	r4, r4, #1
  405e4a:	429c      	cmp	r4, r3
  405e4c:	f63f aec7 	bhi.w	405bde <_malloc_r+0x1ea>
  405e50:	2c00      	cmp	r4, #0
  405e52:	f43f aec4 	beq.w	405bde <_malloc_r+0x1ea>
  405e56:	421c      	tst	r4, r3
  405e58:	4640      	mov	r0, r8
  405e5a:	f47f ae3e 	bne.w	405ada <_malloc_r+0xe6>
  405e5e:	0064      	lsls	r4, r4, #1
  405e60:	421c      	tst	r4, r3
  405e62:	f100 0004 	add.w	r0, r0, #4
  405e66:	d0fa      	beq.n	405e5e <_malloc_r+0x46a>
  405e68:	e637      	b.n	405ada <_malloc_r+0xe6>
  405e6a:	468c      	mov	ip, r1
  405e6c:	e78c      	b.n	405d88 <_malloc_r+0x394>
  405e6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405e72:	d815      	bhi.n	405ea0 <_malloc_r+0x4ac>
  405e74:	0bf3      	lsrs	r3, r6, #15
  405e76:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405e7a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405e7e:	00c3      	lsls	r3, r0, #3
  405e80:	e5da      	b.n	405a38 <_malloc_r+0x44>
  405e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405e86:	e6ed      	b.n	405c64 <_malloc_r+0x270>
  405e88:	687b      	ldr	r3, [r7, #4]
  405e8a:	1092      	asrs	r2, r2, #2
  405e8c:	2101      	movs	r1, #1
  405e8e:	fa01 f202 	lsl.w	r2, r1, r2
  405e92:	4313      	orrs	r3, r2
  405e94:	607b      	str	r3, [r7, #4]
  405e96:	4662      	mov	r2, ip
  405e98:	e779      	b.n	405d8e <_malloc_r+0x39a>
  405e9a:	2301      	movs	r3, #1
  405e9c:	6053      	str	r3, [r2, #4]
  405e9e:	e729      	b.n	405cf4 <_malloc_r+0x300>
  405ea0:	f240 5254 	movw	r2, #1364	; 0x554
  405ea4:	4293      	cmp	r3, r2
  405ea6:	d822      	bhi.n	405eee <_malloc_r+0x4fa>
  405ea8:	0cb3      	lsrs	r3, r6, #18
  405eaa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405eae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405eb2:	00c3      	lsls	r3, r0, #3
  405eb4:	e5c0      	b.n	405a38 <_malloc_r+0x44>
  405eb6:	f103 0b10 	add.w	fp, r3, #16
  405eba:	e6ae      	b.n	405c1a <_malloc_r+0x226>
  405ebc:	2a54      	cmp	r2, #84	; 0x54
  405ebe:	d829      	bhi.n	405f14 <_malloc_r+0x520>
  405ec0:	0b1a      	lsrs	r2, r3, #12
  405ec2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405ec6:	00c9      	lsls	r1, r1, #3
  405ec8:	326e      	adds	r2, #110	; 0x6e
  405eca:	e74d      	b.n	405d68 <_malloc_r+0x374>
  405ecc:	4b20      	ldr	r3, [pc, #128]	; (405f50 <_malloc_r+0x55c>)
  405ece:	6819      	ldr	r1, [r3, #0]
  405ed0:	4459      	add	r1, fp
  405ed2:	6019      	str	r1, [r3, #0]
  405ed4:	e6b2      	b.n	405c3c <_malloc_r+0x248>
  405ed6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405eda:	2800      	cmp	r0, #0
  405edc:	f47f aeae 	bne.w	405c3c <_malloc_r+0x248>
  405ee0:	eb08 030b 	add.w	r3, r8, fp
  405ee4:	68ba      	ldr	r2, [r7, #8]
  405ee6:	f043 0301 	orr.w	r3, r3, #1
  405eea:	6053      	str	r3, [r2, #4]
  405eec:	e6ee      	b.n	405ccc <_malloc_r+0x2d8>
  405eee:	207f      	movs	r0, #127	; 0x7f
  405ef0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405ef4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405ef8:	e59e      	b.n	405a38 <_malloc_r+0x44>
  405efa:	f104 0108 	add.w	r1, r4, #8
  405efe:	4628      	mov	r0, r5
  405f00:	9300      	str	r3, [sp, #0]
  405f02:	f000 fe0b 	bl	406b1c <_free_r>
  405f06:	9b00      	ldr	r3, [sp, #0]
  405f08:	6819      	ldr	r1, [r3, #0]
  405f0a:	e6df      	b.n	405ccc <_malloc_r+0x2d8>
  405f0c:	2001      	movs	r0, #1
  405f0e:	f04f 0900 	mov.w	r9, #0
  405f12:	e6bc      	b.n	405c8e <_malloc_r+0x29a>
  405f14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405f18:	d805      	bhi.n	405f26 <_malloc_r+0x532>
  405f1a:	0bda      	lsrs	r2, r3, #15
  405f1c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405f20:	00c9      	lsls	r1, r1, #3
  405f22:	3277      	adds	r2, #119	; 0x77
  405f24:	e720      	b.n	405d68 <_malloc_r+0x374>
  405f26:	f240 5154 	movw	r1, #1364	; 0x554
  405f2a:	428a      	cmp	r2, r1
  405f2c:	d805      	bhi.n	405f3a <_malloc_r+0x546>
  405f2e:	0c9a      	lsrs	r2, r3, #18
  405f30:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405f34:	00c9      	lsls	r1, r1, #3
  405f36:	327c      	adds	r2, #124	; 0x7c
  405f38:	e716      	b.n	405d68 <_malloc_r+0x374>
  405f3a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405f3e:	227e      	movs	r2, #126	; 0x7e
  405f40:	e712      	b.n	405d68 <_malloc_r+0x374>
  405f42:	687b      	ldr	r3, [r7, #4]
  405f44:	e780      	b.n	405e48 <_malloc_r+0x454>
  405f46:	08f0      	lsrs	r0, r6, #3
  405f48:	f106 0308 	add.w	r3, r6, #8
  405f4c:	e600      	b.n	405b50 <_malloc_r+0x15c>
  405f4e:	bf00      	nop
  405f50:	20400c6c 	.word	0x20400c6c
	...

00405f60 <memchr>:
  405f60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f64:	2a10      	cmp	r2, #16
  405f66:	db2b      	blt.n	405fc0 <memchr+0x60>
  405f68:	f010 0f07 	tst.w	r0, #7
  405f6c:	d008      	beq.n	405f80 <memchr+0x20>
  405f6e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f72:	3a01      	subs	r2, #1
  405f74:	428b      	cmp	r3, r1
  405f76:	d02d      	beq.n	405fd4 <memchr+0x74>
  405f78:	f010 0f07 	tst.w	r0, #7
  405f7c:	b342      	cbz	r2, 405fd0 <memchr+0x70>
  405f7e:	d1f6      	bne.n	405f6e <memchr+0xe>
  405f80:	b4f0      	push	{r4, r5, r6, r7}
  405f82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f8a:	f022 0407 	bic.w	r4, r2, #7
  405f8e:	f07f 0700 	mvns.w	r7, #0
  405f92:	2300      	movs	r3, #0
  405f94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f98:	3c08      	subs	r4, #8
  405f9a:	ea85 0501 	eor.w	r5, r5, r1
  405f9e:	ea86 0601 	eor.w	r6, r6, r1
  405fa2:	fa85 f547 	uadd8	r5, r5, r7
  405fa6:	faa3 f587 	sel	r5, r3, r7
  405faa:	fa86 f647 	uadd8	r6, r6, r7
  405fae:	faa5 f687 	sel	r6, r5, r7
  405fb2:	b98e      	cbnz	r6, 405fd8 <memchr+0x78>
  405fb4:	d1ee      	bne.n	405f94 <memchr+0x34>
  405fb6:	bcf0      	pop	{r4, r5, r6, r7}
  405fb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405fbc:	f002 0207 	and.w	r2, r2, #7
  405fc0:	b132      	cbz	r2, 405fd0 <memchr+0x70>
  405fc2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405fc6:	3a01      	subs	r2, #1
  405fc8:	ea83 0301 	eor.w	r3, r3, r1
  405fcc:	b113      	cbz	r3, 405fd4 <memchr+0x74>
  405fce:	d1f8      	bne.n	405fc2 <memchr+0x62>
  405fd0:	2000      	movs	r0, #0
  405fd2:	4770      	bx	lr
  405fd4:	3801      	subs	r0, #1
  405fd6:	4770      	bx	lr
  405fd8:	2d00      	cmp	r5, #0
  405fda:	bf06      	itte	eq
  405fdc:	4635      	moveq	r5, r6
  405fde:	3803      	subeq	r0, #3
  405fe0:	3807      	subne	r0, #7
  405fe2:	f015 0f01 	tst.w	r5, #1
  405fe6:	d107      	bne.n	405ff8 <memchr+0x98>
  405fe8:	3001      	adds	r0, #1
  405fea:	f415 7f80 	tst.w	r5, #256	; 0x100
  405fee:	bf02      	ittt	eq
  405ff0:	3001      	addeq	r0, #1
  405ff2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405ff6:	3001      	addeq	r0, #1
  405ff8:	bcf0      	pop	{r4, r5, r6, r7}
  405ffa:	3801      	subs	r0, #1
  405ffc:	4770      	bx	lr
  405ffe:	bf00      	nop

00406000 <memcpy>:
  406000:	4684      	mov	ip, r0
  406002:	ea41 0300 	orr.w	r3, r1, r0
  406006:	f013 0303 	ands.w	r3, r3, #3
  40600a:	d16d      	bne.n	4060e8 <memcpy+0xe8>
  40600c:	3a40      	subs	r2, #64	; 0x40
  40600e:	d341      	bcc.n	406094 <memcpy+0x94>
  406010:	f851 3b04 	ldr.w	r3, [r1], #4
  406014:	f840 3b04 	str.w	r3, [r0], #4
  406018:	f851 3b04 	ldr.w	r3, [r1], #4
  40601c:	f840 3b04 	str.w	r3, [r0], #4
  406020:	f851 3b04 	ldr.w	r3, [r1], #4
  406024:	f840 3b04 	str.w	r3, [r0], #4
  406028:	f851 3b04 	ldr.w	r3, [r1], #4
  40602c:	f840 3b04 	str.w	r3, [r0], #4
  406030:	f851 3b04 	ldr.w	r3, [r1], #4
  406034:	f840 3b04 	str.w	r3, [r0], #4
  406038:	f851 3b04 	ldr.w	r3, [r1], #4
  40603c:	f840 3b04 	str.w	r3, [r0], #4
  406040:	f851 3b04 	ldr.w	r3, [r1], #4
  406044:	f840 3b04 	str.w	r3, [r0], #4
  406048:	f851 3b04 	ldr.w	r3, [r1], #4
  40604c:	f840 3b04 	str.w	r3, [r0], #4
  406050:	f851 3b04 	ldr.w	r3, [r1], #4
  406054:	f840 3b04 	str.w	r3, [r0], #4
  406058:	f851 3b04 	ldr.w	r3, [r1], #4
  40605c:	f840 3b04 	str.w	r3, [r0], #4
  406060:	f851 3b04 	ldr.w	r3, [r1], #4
  406064:	f840 3b04 	str.w	r3, [r0], #4
  406068:	f851 3b04 	ldr.w	r3, [r1], #4
  40606c:	f840 3b04 	str.w	r3, [r0], #4
  406070:	f851 3b04 	ldr.w	r3, [r1], #4
  406074:	f840 3b04 	str.w	r3, [r0], #4
  406078:	f851 3b04 	ldr.w	r3, [r1], #4
  40607c:	f840 3b04 	str.w	r3, [r0], #4
  406080:	f851 3b04 	ldr.w	r3, [r1], #4
  406084:	f840 3b04 	str.w	r3, [r0], #4
  406088:	f851 3b04 	ldr.w	r3, [r1], #4
  40608c:	f840 3b04 	str.w	r3, [r0], #4
  406090:	3a40      	subs	r2, #64	; 0x40
  406092:	d2bd      	bcs.n	406010 <memcpy+0x10>
  406094:	3230      	adds	r2, #48	; 0x30
  406096:	d311      	bcc.n	4060bc <memcpy+0xbc>
  406098:	f851 3b04 	ldr.w	r3, [r1], #4
  40609c:	f840 3b04 	str.w	r3, [r0], #4
  4060a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060a4:	f840 3b04 	str.w	r3, [r0], #4
  4060a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060ac:	f840 3b04 	str.w	r3, [r0], #4
  4060b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060b4:	f840 3b04 	str.w	r3, [r0], #4
  4060b8:	3a10      	subs	r2, #16
  4060ba:	d2ed      	bcs.n	406098 <memcpy+0x98>
  4060bc:	320c      	adds	r2, #12
  4060be:	d305      	bcc.n	4060cc <memcpy+0xcc>
  4060c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060c4:	f840 3b04 	str.w	r3, [r0], #4
  4060c8:	3a04      	subs	r2, #4
  4060ca:	d2f9      	bcs.n	4060c0 <memcpy+0xc0>
  4060cc:	3204      	adds	r2, #4
  4060ce:	d008      	beq.n	4060e2 <memcpy+0xe2>
  4060d0:	07d2      	lsls	r2, r2, #31
  4060d2:	bf1c      	itt	ne
  4060d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4060d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4060dc:	d301      	bcc.n	4060e2 <memcpy+0xe2>
  4060de:	880b      	ldrh	r3, [r1, #0]
  4060e0:	8003      	strh	r3, [r0, #0]
  4060e2:	4660      	mov	r0, ip
  4060e4:	4770      	bx	lr
  4060e6:	bf00      	nop
  4060e8:	2a08      	cmp	r2, #8
  4060ea:	d313      	bcc.n	406114 <memcpy+0x114>
  4060ec:	078b      	lsls	r3, r1, #30
  4060ee:	d08d      	beq.n	40600c <memcpy+0xc>
  4060f0:	f010 0303 	ands.w	r3, r0, #3
  4060f4:	d08a      	beq.n	40600c <memcpy+0xc>
  4060f6:	f1c3 0304 	rsb	r3, r3, #4
  4060fa:	1ad2      	subs	r2, r2, r3
  4060fc:	07db      	lsls	r3, r3, #31
  4060fe:	bf1c      	itt	ne
  406100:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406104:	f800 3b01 	strbne.w	r3, [r0], #1
  406108:	d380      	bcc.n	40600c <memcpy+0xc>
  40610a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40610e:	f820 3b02 	strh.w	r3, [r0], #2
  406112:	e77b      	b.n	40600c <memcpy+0xc>
  406114:	3a04      	subs	r2, #4
  406116:	d3d9      	bcc.n	4060cc <memcpy+0xcc>
  406118:	3a01      	subs	r2, #1
  40611a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40611e:	f800 3b01 	strb.w	r3, [r0], #1
  406122:	d2f9      	bcs.n	406118 <memcpy+0x118>
  406124:	780b      	ldrb	r3, [r1, #0]
  406126:	7003      	strb	r3, [r0, #0]
  406128:	784b      	ldrb	r3, [r1, #1]
  40612a:	7043      	strb	r3, [r0, #1]
  40612c:	788b      	ldrb	r3, [r1, #2]
  40612e:	7083      	strb	r3, [r0, #2]
  406130:	4660      	mov	r0, ip
  406132:	4770      	bx	lr

00406134 <__malloc_lock>:
  406134:	4801      	ldr	r0, [pc, #4]	; (40613c <__malloc_lock+0x8>)
  406136:	f7ff bc59 	b.w	4059ec <__retarget_lock_acquire_recursive>
  40613a:	bf00      	nop
  40613c:	20400cb0 	.word	0x20400cb0

00406140 <__malloc_unlock>:
  406140:	4801      	ldr	r0, [pc, #4]	; (406148 <__malloc_unlock+0x8>)
  406142:	f7ff bc55 	b.w	4059f0 <__retarget_lock_release_recursive>
  406146:	bf00      	nop
  406148:	20400cb0 	.word	0x20400cb0

0040614c <_Balloc>:
  40614c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40614e:	b570      	push	{r4, r5, r6, lr}
  406150:	4605      	mov	r5, r0
  406152:	460c      	mov	r4, r1
  406154:	b14b      	cbz	r3, 40616a <_Balloc+0x1e>
  406156:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40615a:	b180      	cbz	r0, 40617e <_Balloc+0x32>
  40615c:	6802      	ldr	r2, [r0, #0]
  40615e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406162:	2300      	movs	r3, #0
  406164:	6103      	str	r3, [r0, #16]
  406166:	60c3      	str	r3, [r0, #12]
  406168:	bd70      	pop	{r4, r5, r6, pc}
  40616a:	2221      	movs	r2, #33	; 0x21
  40616c:	2104      	movs	r1, #4
  40616e:	f000 fc55 	bl	406a1c <_calloc_r>
  406172:	64e8      	str	r0, [r5, #76]	; 0x4c
  406174:	4603      	mov	r3, r0
  406176:	2800      	cmp	r0, #0
  406178:	d1ed      	bne.n	406156 <_Balloc+0xa>
  40617a:	2000      	movs	r0, #0
  40617c:	bd70      	pop	{r4, r5, r6, pc}
  40617e:	2101      	movs	r1, #1
  406180:	fa01 f604 	lsl.w	r6, r1, r4
  406184:	1d72      	adds	r2, r6, #5
  406186:	4628      	mov	r0, r5
  406188:	0092      	lsls	r2, r2, #2
  40618a:	f000 fc47 	bl	406a1c <_calloc_r>
  40618e:	2800      	cmp	r0, #0
  406190:	d0f3      	beq.n	40617a <_Balloc+0x2e>
  406192:	6044      	str	r4, [r0, #4]
  406194:	6086      	str	r6, [r0, #8]
  406196:	e7e4      	b.n	406162 <_Balloc+0x16>

00406198 <_Bfree>:
  406198:	b131      	cbz	r1, 4061a8 <_Bfree+0x10>
  40619a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40619c:	684a      	ldr	r2, [r1, #4]
  40619e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4061a2:	6008      	str	r0, [r1, #0]
  4061a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4061a8:	4770      	bx	lr
  4061aa:	bf00      	nop

004061ac <__multadd>:
  4061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061ae:	690c      	ldr	r4, [r1, #16]
  4061b0:	b083      	sub	sp, #12
  4061b2:	460d      	mov	r5, r1
  4061b4:	4606      	mov	r6, r0
  4061b6:	f101 0e14 	add.w	lr, r1, #20
  4061ba:	2700      	movs	r7, #0
  4061bc:	f8de 0000 	ldr.w	r0, [lr]
  4061c0:	b281      	uxth	r1, r0
  4061c2:	fb02 3301 	mla	r3, r2, r1, r3
  4061c6:	0c01      	lsrs	r1, r0, #16
  4061c8:	0c18      	lsrs	r0, r3, #16
  4061ca:	fb02 0101 	mla	r1, r2, r1, r0
  4061ce:	b29b      	uxth	r3, r3
  4061d0:	3701      	adds	r7, #1
  4061d2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4061d6:	42bc      	cmp	r4, r7
  4061d8:	f84e 3b04 	str.w	r3, [lr], #4
  4061dc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4061e0:	dcec      	bgt.n	4061bc <__multadd+0x10>
  4061e2:	b13b      	cbz	r3, 4061f4 <__multadd+0x48>
  4061e4:	68aa      	ldr	r2, [r5, #8]
  4061e6:	4294      	cmp	r4, r2
  4061e8:	da07      	bge.n	4061fa <__multadd+0x4e>
  4061ea:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4061ee:	3401      	adds	r4, #1
  4061f0:	6153      	str	r3, [r2, #20]
  4061f2:	612c      	str	r4, [r5, #16]
  4061f4:	4628      	mov	r0, r5
  4061f6:	b003      	add	sp, #12
  4061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4061fa:	6869      	ldr	r1, [r5, #4]
  4061fc:	9301      	str	r3, [sp, #4]
  4061fe:	3101      	adds	r1, #1
  406200:	4630      	mov	r0, r6
  406202:	f7ff ffa3 	bl	40614c <_Balloc>
  406206:	692a      	ldr	r2, [r5, #16]
  406208:	3202      	adds	r2, #2
  40620a:	f105 010c 	add.w	r1, r5, #12
  40620e:	4607      	mov	r7, r0
  406210:	0092      	lsls	r2, r2, #2
  406212:	300c      	adds	r0, #12
  406214:	f7ff fef4 	bl	406000 <memcpy>
  406218:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40621a:	6869      	ldr	r1, [r5, #4]
  40621c:	9b01      	ldr	r3, [sp, #4]
  40621e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406222:	6028      	str	r0, [r5, #0]
  406224:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406228:	463d      	mov	r5, r7
  40622a:	e7de      	b.n	4061ea <__multadd+0x3e>

0040622c <__hi0bits>:
  40622c:	0c02      	lsrs	r2, r0, #16
  40622e:	0412      	lsls	r2, r2, #16
  406230:	4603      	mov	r3, r0
  406232:	b9b2      	cbnz	r2, 406262 <__hi0bits+0x36>
  406234:	0403      	lsls	r3, r0, #16
  406236:	2010      	movs	r0, #16
  406238:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40623c:	bf04      	itt	eq
  40623e:	021b      	lsleq	r3, r3, #8
  406240:	3008      	addeq	r0, #8
  406242:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406246:	bf04      	itt	eq
  406248:	011b      	lsleq	r3, r3, #4
  40624a:	3004      	addeq	r0, #4
  40624c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406250:	bf04      	itt	eq
  406252:	009b      	lsleq	r3, r3, #2
  406254:	3002      	addeq	r0, #2
  406256:	2b00      	cmp	r3, #0
  406258:	db02      	blt.n	406260 <__hi0bits+0x34>
  40625a:	005b      	lsls	r3, r3, #1
  40625c:	d403      	bmi.n	406266 <__hi0bits+0x3a>
  40625e:	2020      	movs	r0, #32
  406260:	4770      	bx	lr
  406262:	2000      	movs	r0, #0
  406264:	e7e8      	b.n	406238 <__hi0bits+0xc>
  406266:	3001      	adds	r0, #1
  406268:	4770      	bx	lr
  40626a:	bf00      	nop

0040626c <__lo0bits>:
  40626c:	6803      	ldr	r3, [r0, #0]
  40626e:	f013 0207 	ands.w	r2, r3, #7
  406272:	4601      	mov	r1, r0
  406274:	d007      	beq.n	406286 <__lo0bits+0x1a>
  406276:	07da      	lsls	r2, r3, #31
  406278:	d421      	bmi.n	4062be <__lo0bits+0x52>
  40627a:	0798      	lsls	r0, r3, #30
  40627c:	d421      	bmi.n	4062c2 <__lo0bits+0x56>
  40627e:	089b      	lsrs	r3, r3, #2
  406280:	600b      	str	r3, [r1, #0]
  406282:	2002      	movs	r0, #2
  406284:	4770      	bx	lr
  406286:	b298      	uxth	r0, r3
  406288:	b198      	cbz	r0, 4062b2 <__lo0bits+0x46>
  40628a:	4610      	mov	r0, r2
  40628c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406290:	bf04      	itt	eq
  406292:	0a1b      	lsreq	r3, r3, #8
  406294:	3008      	addeq	r0, #8
  406296:	071a      	lsls	r2, r3, #28
  406298:	bf04      	itt	eq
  40629a:	091b      	lsreq	r3, r3, #4
  40629c:	3004      	addeq	r0, #4
  40629e:	079a      	lsls	r2, r3, #30
  4062a0:	bf04      	itt	eq
  4062a2:	089b      	lsreq	r3, r3, #2
  4062a4:	3002      	addeq	r0, #2
  4062a6:	07da      	lsls	r2, r3, #31
  4062a8:	d407      	bmi.n	4062ba <__lo0bits+0x4e>
  4062aa:	085b      	lsrs	r3, r3, #1
  4062ac:	d104      	bne.n	4062b8 <__lo0bits+0x4c>
  4062ae:	2020      	movs	r0, #32
  4062b0:	4770      	bx	lr
  4062b2:	0c1b      	lsrs	r3, r3, #16
  4062b4:	2010      	movs	r0, #16
  4062b6:	e7e9      	b.n	40628c <__lo0bits+0x20>
  4062b8:	3001      	adds	r0, #1
  4062ba:	600b      	str	r3, [r1, #0]
  4062bc:	4770      	bx	lr
  4062be:	2000      	movs	r0, #0
  4062c0:	4770      	bx	lr
  4062c2:	085b      	lsrs	r3, r3, #1
  4062c4:	600b      	str	r3, [r1, #0]
  4062c6:	2001      	movs	r0, #1
  4062c8:	4770      	bx	lr
  4062ca:	bf00      	nop

004062cc <__i2b>:
  4062cc:	b510      	push	{r4, lr}
  4062ce:	460c      	mov	r4, r1
  4062d0:	2101      	movs	r1, #1
  4062d2:	f7ff ff3b 	bl	40614c <_Balloc>
  4062d6:	2201      	movs	r2, #1
  4062d8:	6144      	str	r4, [r0, #20]
  4062da:	6102      	str	r2, [r0, #16]
  4062dc:	bd10      	pop	{r4, pc}
  4062de:	bf00      	nop

004062e0 <__multiply>:
  4062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062e4:	690c      	ldr	r4, [r1, #16]
  4062e6:	6915      	ldr	r5, [r2, #16]
  4062e8:	42ac      	cmp	r4, r5
  4062ea:	b083      	sub	sp, #12
  4062ec:	468b      	mov	fp, r1
  4062ee:	4616      	mov	r6, r2
  4062f0:	da04      	bge.n	4062fc <__multiply+0x1c>
  4062f2:	4622      	mov	r2, r4
  4062f4:	46b3      	mov	fp, r6
  4062f6:	462c      	mov	r4, r5
  4062f8:	460e      	mov	r6, r1
  4062fa:	4615      	mov	r5, r2
  4062fc:	f8db 3008 	ldr.w	r3, [fp, #8]
  406300:	f8db 1004 	ldr.w	r1, [fp, #4]
  406304:	eb04 0805 	add.w	r8, r4, r5
  406308:	4598      	cmp	r8, r3
  40630a:	bfc8      	it	gt
  40630c:	3101      	addgt	r1, #1
  40630e:	f7ff ff1d 	bl	40614c <_Balloc>
  406312:	f100 0914 	add.w	r9, r0, #20
  406316:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40631a:	45d1      	cmp	r9, sl
  40631c:	9000      	str	r0, [sp, #0]
  40631e:	d205      	bcs.n	40632c <__multiply+0x4c>
  406320:	464b      	mov	r3, r9
  406322:	2100      	movs	r1, #0
  406324:	f843 1b04 	str.w	r1, [r3], #4
  406328:	459a      	cmp	sl, r3
  40632a:	d8fb      	bhi.n	406324 <__multiply+0x44>
  40632c:	f106 0c14 	add.w	ip, r6, #20
  406330:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406334:	f10b 0b14 	add.w	fp, fp, #20
  406338:	459c      	cmp	ip, r3
  40633a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40633e:	d24c      	bcs.n	4063da <__multiply+0xfa>
  406340:	f8cd a004 	str.w	sl, [sp, #4]
  406344:	469a      	mov	sl, r3
  406346:	f8dc 5000 	ldr.w	r5, [ip]
  40634a:	b2af      	uxth	r7, r5
  40634c:	b1ef      	cbz	r7, 40638a <__multiply+0xaa>
  40634e:	2100      	movs	r1, #0
  406350:	464d      	mov	r5, r9
  406352:	465e      	mov	r6, fp
  406354:	460c      	mov	r4, r1
  406356:	f856 2b04 	ldr.w	r2, [r6], #4
  40635a:	6828      	ldr	r0, [r5, #0]
  40635c:	b293      	uxth	r3, r2
  40635e:	b281      	uxth	r1, r0
  406360:	fb07 1303 	mla	r3, r7, r3, r1
  406364:	0c12      	lsrs	r2, r2, #16
  406366:	0c01      	lsrs	r1, r0, #16
  406368:	4423      	add	r3, r4
  40636a:	fb07 1102 	mla	r1, r7, r2, r1
  40636e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406372:	b29b      	uxth	r3, r3
  406374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406378:	45b6      	cmp	lr, r6
  40637a:	f845 3b04 	str.w	r3, [r5], #4
  40637e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406382:	d8e8      	bhi.n	406356 <__multiply+0x76>
  406384:	602c      	str	r4, [r5, #0]
  406386:	f8dc 5000 	ldr.w	r5, [ip]
  40638a:	0c2d      	lsrs	r5, r5, #16
  40638c:	d01d      	beq.n	4063ca <__multiply+0xea>
  40638e:	f8d9 3000 	ldr.w	r3, [r9]
  406392:	4648      	mov	r0, r9
  406394:	461c      	mov	r4, r3
  406396:	4659      	mov	r1, fp
  406398:	2200      	movs	r2, #0
  40639a:	880e      	ldrh	r6, [r1, #0]
  40639c:	0c24      	lsrs	r4, r4, #16
  40639e:	fb05 4406 	mla	r4, r5, r6, r4
  4063a2:	4422      	add	r2, r4
  4063a4:	b29b      	uxth	r3, r3
  4063a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4063aa:	f840 3b04 	str.w	r3, [r0], #4
  4063ae:	f851 3b04 	ldr.w	r3, [r1], #4
  4063b2:	6804      	ldr	r4, [r0, #0]
  4063b4:	0c1b      	lsrs	r3, r3, #16
  4063b6:	b2a6      	uxth	r6, r4
  4063b8:	fb05 6303 	mla	r3, r5, r3, r6
  4063bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4063c0:	458e      	cmp	lr, r1
  4063c2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4063c6:	d8e8      	bhi.n	40639a <__multiply+0xba>
  4063c8:	6003      	str	r3, [r0, #0]
  4063ca:	f10c 0c04 	add.w	ip, ip, #4
  4063ce:	45e2      	cmp	sl, ip
  4063d0:	f109 0904 	add.w	r9, r9, #4
  4063d4:	d8b7      	bhi.n	406346 <__multiply+0x66>
  4063d6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4063da:	f1b8 0f00 	cmp.w	r8, #0
  4063de:	dd0b      	ble.n	4063f8 <__multiply+0x118>
  4063e0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4063e4:	f1aa 0a04 	sub.w	sl, sl, #4
  4063e8:	b11b      	cbz	r3, 4063f2 <__multiply+0x112>
  4063ea:	e005      	b.n	4063f8 <__multiply+0x118>
  4063ec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4063f0:	b913      	cbnz	r3, 4063f8 <__multiply+0x118>
  4063f2:	f1b8 0801 	subs.w	r8, r8, #1
  4063f6:	d1f9      	bne.n	4063ec <__multiply+0x10c>
  4063f8:	9800      	ldr	r0, [sp, #0]
  4063fa:	f8c0 8010 	str.w	r8, [r0, #16]
  4063fe:	b003      	add	sp, #12
  406400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406404 <__pow5mult>:
  406404:	f012 0303 	ands.w	r3, r2, #3
  406408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40640c:	4614      	mov	r4, r2
  40640e:	4607      	mov	r7, r0
  406410:	d12e      	bne.n	406470 <__pow5mult+0x6c>
  406412:	460d      	mov	r5, r1
  406414:	10a4      	asrs	r4, r4, #2
  406416:	d01c      	beq.n	406452 <__pow5mult+0x4e>
  406418:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40641a:	b396      	cbz	r6, 406482 <__pow5mult+0x7e>
  40641c:	07e3      	lsls	r3, r4, #31
  40641e:	f04f 0800 	mov.w	r8, #0
  406422:	d406      	bmi.n	406432 <__pow5mult+0x2e>
  406424:	1064      	asrs	r4, r4, #1
  406426:	d014      	beq.n	406452 <__pow5mult+0x4e>
  406428:	6830      	ldr	r0, [r6, #0]
  40642a:	b1a8      	cbz	r0, 406458 <__pow5mult+0x54>
  40642c:	4606      	mov	r6, r0
  40642e:	07e3      	lsls	r3, r4, #31
  406430:	d5f8      	bpl.n	406424 <__pow5mult+0x20>
  406432:	4632      	mov	r2, r6
  406434:	4629      	mov	r1, r5
  406436:	4638      	mov	r0, r7
  406438:	f7ff ff52 	bl	4062e0 <__multiply>
  40643c:	b1b5      	cbz	r5, 40646c <__pow5mult+0x68>
  40643e:	686a      	ldr	r2, [r5, #4]
  406440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406442:	1064      	asrs	r4, r4, #1
  406444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406448:	6029      	str	r1, [r5, #0]
  40644a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40644e:	4605      	mov	r5, r0
  406450:	d1ea      	bne.n	406428 <__pow5mult+0x24>
  406452:	4628      	mov	r0, r5
  406454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406458:	4632      	mov	r2, r6
  40645a:	4631      	mov	r1, r6
  40645c:	4638      	mov	r0, r7
  40645e:	f7ff ff3f 	bl	4062e0 <__multiply>
  406462:	6030      	str	r0, [r6, #0]
  406464:	f8c0 8000 	str.w	r8, [r0]
  406468:	4606      	mov	r6, r0
  40646a:	e7e0      	b.n	40642e <__pow5mult+0x2a>
  40646c:	4605      	mov	r5, r0
  40646e:	e7d9      	b.n	406424 <__pow5mult+0x20>
  406470:	1e5a      	subs	r2, r3, #1
  406472:	4d0b      	ldr	r5, [pc, #44]	; (4064a0 <__pow5mult+0x9c>)
  406474:	2300      	movs	r3, #0
  406476:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40647a:	f7ff fe97 	bl	4061ac <__multadd>
  40647e:	4605      	mov	r5, r0
  406480:	e7c8      	b.n	406414 <__pow5mult+0x10>
  406482:	2101      	movs	r1, #1
  406484:	4638      	mov	r0, r7
  406486:	f7ff fe61 	bl	40614c <_Balloc>
  40648a:	f240 2171 	movw	r1, #625	; 0x271
  40648e:	2201      	movs	r2, #1
  406490:	2300      	movs	r3, #0
  406492:	6141      	str	r1, [r0, #20]
  406494:	6102      	str	r2, [r0, #16]
  406496:	4606      	mov	r6, r0
  406498:	64b8      	str	r0, [r7, #72]	; 0x48
  40649a:	6003      	str	r3, [r0, #0]
  40649c:	e7be      	b.n	40641c <__pow5mult+0x18>
  40649e:	bf00      	nop
  4064a0:	00408620 	.word	0x00408620

004064a4 <__lshift>:
  4064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4064a8:	4691      	mov	r9, r2
  4064aa:	690a      	ldr	r2, [r1, #16]
  4064ac:	688b      	ldr	r3, [r1, #8]
  4064ae:	ea4f 1469 	mov.w	r4, r9, asr #5
  4064b2:	eb04 0802 	add.w	r8, r4, r2
  4064b6:	f108 0501 	add.w	r5, r8, #1
  4064ba:	429d      	cmp	r5, r3
  4064bc:	460e      	mov	r6, r1
  4064be:	4607      	mov	r7, r0
  4064c0:	6849      	ldr	r1, [r1, #4]
  4064c2:	dd04      	ble.n	4064ce <__lshift+0x2a>
  4064c4:	005b      	lsls	r3, r3, #1
  4064c6:	429d      	cmp	r5, r3
  4064c8:	f101 0101 	add.w	r1, r1, #1
  4064cc:	dcfa      	bgt.n	4064c4 <__lshift+0x20>
  4064ce:	4638      	mov	r0, r7
  4064d0:	f7ff fe3c 	bl	40614c <_Balloc>
  4064d4:	2c00      	cmp	r4, #0
  4064d6:	f100 0314 	add.w	r3, r0, #20
  4064da:	dd06      	ble.n	4064ea <__lshift+0x46>
  4064dc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4064e0:	2100      	movs	r1, #0
  4064e2:	f843 1b04 	str.w	r1, [r3], #4
  4064e6:	429a      	cmp	r2, r3
  4064e8:	d1fb      	bne.n	4064e2 <__lshift+0x3e>
  4064ea:	6934      	ldr	r4, [r6, #16]
  4064ec:	f106 0114 	add.w	r1, r6, #20
  4064f0:	f019 091f 	ands.w	r9, r9, #31
  4064f4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4064f8:	d01d      	beq.n	406536 <__lshift+0x92>
  4064fa:	f1c9 0c20 	rsb	ip, r9, #32
  4064fe:	2200      	movs	r2, #0
  406500:	680c      	ldr	r4, [r1, #0]
  406502:	fa04 f409 	lsl.w	r4, r4, r9
  406506:	4314      	orrs	r4, r2
  406508:	f843 4b04 	str.w	r4, [r3], #4
  40650c:	f851 2b04 	ldr.w	r2, [r1], #4
  406510:	458e      	cmp	lr, r1
  406512:	fa22 f20c 	lsr.w	r2, r2, ip
  406516:	d8f3      	bhi.n	406500 <__lshift+0x5c>
  406518:	601a      	str	r2, [r3, #0]
  40651a:	b10a      	cbz	r2, 406520 <__lshift+0x7c>
  40651c:	f108 0502 	add.w	r5, r8, #2
  406520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406522:	6872      	ldr	r2, [r6, #4]
  406524:	3d01      	subs	r5, #1
  406526:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40652a:	6105      	str	r5, [r0, #16]
  40652c:	6031      	str	r1, [r6, #0]
  40652e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406536:	3b04      	subs	r3, #4
  406538:	f851 2b04 	ldr.w	r2, [r1], #4
  40653c:	f843 2f04 	str.w	r2, [r3, #4]!
  406540:	458e      	cmp	lr, r1
  406542:	d8f9      	bhi.n	406538 <__lshift+0x94>
  406544:	e7ec      	b.n	406520 <__lshift+0x7c>
  406546:	bf00      	nop

00406548 <__mcmp>:
  406548:	b430      	push	{r4, r5}
  40654a:	690b      	ldr	r3, [r1, #16]
  40654c:	4605      	mov	r5, r0
  40654e:	6900      	ldr	r0, [r0, #16]
  406550:	1ac0      	subs	r0, r0, r3
  406552:	d10f      	bne.n	406574 <__mcmp+0x2c>
  406554:	009b      	lsls	r3, r3, #2
  406556:	3514      	adds	r5, #20
  406558:	3114      	adds	r1, #20
  40655a:	4419      	add	r1, r3
  40655c:	442b      	add	r3, r5
  40655e:	e001      	b.n	406564 <__mcmp+0x1c>
  406560:	429d      	cmp	r5, r3
  406562:	d207      	bcs.n	406574 <__mcmp+0x2c>
  406564:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406568:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40656c:	4294      	cmp	r4, r2
  40656e:	d0f7      	beq.n	406560 <__mcmp+0x18>
  406570:	d302      	bcc.n	406578 <__mcmp+0x30>
  406572:	2001      	movs	r0, #1
  406574:	bc30      	pop	{r4, r5}
  406576:	4770      	bx	lr
  406578:	f04f 30ff 	mov.w	r0, #4294967295
  40657c:	e7fa      	b.n	406574 <__mcmp+0x2c>
  40657e:	bf00      	nop

00406580 <__mdiff>:
  406580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406584:	690f      	ldr	r7, [r1, #16]
  406586:	460e      	mov	r6, r1
  406588:	6911      	ldr	r1, [r2, #16]
  40658a:	1a7f      	subs	r7, r7, r1
  40658c:	2f00      	cmp	r7, #0
  40658e:	4690      	mov	r8, r2
  406590:	d117      	bne.n	4065c2 <__mdiff+0x42>
  406592:	0089      	lsls	r1, r1, #2
  406594:	f106 0514 	add.w	r5, r6, #20
  406598:	f102 0e14 	add.w	lr, r2, #20
  40659c:	186b      	adds	r3, r5, r1
  40659e:	4471      	add	r1, lr
  4065a0:	e001      	b.n	4065a6 <__mdiff+0x26>
  4065a2:	429d      	cmp	r5, r3
  4065a4:	d25c      	bcs.n	406660 <__mdiff+0xe0>
  4065a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4065aa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4065ae:	42a2      	cmp	r2, r4
  4065b0:	d0f7      	beq.n	4065a2 <__mdiff+0x22>
  4065b2:	d25e      	bcs.n	406672 <__mdiff+0xf2>
  4065b4:	4633      	mov	r3, r6
  4065b6:	462c      	mov	r4, r5
  4065b8:	4646      	mov	r6, r8
  4065ba:	4675      	mov	r5, lr
  4065bc:	4698      	mov	r8, r3
  4065be:	2701      	movs	r7, #1
  4065c0:	e005      	b.n	4065ce <__mdiff+0x4e>
  4065c2:	db58      	blt.n	406676 <__mdiff+0xf6>
  4065c4:	f106 0514 	add.w	r5, r6, #20
  4065c8:	f108 0414 	add.w	r4, r8, #20
  4065cc:	2700      	movs	r7, #0
  4065ce:	6871      	ldr	r1, [r6, #4]
  4065d0:	f7ff fdbc 	bl	40614c <_Balloc>
  4065d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4065d8:	6936      	ldr	r6, [r6, #16]
  4065da:	60c7      	str	r7, [r0, #12]
  4065dc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4065e0:	46a6      	mov	lr, r4
  4065e2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4065e6:	f100 0414 	add.w	r4, r0, #20
  4065ea:	2300      	movs	r3, #0
  4065ec:	f85e 1b04 	ldr.w	r1, [lr], #4
  4065f0:	f855 8b04 	ldr.w	r8, [r5], #4
  4065f4:	b28a      	uxth	r2, r1
  4065f6:	fa13 f388 	uxtah	r3, r3, r8
  4065fa:	0c09      	lsrs	r1, r1, #16
  4065fc:	1a9a      	subs	r2, r3, r2
  4065fe:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406602:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406606:	b292      	uxth	r2, r2
  406608:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40660c:	45f4      	cmp	ip, lr
  40660e:	f844 2b04 	str.w	r2, [r4], #4
  406612:	ea4f 4323 	mov.w	r3, r3, asr #16
  406616:	d8e9      	bhi.n	4065ec <__mdiff+0x6c>
  406618:	42af      	cmp	r7, r5
  40661a:	d917      	bls.n	40664c <__mdiff+0xcc>
  40661c:	46a4      	mov	ip, r4
  40661e:	46ae      	mov	lr, r5
  406620:	f85e 2b04 	ldr.w	r2, [lr], #4
  406624:	fa13 f382 	uxtah	r3, r3, r2
  406628:	1419      	asrs	r1, r3, #16
  40662a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40662e:	b29b      	uxth	r3, r3
  406630:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406634:	4577      	cmp	r7, lr
  406636:	f84c 2b04 	str.w	r2, [ip], #4
  40663a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40663e:	d8ef      	bhi.n	406620 <__mdiff+0xa0>
  406640:	43ed      	mvns	r5, r5
  406642:	442f      	add	r7, r5
  406644:	f027 0703 	bic.w	r7, r7, #3
  406648:	3704      	adds	r7, #4
  40664a:	443c      	add	r4, r7
  40664c:	3c04      	subs	r4, #4
  40664e:	b922      	cbnz	r2, 40665a <__mdiff+0xda>
  406650:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406654:	3e01      	subs	r6, #1
  406656:	2b00      	cmp	r3, #0
  406658:	d0fa      	beq.n	406650 <__mdiff+0xd0>
  40665a:	6106      	str	r6, [r0, #16]
  40665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406660:	2100      	movs	r1, #0
  406662:	f7ff fd73 	bl	40614c <_Balloc>
  406666:	2201      	movs	r2, #1
  406668:	2300      	movs	r3, #0
  40666a:	6102      	str	r2, [r0, #16]
  40666c:	6143      	str	r3, [r0, #20]
  40666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406672:	4674      	mov	r4, lr
  406674:	e7ab      	b.n	4065ce <__mdiff+0x4e>
  406676:	4633      	mov	r3, r6
  406678:	f106 0414 	add.w	r4, r6, #20
  40667c:	f102 0514 	add.w	r5, r2, #20
  406680:	4616      	mov	r6, r2
  406682:	2701      	movs	r7, #1
  406684:	4698      	mov	r8, r3
  406686:	e7a2      	b.n	4065ce <__mdiff+0x4e>

00406688 <__d2b>:
  406688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40668c:	b082      	sub	sp, #8
  40668e:	2101      	movs	r1, #1
  406690:	461c      	mov	r4, r3
  406692:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406696:	4615      	mov	r5, r2
  406698:	9e08      	ldr	r6, [sp, #32]
  40669a:	f7ff fd57 	bl	40614c <_Balloc>
  40669e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4066a2:	4680      	mov	r8, r0
  4066a4:	b10f      	cbz	r7, 4066aa <__d2b+0x22>
  4066a6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4066aa:	9401      	str	r4, [sp, #4]
  4066ac:	b31d      	cbz	r5, 4066f6 <__d2b+0x6e>
  4066ae:	a802      	add	r0, sp, #8
  4066b0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4066b4:	f7ff fdda 	bl	40626c <__lo0bits>
  4066b8:	2800      	cmp	r0, #0
  4066ba:	d134      	bne.n	406726 <__d2b+0x9e>
  4066bc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4066c0:	f8c8 2014 	str.w	r2, [r8, #20]
  4066c4:	2b00      	cmp	r3, #0
  4066c6:	bf0c      	ite	eq
  4066c8:	2101      	moveq	r1, #1
  4066ca:	2102      	movne	r1, #2
  4066cc:	f8c8 3018 	str.w	r3, [r8, #24]
  4066d0:	f8c8 1010 	str.w	r1, [r8, #16]
  4066d4:	b9df      	cbnz	r7, 40670e <__d2b+0x86>
  4066d6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4066da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4066de:	6030      	str	r0, [r6, #0]
  4066e0:	6918      	ldr	r0, [r3, #16]
  4066e2:	f7ff fda3 	bl	40622c <__hi0bits>
  4066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4066e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4066ec:	6018      	str	r0, [r3, #0]
  4066ee:	4640      	mov	r0, r8
  4066f0:	b002      	add	sp, #8
  4066f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4066f6:	a801      	add	r0, sp, #4
  4066f8:	f7ff fdb8 	bl	40626c <__lo0bits>
  4066fc:	9b01      	ldr	r3, [sp, #4]
  4066fe:	f8c8 3014 	str.w	r3, [r8, #20]
  406702:	2101      	movs	r1, #1
  406704:	3020      	adds	r0, #32
  406706:	f8c8 1010 	str.w	r1, [r8, #16]
  40670a:	2f00      	cmp	r7, #0
  40670c:	d0e3      	beq.n	4066d6 <__d2b+0x4e>
  40670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406710:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406714:	4407      	add	r7, r0
  406716:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40671a:	6037      	str	r7, [r6, #0]
  40671c:	6018      	str	r0, [r3, #0]
  40671e:	4640      	mov	r0, r8
  406720:	b002      	add	sp, #8
  406722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406726:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40672a:	f1c0 0220 	rsb	r2, r0, #32
  40672e:	fa03 f202 	lsl.w	r2, r3, r2
  406732:	430a      	orrs	r2, r1
  406734:	40c3      	lsrs	r3, r0
  406736:	9301      	str	r3, [sp, #4]
  406738:	f8c8 2014 	str.w	r2, [r8, #20]
  40673c:	e7c2      	b.n	4066c4 <__d2b+0x3c>
  40673e:	bf00      	nop

00406740 <_sbrk_r>:
  406740:	b538      	push	{r3, r4, r5, lr}
  406742:	4c07      	ldr	r4, [pc, #28]	; (406760 <_sbrk_r+0x20>)
  406744:	2300      	movs	r3, #0
  406746:	4605      	mov	r5, r0
  406748:	4608      	mov	r0, r1
  40674a:	6023      	str	r3, [r4, #0]
  40674c:	f7fc f944 	bl	4029d8 <_sbrk>
  406750:	1c43      	adds	r3, r0, #1
  406752:	d000      	beq.n	406756 <_sbrk_r+0x16>
  406754:	bd38      	pop	{r3, r4, r5, pc}
  406756:	6823      	ldr	r3, [r4, #0]
  406758:	2b00      	cmp	r3, #0
  40675a:	d0fb      	beq.n	406754 <_sbrk_r+0x14>
  40675c:	602b      	str	r3, [r5, #0]
  40675e:	bd38      	pop	{r3, r4, r5, pc}
  406760:	20400cc4 	.word	0x20400cc4
	...

00406780 <strlen>:
  406780:	f890 f000 	pld	[r0]
  406784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406788:	f020 0107 	bic.w	r1, r0, #7
  40678c:	f06f 0c00 	mvn.w	ip, #0
  406790:	f010 0407 	ands.w	r4, r0, #7
  406794:	f891 f020 	pld	[r1, #32]
  406798:	f040 8049 	bne.w	40682e <strlen+0xae>
  40679c:	f04f 0400 	mov.w	r4, #0
  4067a0:	f06f 0007 	mvn.w	r0, #7
  4067a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4067ac:	f100 0008 	add.w	r0, r0, #8
  4067b0:	fa82 f24c 	uadd8	r2, r2, ip
  4067b4:	faa4 f28c 	sel	r2, r4, ip
  4067b8:	fa83 f34c 	uadd8	r3, r3, ip
  4067bc:	faa2 f38c 	sel	r3, r2, ip
  4067c0:	bb4b      	cbnz	r3, 406816 <strlen+0x96>
  4067c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4067c6:	fa82 f24c 	uadd8	r2, r2, ip
  4067ca:	f100 0008 	add.w	r0, r0, #8
  4067ce:	faa4 f28c 	sel	r2, r4, ip
  4067d2:	fa83 f34c 	uadd8	r3, r3, ip
  4067d6:	faa2 f38c 	sel	r3, r2, ip
  4067da:	b9e3      	cbnz	r3, 406816 <strlen+0x96>
  4067dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4067e0:	fa82 f24c 	uadd8	r2, r2, ip
  4067e4:	f100 0008 	add.w	r0, r0, #8
  4067e8:	faa4 f28c 	sel	r2, r4, ip
  4067ec:	fa83 f34c 	uadd8	r3, r3, ip
  4067f0:	faa2 f38c 	sel	r3, r2, ip
  4067f4:	b97b      	cbnz	r3, 406816 <strlen+0x96>
  4067f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4067fa:	f101 0120 	add.w	r1, r1, #32
  4067fe:	fa82 f24c 	uadd8	r2, r2, ip
  406802:	f100 0008 	add.w	r0, r0, #8
  406806:	faa4 f28c 	sel	r2, r4, ip
  40680a:	fa83 f34c 	uadd8	r3, r3, ip
  40680e:	faa2 f38c 	sel	r3, r2, ip
  406812:	2b00      	cmp	r3, #0
  406814:	d0c6      	beq.n	4067a4 <strlen+0x24>
  406816:	2a00      	cmp	r2, #0
  406818:	bf04      	itt	eq
  40681a:	3004      	addeq	r0, #4
  40681c:	461a      	moveq	r2, r3
  40681e:	ba12      	rev	r2, r2
  406820:	fab2 f282 	clz	r2, r2
  406824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40682c:	4770      	bx	lr
  40682e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406832:	f004 0503 	and.w	r5, r4, #3
  406836:	f1c4 0000 	rsb	r0, r4, #0
  40683a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40683e:	f014 0f04 	tst.w	r4, #4
  406842:	f891 f040 	pld	[r1, #64]	; 0x40
  406846:	fa0c f505 	lsl.w	r5, ip, r5
  40684a:	ea62 0205 	orn	r2, r2, r5
  40684e:	bf1c      	itt	ne
  406850:	ea63 0305 	ornne	r3, r3, r5
  406854:	4662      	movne	r2, ip
  406856:	f04f 0400 	mov.w	r4, #0
  40685a:	e7a9      	b.n	4067b0 <strlen+0x30>

0040685c <__ssprint_r>:
  40685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406860:	6893      	ldr	r3, [r2, #8]
  406862:	b083      	sub	sp, #12
  406864:	4690      	mov	r8, r2
  406866:	2b00      	cmp	r3, #0
  406868:	d070      	beq.n	40694c <__ssprint_r+0xf0>
  40686a:	4682      	mov	sl, r0
  40686c:	460c      	mov	r4, r1
  40686e:	6817      	ldr	r7, [r2, #0]
  406870:	688d      	ldr	r5, [r1, #8]
  406872:	6808      	ldr	r0, [r1, #0]
  406874:	e042      	b.n	4068fc <__ssprint_r+0xa0>
  406876:	89a3      	ldrh	r3, [r4, #12]
  406878:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40687c:	d02e      	beq.n	4068dc <__ssprint_r+0x80>
  40687e:	6965      	ldr	r5, [r4, #20]
  406880:	6921      	ldr	r1, [r4, #16]
  406882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406886:	eba0 0b01 	sub.w	fp, r0, r1
  40688a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40688e:	f10b 0001 	add.w	r0, fp, #1
  406892:	106d      	asrs	r5, r5, #1
  406894:	4430      	add	r0, r6
  406896:	42a8      	cmp	r0, r5
  406898:	462a      	mov	r2, r5
  40689a:	bf84      	itt	hi
  40689c:	4605      	movhi	r5, r0
  40689e:	462a      	movhi	r2, r5
  4068a0:	055b      	lsls	r3, r3, #21
  4068a2:	d538      	bpl.n	406916 <__ssprint_r+0xba>
  4068a4:	4611      	mov	r1, r2
  4068a6:	4650      	mov	r0, sl
  4068a8:	f7ff f8a4 	bl	4059f4 <_malloc_r>
  4068ac:	2800      	cmp	r0, #0
  4068ae:	d03c      	beq.n	40692a <__ssprint_r+0xce>
  4068b0:	465a      	mov	r2, fp
  4068b2:	6921      	ldr	r1, [r4, #16]
  4068b4:	9001      	str	r0, [sp, #4]
  4068b6:	f7ff fba3 	bl	406000 <memcpy>
  4068ba:	89a2      	ldrh	r2, [r4, #12]
  4068bc:	9b01      	ldr	r3, [sp, #4]
  4068be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4068c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4068c6:	81a2      	strh	r2, [r4, #12]
  4068c8:	eba5 020b 	sub.w	r2, r5, fp
  4068cc:	eb03 000b 	add.w	r0, r3, fp
  4068d0:	6165      	str	r5, [r4, #20]
  4068d2:	6123      	str	r3, [r4, #16]
  4068d4:	6020      	str	r0, [r4, #0]
  4068d6:	60a2      	str	r2, [r4, #8]
  4068d8:	4635      	mov	r5, r6
  4068da:	46b3      	mov	fp, r6
  4068dc:	465a      	mov	r2, fp
  4068de:	4649      	mov	r1, r9
  4068e0:	f000 fa18 	bl	406d14 <memmove>
  4068e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4068e8:	68a2      	ldr	r2, [r4, #8]
  4068ea:	6820      	ldr	r0, [r4, #0]
  4068ec:	1b55      	subs	r5, r2, r5
  4068ee:	4458      	add	r0, fp
  4068f0:	1b9e      	subs	r6, r3, r6
  4068f2:	60a5      	str	r5, [r4, #8]
  4068f4:	6020      	str	r0, [r4, #0]
  4068f6:	f8c8 6008 	str.w	r6, [r8, #8]
  4068fa:	b33e      	cbz	r6, 40694c <__ssprint_r+0xf0>
  4068fc:	687e      	ldr	r6, [r7, #4]
  4068fe:	463b      	mov	r3, r7
  406900:	3708      	adds	r7, #8
  406902:	2e00      	cmp	r6, #0
  406904:	d0fa      	beq.n	4068fc <__ssprint_r+0xa0>
  406906:	42ae      	cmp	r6, r5
  406908:	f8d3 9000 	ldr.w	r9, [r3]
  40690c:	46ab      	mov	fp, r5
  40690e:	d2b2      	bcs.n	406876 <__ssprint_r+0x1a>
  406910:	4635      	mov	r5, r6
  406912:	46b3      	mov	fp, r6
  406914:	e7e2      	b.n	4068dc <__ssprint_r+0x80>
  406916:	4650      	mov	r0, sl
  406918:	f000 fa60 	bl	406ddc <_realloc_r>
  40691c:	4603      	mov	r3, r0
  40691e:	2800      	cmp	r0, #0
  406920:	d1d2      	bne.n	4068c8 <__ssprint_r+0x6c>
  406922:	6921      	ldr	r1, [r4, #16]
  406924:	4650      	mov	r0, sl
  406926:	f000 f8f9 	bl	406b1c <_free_r>
  40692a:	230c      	movs	r3, #12
  40692c:	f8ca 3000 	str.w	r3, [sl]
  406930:	89a3      	ldrh	r3, [r4, #12]
  406932:	2200      	movs	r2, #0
  406934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406938:	f04f 30ff 	mov.w	r0, #4294967295
  40693c:	81a3      	strh	r3, [r4, #12]
  40693e:	f8c8 2008 	str.w	r2, [r8, #8]
  406942:	f8c8 2004 	str.w	r2, [r8, #4]
  406946:	b003      	add	sp, #12
  406948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40694c:	2000      	movs	r0, #0
  40694e:	f8c8 0004 	str.w	r0, [r8, #4]
  406952:	b003      	add	sp, #12
  406954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406958 <__register_exitproc>:
  406958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40695c:	4d2c      	ldr	r5, [pc, #176]	; (406a10 <__register_exitproc+0xb8>)
  40695e:	4606      	mov	r6, r0
  406960:	6828      	ldr	r0, [r5, #0]
  406962:	4698      	mov	r8, r3
  406964:	460f      	mov	r7, r1
  406966:	4691      	mov	r9, r2
  406968:	f7ff f840 	bl	4059ec <__retarget_lock_acquire_recursive>
  40696c:	4b29      	ldr	r3, [pc, #164]	; (406a14 <__register_exitproc+0xbc>)
  40696e:	681c      	ldr	r4, [r3, #0]
  406970:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406974:	2b00      	cmp	r3, #0
  406976:	d03e      	beq.n	4069f6 <__register_exitproc+0x9e>
  406978:	685a      	ldr	r2, [r3, #4]
  40697a:	2a1f      	cmp	r2, #31
  40697c:	dc1c      	bgt.n	4069b8 <__register_exitproc+0x60>
  40697e:	f102 0e01 	add.w	lr, r2, #1
  406982:	b176      	cbz	r6, 4069a2 <__register_exitproc+0x4a>
  406984:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406988:	2401      	movs	r4, #1
  40698a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40698e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406992:	4094      	lsls	r4, r2
  406994:	4320      	orrs	r0, r4
  406996:	2e02      	cmp	r6, #2
  406998:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40699c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4069a0:	d023      	beq.n	4069ea <__register_exitproc+0x92>
  4069a2:	3202      	adds	r2, #2
  4069a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4069a8:	6828      	ldr	r0, [r5, #0]
  4069aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4069ae:	f7ff f81f 	bl	4059f0 <__retarget_lock_release_recursive>
  4069b2:	2000      	movs	r0, #0
  4069b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4069b8:	4b17      	ldr	r3, [pc, #92]	; (406a18 <__register_exitproc+0xc0>)
  4069ba:	b30b      	cbz	r3, 406a00 <__register_exitproc+0xa8>
  4069bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4069c0:	f3af 8000 	nop.w
  4069c4:	4603      	mov	r3, r0
  4069c6:	b1d8      	cbz	r0, 406a00 <__register_exitproc+0xa8>
  4069c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4069cc:	6002      	str	r2, [r0, #0]
  4069ce:	2100      	movs	r1, #0
  4069d0:	6041      	str	r1, [r0, #4]
  4069d2:	460a      	mov	r2, r1
  4069d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4069d8:	f04f 0e01 	mov.w	lr, #1
  4069dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4069e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4069e4:	2e00      	cmp	r6, #0
  4069e6:	d0dc      	beq.n	4069a2 <__register_exitproc+0x4a>
  4069e8:	e7cc      	b.n	406984 <__register_exitproc+0x2c>
  4069ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4069ee:	430c      	orrs	r4, r1
  4069f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4069f4:	e7d5      	b.n	4069a2 <__register_exitproc+0x4a>
  4069f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4069fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4069fe:	e7bb      	b.n	406978 <__register_exitproc+0x20>
  406a00:	6828      	ldr	r0, [r5, #0]
  406a02:	f7fe fff5 	bl	4059f0 <__retarget_lock_release_recursive>
  406a06:	f04f 30ff 	mov.w	r0, #4294967295
  406a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406a0e:	bf00      	nop
  406a10:	20400450 	.word	0x20400450
  406a14:	004084b8 	.word	0x004084b8
  406a18:	00000000 	.word	0x00000000

00406a1c <_calloc_r>:
  406a1c:	b510      	push	{r4, lr}
  406a1e:	fb02 f101 	mul.w	r1, r2, r1
  406a22:	f7fe ffe7 	bl	4059f4 <_malloc_r>
  406a26:	4604      	mov	r4, r0
  406a28:	b1d8      	cbz	r0, 406a62 <_calloc_r+0x46>
  406a2a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406a2e:	f022 0203 	bic.w	r2, r2, #3
  406a32:	3a04      	subs	r2, #4
  406a34:	2a24      	cmp	r2, #36	; 0x24
  406a36:	d818      	bhi.n	406a6a <_calloc_r+0x4e>
  406a38:	2a13      	cmp	r2, #19
  406a3a:	d914      	bls.n	406a66 <_calloc_r+0x4a>
  406a3c:	2300      	movs	r3, #0
  406a3e:	2a1b      	cmp	r2, #27
  406a40:	6003      	str	r3, [r0, #0]
  406a42:	6043      	str	r3, [r0, #4]
  406a44:	d916      	bls.n	406a74 <_calloc_r+0x58>
  406a46:	2a24      	cmp	r2, #36	; 0x24
  406a48:	6083      	str	r3, [r0, #8]
  406a4a:	60c3      	str	r3, [r0, #12]
  406a4c:	bf11      	iteee	ne
  406a4e:	f100 0210 	addne.w	r2, r0, #16
  406a52:	6103      	streq	r3, [r0, #16]
  406a54:	6143      	streq	r3, [r0, #20]
  406a56:	f100 0218 	addeq.w	r2, r0, #24
  406a5a:	2300      	movs	r3, #0
  406a5c:	6013      	str	r3, [r2, #0]
  406a5e:	6053      	str	r3, [r2, #4]
  406a60:	6093      	str	r3, [r2, #8]
  406a62:	4620      	mov	r0, r4
  406a64:	bd10      	pop	{r4, pc}
  406a66:	4602      	mov	r2, r0
  406a68:	e7f7      	b.n	406a5a <_calloc_r+0x3e>
  406a6a:	2100      	movs	r1, #0
  406a6c:	f7fc fd26 	bl	4034bc <memset>
  406a70:	4620      	mov	r0, r4
  406a72:	bd10      	pop	{r4, pc}
  406a74:	f100 0208 	add.w	r2, r0, #8
  406a78:	e7ef      	b.n	406a5a <_calloc_r+0x3e>
  406a7a:	bf00      	nop

00406a7c <_malloc_trim_r>:
  406a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a7e:	4f24      	ldr	r7, [pc, #144]	; (406b10 <_malloc_trim_r+0x94>)
  406a80:	460c      	mov	r4, r1
  406a82:	4606      	mov	r6, r0
  406a84:	f7ff fb56 	bl	406134 <__malloc_lock>
  406a88:	68bb      	ldr	r3, [r7, #8]
  406a8a:	685d      	ldr	r5, [r3, #4]
  406a8c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406a90:	310f      	adds	r1, #15
  406a92:	f025 0503 	bic.w	r5, r5, #3
  406a96:	4429      	add	r1, r5
  406a98:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406a9c:	f021 010f 	bic.w	r1, r1, #15
  406aa0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406aa4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406aa8:	db07      	blt.n	406aba <_malloc_trim_r+0x3e>
  406aaa:	2100      	movs	r1, #0
  406aac:	4630      	mov	r0, r6
  406aae:	f7ff fe47 	bl	406740 <_sbrk_r>
  406ab2:	68bb      	ldr	r3, [r7, #8]
  406ab4:	442b      	add	r3, r5
  406ab6:	4298      	cmp	r0, r3
  406ab8:	d004      	beq.n	406ac4 <_malloc_trim_r+0x48>
  406aba:	4630      	mov	r0, r6
  406abc:	f7ff fb40 	bl	406140 <__malloc_unlock>
  406ac0:	2000      	movs	r0, #0
  406ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ac4:	4261      	negs	r1, r4
  406ac6:	4630      	mov	r0, r6
  406ac8:	f7ff fe3a 	bl	406740 <_sbrk_r>
  406acc:	3001      	adds	r0, #1
  406ace:	d00d      	beq.n	406aec <_malloc_trim_r+0x70>
  406ad0:	4b10      	ldr	r3, [pc, #64]	; (406b14 <_malloc_trim_r+0x98>)
  406ad2:	68ba      	ldr	r2, [r7, #8]
  406ad4:	6819      	ldr	r1, [r3, #0]
  406ad6:	1b2d      	subs	r5, r5, r4
  406ad8:	f045 0501 	orr.w	r5, r5, #1
  406adc:	4630      	mov	r0, r6
  406ade:	1b09      	subs	r1, r1, r4
  406ae0:	6055      	str	r5, [r2, #4]
  406ae2:	6019      	str	r1, [r3, #0]
  406ae4:	f7ff fb2c 	bl	406140 <__malloc_unlock>
  406ae8:	2001      	movs	r0, #1
  406aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406aec:	2100      	movs	r1, #0
  406aee:	4630      	mov	r0, r6
  406af0:	f7ff fe26 	bl	406740 <_sbrk_r>
  406af4:	68ba      	ldr	r2, [r7, #8]
  406af6:	1a83      	subs	r3, r0, r2
  406af8:	2b0f      	cmp	r3, #15
  406afa:	ddde      	ble.n	406aba <_malloc_trim_r+0x3e>
  406afc:	4c06      	ldr	r4, [pc, #24]	; (406b18 <_malloc_trim_r+0x9c>)
  406afe:	4905      	ldr	r1, [pc, #20]	; (406b14 <_malloc_trim_r+0x98>)
  406b00:	6824      	ldr	r4, [r4, #0]
  406b02:	f043 0301 	orr.w	r3, r3, #1
  406b06:	1b00      	subs	r0, r0, r4
  406b08:	6053      	str	r3, [r2, #4]
  406b0a:	6008      	str	r0, [r1, #0]
  406b0c:	e7d5      	b.n	406aba <_malloc_trim_r+0x3e>
  406b0e:	bf00      	nop
  406b10:	20400454 	.word	0x20400454
  406b14:	20400c6c 	.word	0x20400c6c
  406b18:	2040085c 	.word	0x2040085c

00406b1c <_free_r>:
  406b1c:	2900      	cmp	r1, #0
  406b1e:	d044      	beq.n	406baa <_free_r+0x8e>
  406b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b24:	460d      	mov	r5, r1
  406b26:	4680      	mov	r8, r0
  406b28:	f7ff fb04 	bl	406134 <__malloc_lock>
  406b2c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406b30:	4969      	ldr	r1, [pc, #420]	; (406cd8 <_free_r+0x1bc>)
  406b32:	f027 0301 	bic.w	r3, r7, #1
  406b36:	f1a5 0408 	sub.w	r4, r5, #8
  406b3a:	18e2      	adds	r2, r4, r3
  406b3c:	688e      	ldr	r6, [r1, #8]
  406b3e:	6850      	ldr	r0, [r2, #4]
  406b40:	42b2      	cmp	r2, r6
  406b42:	f020 0003 	bic.w	r0, r0, #3
  406b46:	d05e      	beq.n	406c06 <_free_r+0xea>
  406b48:	07fe      	lsls	r6, r7, #31
  406b4a:	6050      	str	r0, [r2, #4]
  406b4c:	d40b      	bmi.n	406b66 <_free_r+0x4a>
  406b4e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406b52:	1be4      	subs	r4, r4, r7
  406b54:	f101 0e08 	add.w	lr, r1, #8
  406b58:	68a5      	ldr	r5, [r4, #8]
  406b5a:	4575      	cmp	r5, lr
  406b5c:	443b      	add	r3, r7
  406b5e:	d06d      	beq.n	406c3c <_free_r+0x120>
  406b60:	68e7      	ldr	r7, [r4, #12]
  406b62:	60ef      	str	r7, [r5, #12]
  406b64:	60bd      	str	r5, [r7, #8]
  406b66:	1815      	adds	r5, r2, r0
  406b68:	686d      	ldr	r5, [r5, #4]
  406b6a:	07ed      	lsls	r5, r5, #31
  406b6c:	d53e      	bpl.n	406bec <_free_r+0xd0>
  406b6e:	f043 0201 	orr.w	r2, r3, #1
  406b72:	6062      	str	r2, [r4, #4]
  406b74:	50e3      	str	r3, [r4, r3]
  406b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406b7a:	d217      	bcs.n	406bac <_free_r+0x90>
  406b7c:	08db      	lsrs	r3, r3, #3
  406b7e:	1c58      	adds	r0, r3, #1
  406b80:	109a      	asrs	r2, r3, #2
  406b82:	684d      	ldr	r5, [r1, #4]
  406b84:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406b88:	60a7      	str	r7, [r4, #8]
  406b8a:	2301      	movs	r3, #1
  406b8c:	4093      	lsls	r3, r2
  406b8e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406b92:	432b      	orrs	r3, r5
  406b94:	3a08      	subs	r2, #8
  406b96:	60e2      	str	r2, [r4, #12]
  406b98:	604b      	str	r3, [r1, #4]
  406b9a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406b9e:	60fc      	str	r4, [r7, #12]
  406ba0:	4640      	mov	r0, r8
  406ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ba6:	f7ff bacb 	b.w	406140 <__malloc_unlock>
  406baa:	4770      	bx	lr
  406bac:	0a5a      	lsrs	r2, r3, #9
  406bae:	2a04      	cmp	r2, #4
  406bb0:	d852      	bhi.n	406c58 <_free_r+0x13c>
  406bb2:	099a      	lsrs	r2, r3, #6
  406bb4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406bb8:	00ff      	lsls	r7, r7, #3
  406bba:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406bbe:	19c8      	adds	r0, r1, r7
  406bc0:	59ca      	ldr	r2, [r1, r7]
  406bc2:	3808      	subs	r0, #8
  406bc4:	4290      	cmp	r0, r2
  406bc6:	d04f      	beq.n	406c68 <_free_r+0x14c>
  406bc8:	6851      	ldr	r1, [r2, #4]
  406bca:	f021 0103 	bic.w	r1, r1, #3
  406bce:	428b      	cmp	r3, r1
  406bd0:	d232      	bcs.n	406c38 <_free_r+0x11c>
  406bd2:	6892      	ldr	r2, [r2, #8]
  406bd4:	4290      	cmp	r0, r2
  406bd6:	d1f7      	bne.n	406bc8 <_free_r+0xac>
  406bd8:	68c3      	ldr	r3, [r0, #12]
  406bda:	60a0      	str	r0, [r4, #8]
  406bdc:	60e3      	str	r3, [r4, #12]
  406bde:	609c      	str	r4, [r3, #8]
  406be0:	60c4      	str	r4, [r0, #12]
  406be2:	4640      	mov	r0, r8
  406be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406be8:	f7ff baaa 	b.w	406140 <__malloc_unlock>
  406bec:	6895      	ldr	r5, [r2, #8]
  406bee:	4f3b      	ldr	r7, [pc, #236]	; (406cdc <_free_r+0x1c0>)
  406bf0:	42bd      	cmp	r5, r7
  406bf2:	4403      	add	r3, r0
  406bf4:	d040      	beq.n	406c78 <_free_r+0x15c>
  406bf6:	68d0      	ldr	r0, [r2, #12]
  406bf8:	60e8      	str	r0, [r5, #12]
  406bfa:	f043 0201 	orr.w	r2, r3, #1
  406bfe:	6085      	str	r5, [r0, #8]
  406c00:	6062      	str	r2, [r4, #4]
  406c02:	50e3      	str	r3, [r4, r3]
  406c04:	e7b7      	b.n	406b76 <_free_r+0x5a>
  406c06:	07ff      	lsls	r7, r7, #31
  406c08:	4403      	add	r3, r0
  406c0a:	d407      	bmi.n	406c1c <_free_r+0x100>
  406c0c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406c10:	1aa4      	subs	r4, r4, r2
  406c12:	4413      	add	r3, r2
  406c14:	68a0      	ldr	r0, [r4, #8]
  406c16:	68e2      	ldr	r2, [r4, #12]
  406c18:	60c2      	str	r2, [r0, #12]
  406c1a:	6090      	str	r0, [r2, #8]
  406c1c:	4a30      	ldr	r2, [pc, #192]	; (406ce0 <_free_r+0x1c4>)
  406c1e:	6812      	ldr	r2, [r2, #0]
  406c20:	f043 0001 	orr.w	r0, r3, #1
  406c24:	4293      	cmp	r3, r2
  406c26:	6060      	str	r0, [r4, #4]
  406c28:	608c      	str	r4, [r1, #8]
  406c2a:	d3b9      	bcc.n	406ba0 <_free_r+0x84>
  406c2c:	4b2d      	ldr	r3, [pc, #180]	; (406ce4 <_free_r+0x1c8>)
  406c2e:	4640      	mov	r0, r8
  406c30:	6819      	ldr	r1, [r3, #0]
  406c32:	f7ff ff23 	bl	406a7c <_malloc_trim_r>
  406c36:	e7b3      	b.n	406ba0 <_free_r+0x84>
  406c38:	4610      	mov	r0, r2
  406c3a:	e7cd      	b.n	406bd8 <_free_r+0xbc>
  406c3c:	1811      	adds	r1, r2, r0
  406c3e:	6849      	ldr	r1, [r1, #4]
  406c40:	07c9      	lsls	r1, r1, #31
  406c42:	d444      	bmi.n	406cce <_free_r+0x1b2>
  406c44:	6891      	ldr	r1, [r2, #8]
  406c46:	68d2      	ldr	r2, [r2, #12]
  406c48:	60ca      	str	r2, [r1, #12]
  406c4a:	4403      	add	r3, r0
  406c4c:	f043 0001 	orr.w	r0, r3, #1
  406c50:	6091      	str	r1, [r2, #8]
  406c52:	6060      	str	r0, [r4, #4]
  406c54:	50e3      	str	r3, [r4, r3]
  406c56:	e7a3      	b.n	406ba0 <_free_r+0x84>
  406c58:	2a14      	cmp	r2, #20
  406c5a:	d816      	bhi.n	406c8a <_free_r+0x16e>
  406c5c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406c60:	00ff      	lsls	r7, r7, #3
  406c62:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406c66:	e7aa      	b.n	406bbe <_free_r+0xa2>
  406c68:	10aa      	asrs	r2, r5, #2
  406c6a:	2301      	movs	r3, #1
  406c6c:	684d      	ldr	r5, [r1, #4]
  406c6e:	4093      	lsls	r3, r2
  406c70:	432b      	orrs	r3, r5
  406c72:	604b      	str	r3, [r1, #4]
  406c74:	4603      	mov	r3, r0
  406c76:	e7b0      	b.n	406bda <_free_r+0xbe>
  406c78:	f043 0201 	orr.w	r2, r3, #1
  406c7c:	614c      	str	r4, [r1, #20]
  406c7e:	610c      	str	r4, [r1, #16]
  406c80:	60e5      	str	r5, [r4, #12]
  406c82:	60a5      	str	r5, [r4, #8]
  406c84:	6062      	str	r2, [r4, #4]
  406c86:	50e3      	str	r3, [r4, r3]
  406c88:	e78a      	b.n	406ba0 <_free_r+0x84>
  406c8a:	2a54      	cmp	r2, #84	; 0x54
  406c8c:	d806      	bhi.n	406c9c <_free_r+0x180>
  406c8e:	0b1a      	lsrs	r2, r3, #12
  406c90:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406c94:	00ff      	lsls	r7, r7, #3
  406c96:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406c9a:	e790      	b.n	406bbe <_free_r+0xa2>
  406c9c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406ca0:	d806      	bhi.n	406cb0 <_free_r+0x194>
  406ca2:	0bda      	lsrs	r2, r3, #15
  406ca4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406ca8:	00ff      	lsls	r7, r7, #3
  406caa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406cae:	e786      	b.n	406bbe <_free_r+0xa2>
  406cb0:	f240 5054 	movw	r0, #1364	; 0x554
  406cb4:	4282      	cmp	r2, r0
  406cb6:	d806      	bhi.n	406cc6 <_free_r+0x1aa>
  406cb8:	0c9a      	lsrs	r2, r3, #18
  406cba:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406cbe:	00ff      	lsls	r7, r7, #3
  406cc0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406cc4:	e77b      	b.n	406bbe <_free_r+0xa2>
  406cc6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406cca:	257e      	movs	r5, #126	; 0x7e
  406ccc:	e777      	b.n	406bbe <_free_r+0xa2>
  406cce:	f043 0101 	orr.w	r1, r3, #1
  406cd2:	6061      	str	r1, [r4, #4]
  406cd4:	6013      	str	r3, [r2, #0]
  406cd6:	e763      	b.n	406ba0 <_free_r+0x84>
  406cd8:	20400454 	.word	0x20400454
  406cdc:	2040045c 	.word	0x2040045c
  406ce0:	20400860 	.word	0x20400860
  406ce4:	20400c9c 	.word	0x20400c9c

00406ce8 <__ascii_mbtowc>:
  406ce8:	b082      	sub	sp, #8
  406cea:	b149      	cbz	r1, 406d00 <__ascii_mbtowc+0x18>
  406cec:	b15a      	cbz	r2, 406d06 <__ascii_mbtowc+0x1e>
  406cee:	b16b      	cbz	r3, 406d0c <__ascii_mbtowc+0x24>
  406cf0:	7813      	ldrb	r3, [r2, #0]
  406cf2:	600b      	str	r3, [r1, #0]
  406cf4:	7812      	ldrb	r2, [r2, #0]
  406cf6:	1c10      	adds	r0, r2, #0
  406cf8:	bf18      	it	ne
  406cfa:	2001      	movne	r0, #1
  406cfc:	b002      	add	sp, #8
  406cfe:	4770      	bx	lr
  406d00:	a901      	add	r1, sp, #4
  406d02:	2a00      	cmp	r2, #0
  406d04:	d1f3      	bne.n	406cee <__ascii_mbtowc+0x6>
  406d06:	4610      	mov	r0, r2
  406d08:	b002      	add	sp, #8
  406d0a:	4770      	bx	lr
  406d0c:	f06f 0001 	mvn.w	r0, #1
  406d10:	e7f4      	b.n	406cfc <__ascii_mbtowc+0x14>
  406d12:	bf00      	nop

00406d14 <memmove>:
  406d14:	4288      	cmp	r0, r1
  406d16:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d18:	d90d      	bls.n	406d36 <memmove+0x22>
  406d1a:	188b      	adds	r3, r1, r2
  406d1c:	4298      	cmp	r0, r3
  406d1e:	d20a      	bcs.n	406d36 <memmove+0x22>
  406d20:	1884      	adds	r4, r0, r2
  406d22:	2a00      	cmp	r2, #0
  406d24:	d051      	beq.n	406dca <memmove+0xb6>
  406d26:	4622      	mov	r2, r4
  406d28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406d2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406d30:	4299      	cmp	r1, r3
  406d32:	d1f9      	bne.n	406d28 <memmove+0x14>
  406d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d36:	2a0f      	cmp	r2, #15
  406d38:	d948      	bls.n	406dcc <memmove+0xb8>
  406d3a:	ea41 0300 	orr.w	r3, r1, r0
  406d3e:	079b      	lsls	r3, r3, #30
  406d40:	d146      	bne.n	406dd0 <memmove+0xbc>
  406d42:	f100 0410 	add.w	r4, r0, #16
  406d46:	f101 0310 	add.w	r3, r1, #16
  406d4a:	4615      	mov	r5, r2
  406d4c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406d50:	f844 6c10 	str.w	r6, [r4, #-16]
  406d54:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406d58:	f844 6c0c 	str.w	r6, [r4, #-12]
  406d5c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406d60:	f844 6c08 	str.w	r6, [r4, #-8]
  406d64:	3d10      	subs	r5, #16
  406d66:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406d6a:	f844 6c04 	str.w	r6, [r4, #-4]
  406d6e:	2d0f      	cmp	r5, #15
  406d70:	f103 0310 	add.w	r3, r3, #16
  406d74:	f104 0410 	add.w	r4, r4, #16
  406d78:	d8e8      	bhi.n	406d4c <memmove+0x38>
  406d7a:	f1a2 0310 	sub.w	r3, r2, #16
  406d7e:	f023 030f 	bic.w	r3, r3, #15
  406d82:	f002 0e0f 	and.w	lr, r2, #15
  406d86:	3310      	adds	r3, #16
  406d88:	f1be 0f03 	cmp.w	lr, #3
  406d8c:	4419      	add	r1, r3
  406d8e:	4403      	add	r3, r0
  406d90:	d921      	bls.n	406dd6 <memmove+0xc2>
  406d92:	1f1e      	subs	r6, r3, #4
  406d94:	460d      	mov	r5, r1
  406d96:	4674      	mov	r4, lr
  406d98:	3c04      	subs	r4, #4
  406d9a:	f855 7b04 	ldr.w	r7, [r5], #4
  406d9e:	f846 7f04 	str.w	r7, [r6, #4]!
  406da2:	2c03      	cmp	r4, #3
  406da4:	d8f8      	bhi.n	406d98 <memmove+0x84>
  406da6:	f1ae 0404 	sub.w	r4, lr, #4
  406daa:	f024 0403 	bic.w	r4, r4, #3
  406dae:	3404      	adds	r4, #4
  406db0:	4421      	add	r1, r4
  406db2:	4423      	add	r3, r4
  406db4:	f002 0203 	and.w	r2, r2, #3
  406db8:	b162      	cbz	r2, 406dd4 <memmove+0xc0>
  406dba:	3b01      	subs	r3, #1
  406dbc:	440a      	add	r2, r1
  406dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
  406dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
  406dc6:	428a      	cmp	r2, r1
  406dc8:	d1f9      	bne.n	406dbe <memmove+0xaa>
  406dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406dcc:	4603      	mov	r3, r0
  406dce:	e7f3      	b.n	406db8 <memmove+0xa4>
  406dd0:	4603      	mov	r3, r0
  406dd2:	e7f2      	b.n	406dba <memmove+0xa6>
  406dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406dd6:	4672      	mov	r2, lr
  406dd8:	e7ee      	b.n	406db8 <memmove+0xa4>
  406dda:	bf00      	nop

00406ddc <_realloc_r>:
  406ddc:	2900      	cmp	r1, #0
  406dde:	f000 8095 	beq.w	406f0c <_realloc_r+0x130>
  406de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406de6:	460d      	mov	r5, r1
  406de8:	4616      	mov	r6, r2
  406dea:	b083      	sub	sp, #12
  406dec:	4680      	mov	r8, r0
  406dee:	f106 070b 	add.w	r7, r6, #11
  406df2:	f7ff f99f 	bl	406134 <__malloc_lock>
  406df6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406dfa:	2f16      	cmp	r7, #22
  406dfc:	f02e 0403 	bic.w	r4, lr, #3
  406e00:	f1a5 0908 	sub.w	r9, r5, #8
  406e04:	d83c      	bhi.n	406e80 <_realloc_r+0xa4>
  406e06:	2210      	movs	r2, #16
  406e08:	4617      	mov	r7, r2
  406e0a:	42be      	cmp	r6, r7
  406e0c:	d83d      	bhi.n	406e8a <_realloc_r+0xae>
  406e0e:	4294      	cmp	r4, r2
  406e10:	da43      	bge.n	406e9a <_realloc_r+0xbe>
  406e12:	4bc4      	ldr	r3, [pc, #784]	; (407124 <_realloc_r+0x348>)
  406e14:	6899      	ldr	r1, [r3, #8]
  406e16:	eb09 0004 	add.w	r0, r9, r4
  406e1a:	4288      	cmp	r0, r1
  406e1c:	f000 80b4 	beq.w	406f88 <_realloc_r+0x1ac>
  406e20:	6843      	ldr	r3, [r0, #4]
  406e22:	f023 0101 	bic.w	r1, r3, #1
  406e26:	4401      	add	r1, r0
  406e28:	6849      	ldr	r1, [r1, #4]
  406e2a:	07c9      	lsls	r1, r1, #31
  406e2c:	d54c      	bpl.n	406ec8 <_realloc_r+0xec>
  406e2e:	f01e 0f01 	tst.w	lr, #1
  406e32:	f000 809b 	beq.w	406f6c <_realloc_r+0x190>
  406e36:	4631      	mov	r1, r6
  406e38:	4640      	mov	r0, r8
  406e3a:	f7fe fddb 	bl	4059f4 <_malloc_r>
  406e3e:	4606      	mov	r6, r0
  406e40:	2800      	cmp	r0, #0
  406e42:	d03a      	beq.n	406eba <_realloc_r+0xde>
  406e44:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406e48:	f023 0301 	bic.w	r3, r3, #1
  406e4c:	444b      	add	r3, r9
  406e4e:	f1a0 0208 	sub.w	r2, r0, #8
  406e52:	429a      	cmp	r2, r3
  406e54:	f000 8121 	beq.w	40709a <_realloc_r+0x2be>
  406e58:	1f22      	subs	r2, r4, #4
  406e5a:	2a24      	cmp	r2, #36	; 0x24
  406e5c:	f200 8107 	bhi.w	40706e <_realloc_r+0x292>
  406e60:	2a13      	cmp	r2, #19
  406e62:	f200 80db 	bhi.w	40701c <_realloc_r+0x240>
  406e66:	4603      	mov	r3, r0
  406e68:	462a      	mov	r2, r5
  406e6a:	6811      	ldr	r1, [r2, #0]
  406e6c:	6019      	str	r1, [r3, #0]
  406e6e:	6851      	ldr	r1, [r2, #4]
  406e70:	6059      	str	r1, [r3, #4]
  406e72:	6892      	ldr	r2, [r2, #8]
  406e74:	609a      	str	r2, [r3, #8]
  406e76:	4629      	mov	r1, r5
  406e78:	4640      	mov	r0, r8
  406e7a:	f7ff fe4f 	bl	406b1c <_free_r>
  406e7e:	e01c      	b.n	406eba <_realloc_r+0xde>
  406e80:	f027 0707 	bic.w	r7, r7, #7
  406e84:	2f00      	cmp	r7, #0
  406e86:	463a      	mov	r2, r7
  406e88:	dabf      	bge.n	406e0a <_realloc_r+0x2e>
  406e8a:	2600      	movs	r6, #0
  406e8c:	230c      	movs	r3, #12
  406e8e:	4630      	mov	r0, r6
  406e90:	f8c8 3000 	str.w	r3, [r8]
  406e94:	b003      	add	sp, #12
  406e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e9a:	462e      	mov	r6, r5
  406e9c:	1be3      	subs	r3, r4, r7
  406e9e:	2b0f      	cmp	r3, #15
  406ea0:	d81e      	bhi.n	406ee0 <_realloc_r+0x104>
  406ea2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406ea6:	f003 0301 	and.w	r3, r3, #1
  406eaa:	4323      	orrs	r3, r4
  406eac:	444c      	add	r4, r9
  406eae:	f8c9 3004 	str.w	r3, [r9, #4]
  406eb2:	6863      	ldr	r3, [r4, #4]
  406eb4:	f043 0301 	orr.w	r3, r3, #1
  406eb8:	6063      	str	r3, [r4, #4]
  406eba:	4640      	mov	r0, r8
  406ebc:	f7ff f940 	bl	406140 <__malloc_unlock>
  406ec0:	4630      	mov	r0, r6
  406ec2:	b003      	add	sp, #12
  406ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ec8:	f023 0303 	bic.w	r3, r3, #3
  406ecc:	18e1      	adds	r1, r4, r3
  406ece:	4291      	cmp	r1, r2
  406ed0:	db1f      	blt.n	406f12 <_realloc_r+0x136>
  406ed2:	68c3      	ldr	r3, [r0, #12]
  406ed4:	6882      	ldr	r2, [r0, #8]
  406ed6:	462e      	mov	r6, r5
  406ed8:	60d3      	str	r3, [r2, #12]
  406eda:	460c      	mov	r4, r1
  406edc:	609a      	str	r2, [r3, #8]
  406ede:	e7dd      	b.n	406e9c <_realloc_r+0xc0>
  406ee0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406ee4:	eb09 0107 	add.w	r1, r9, r7
  406ee8:	f002 0201 	and.w	r2, r2, #1
  406eec:	444c      	add	r4, r9
  406eee:	f043 0301 	orr.w	r3, r3, #1
  406ef2:	4317      	orrs	r7, r2
  406ef4:	f8c9 7004 	str.w	r7, [r9, #4]
  406ef8:	604b      	str	r3, [r1, #4]
  406efa:	6863      	ldr	r3, [r4, #4]
  406efc:	f043 0301 	orr.w	r3, r3, #1
  406f00:	3108      	adds	r1, #8
  406f02:	6063      	str	r3, [r4, #4]
  406f04:	4640      	mov	r0, r8
  406f06:	f7ff fe09 	bl	406b1c <_free_r>
  406f0a:	e7d6      	b.n	406eba <_realloc_r+0xde>
  406f0c:	4611      	mov	r1, r2
  406f0e:	f7fe bd71 	b.w	4059f4 <_malloc_r>
  406f12:	f01e 0f01 	tst.w	lr, #1
  406f16:	d18e      	bne.n	406e36 <_realloc_r+0x5a>
  406f18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406f1c:	eba9 0a01 	sub.w	sl, r9, r1
  406f20:	f8da 1004 	ldr.w	r1, [sl, #4]
  406f24:	f021 0103 	bic.w	r1, r1, #3
  406f28:	440b      	add	r3, r1
  406f2a:	4423      	add	r3, r4
  406f2c:	4293      	cmp	r3, r2
  406f2e:	db25      	blt.n	406f7c <_realloc_r+0x1a0>
  406f30:	68c2      	ldr	r2, [r0, #12]
  406f32:	6881      	ldr	r1, [r0, #8]
  406f34:	4656      	mov	r6, sl
  406f36:	60ca      	str	r2, [r1, #12]
  406f38:	6091      	str	r1, [r2, #8]
  406f3a:	f8da 100c 	ldr.w	r1, [sl, #12]
  406f3e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406f42:	1f22      	subs	r2, r4, #4
  406f44:	2a24      	cmp	r2, #36	; 0x24
  406f46:	60c1      	str	r1, [r0, #12]
  406f48:	6088      	str	r0, [r1, #8]
  406f4a:	f200 8094 	bhi.w	407076 <_realloc_r+0x29a>
  406f4e:	2a13      	cmp	r2, #19
  406f50:	d96f      	bls.n	407032 <_realloc_r+0x256>
  406f52:	6829      	ldr	r1, [r5, #0]
  406f54:	f8ca 1008 	str.w	r1, [sl, #8]
  406f58:	6869      	ldr	r1, [r5, #4]
  406f5a:	f8ca 100c 	str.w	r1, [sl, #12]
  406f5e:	2a1b      	cmp	r2, #27
  406f60:	f200 80a2 	bhi.w	4070a8 <_realloc_r+0x2cc>
  406f64:	3508      	adds	r5, #8
  406f66:	f10a 0210 	add.w	r2, sl, #16
  406f6a:	e063      	b.n	407034 <_realloc_r+0x258>
  406f6c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406f70:	eba9 0a03 	sub.w	sl, r9, r3
  406f74:	f8da 1004 	ldr.w	r1, [sl, #4]
  406f78:	f021 0103 	bic.w	r1, r1, #3
  406f7c:	1863      	adds	r3, r4, r1
  406f7e:	4293      	cmp	r3, r2
  406f80:	f6ff af59 	blt.w	406e36 <_realloc_r+0x5a>
  406f84:	4656      	mov	r6, sl
  406f86:	e7d8      	b.n	406f3a <_realloc_r+0x15e>
  406f88:	6841      	ldr	r1, [r0, #4]
  406f8a:	f021 0b03 	bic.w	fp, r1, #3
  406f8e:	44a3      	add	fp, r4
  406f90:	f107 0010 	add.w	r0, r7, #16
  406f94:	4583      	cmp	fp, r0
  406f96:	da56      	bge.n	407046 <_realloc_r+0x26a>
  406f98:	f01e 0f01 	tst.w	lr, #1
  406f9c:	f47f af4b 	bne.w	406e36 <_realloc_r+0x5a>
  406fa0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406fa4:	eba9 0a01 	sub.w	sl, r9, r1
  406fa8:	f8da 1004 	ldr.w	r1, [sl, #4]
  406fac:	f021 0103 	bic.w	r1, r1, #3
  406fb0:	448b      	add	fp, r1
  406fb2:	4558      	cmp	r0, fp
  406fb4:	dce2      	bgt.n	406f7c <_realloc_r+0x1a0>
  406fb6:	4656      	mov	r6, sl
  406fb8:	f8da 100c 	ldr.w	r1, [sl, #12]
  406fbc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406fc0:	1f22      	subs	r2, r4, #4
  406fc2:	2a24      	cmp	r2, #36	; 0x24
  406fc4:	60c1      	str	r1, [r0, #12]
  406fc6:	6088      	str	r0, [r1, #8]
  406fc8:	f200 808f 	bhi.w	4070ea <_realloc_r+0x30e>
  406fcc:	2a13      	cmp	r2, #19
  406fce:	f240 808a 	bls.w	4070e6 <_realloc_r+0x30a>
  406fd2:	6829      	ldr	r1, [r5, #0]
  406fd4:	f8ca 1008 	str.w	r1, [sl, #8]
  406fd8:	6869      	ldr	r1, [r5, #4]
  406fda:	f8ca 100c 	str.w	r1, [sl, #12]
  406fde:	2a1b      	cmp	r2, #27
  406fe0:	f200 808a 	bhi.w	4070f8 <_realloc_r+0x31c>
  406fe4:	3508      	adds	r5, #8
  406fe6:	f10a 0210 	add.w	r2, sl, #16
  406fea:	6829      	ldr	r1, [r5, #0]
  406fec:	6011      	str	r1, [r2, #0]
  406fee:	6869      	ldr	r1, [r5, #4]
  406ff0:	6051      	str	r1, [r2, #4]
  406ff2:	68a9      	ldr	r1, [r5, #8]
  406ff4:	6091      	str	r1, [r2, #8]
  406ff6:	eb0a 0107 	add.w	r1, sl, r7
  406ffa:	ebab 0207 	sub.w	r2, fp, r7
  406ffe:	f042 0201 	orr.w	r2, r2, #1
  407002:	6099      	str	r1, [r3, #8]
  407004:	604a      	str	r2, [r1, #4]
  407006:	f8da 3004 	ldr.w	r3, [sl, #4]
  40700a:	f003 0301 	and.w	r3, r3, #1
  40700e:	431f      	orrs	r7, r3
  407010:	4640      	mov	r0, r8
  407012:	f8ca 7004 	str.w	r7, [sl, #4]
  407016:	f7ff f893 	bl	406140 <__malloc_unlock>
  40701a:	e751      	b.n	406ec0 <_realloc_r+0xe4>
  40701c:	682b      	ldr	r3, [r5, #0]
  40701e:	6003      	str	r3, [r0, #0]
  407020:	686b      	ldr	r3, [r5, #4]
  407022:	6043      	str	r3, [r0, #4]
  407024:	2a1b      	cmp	r2, #27
  407026:	d82d      	bhi.n	407084 <_realloc_r+0x2a8>
  407028:	f100 0308 	add.w	r3, r0, #8
  40702c:	f105 0208 	add.w	r2, r5, #8
  407030:	e71b      	b.n	406e6a <_realloc_r+0x8e>
  407032:	4632      	mov	r2, r6
  407034:	6829      	ldr	r1, [r5, #0]
  407036:	6011      	str	r1, [r2, #0]
  407038:	6869      	ldr	r1, [r5, #4]
  40703a:	6051      	str	r1, [r2, #4]
  40703c:	68a9      	ldr	r1, [r5, #8]
  40703e:	6091      	str	r1, [r2, #8]
  407040:	461c      	mov	r4, r3
  407042:	46d1      	mov	r9, sl
  407044:	e72a      	b.n	406e9c <_realloc_r+0xc0>
  407046:	eb09 0107 	add.w	r1, r9, r7
  40704a:	ebab 0b07 	sub.w	fp, fp, r7
  40704e:	f04b 0201 	orr.w	r2, fp, #1
  407052:	6099      	str	r1, [r3, #8]
  407054:	604a      	str	r2, [r1, #4]
  407056:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40705a:	f003 0301 	and.w	r3, r3, #1
  40705e:	431f      	orrs	r7, r3
  407060:	4640      	mov	r0, r8
  407062:	f845 7c04 	str.w	r7, [r5, #-4]
  407066:	f7ff f86b 	bl	406140 <__malloc_unlock>
  40706a:	462e      	mov	r6, r5
  40706c:	e728      	b.n	406ec0 <_realloc_r+0xe4>
  40706e:	4629      	mov	r1, r5
  407070:	f7ff fe50 	bl	406d14 <memmove>
  407074:	e6ff      	b.n	406e76 <_realloc_r+0x9a>
  407076:	4629      	mov	r1, r5
  407078:	4630      	mov	r0, r6
  40707a:	461c      	mov	r4, r3
  40707c:	46d1      	mov	r9, sl
  40707e:	f7ff fe49 	bl	406d14 <memmove>
  407082:	e70b      	b.n	406e9c <_realloc_r+0xc0>
  407084:	68ab      	ldr	r3, [r5, #8]
  407086:	6083      	str	r3, [r0, #8]
  407088:	68eb      	ldr	r3, [r5, #12]
  40708a:	60c3      	str	r3, [r0, #12]
  40708c:	2a24      	cmp	r2, #36	; 0x24
  40708e:	d017      	beq.n	4070c0 <_realloc_r+0x2e4>
  407090:	f100 0310 	add.w	r3, r0, #16
  407094:	f105 0210 	add.w	r2, r5, #16
  407098:	e6e7      	b.n	406e6a <_realloc_r+0x8e>
  40709a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40709e:	f023 0303 	bic.w	r3, r3, #3
  4070a2:	441c      	add	r4, r3
  4070a4:	462e      	mov	r6, r5
  4070a6:	e6f9      	b.n	406e9c <_realloc_r+0xc0>
  4070a8:	68a9      	ldr	r1, [r5, #8]
  4070aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4070ae:	68e9      	ldr	r1, [r5, #12]
  4070b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4070b4:	2a24      	cmp	r2, #36	; 0x24
  4070b6:	d00c      	beq.n	4070d2 <_realloc_r+0x2f6>
  4070b8:	3510      	adds	r5, #16
  4070ba:	f10a 0218 	add.w	r2, sl, #24
  4070be:	e7b9      	b.n	407034 <_realloc_r+0x258>
  4070c0:	692b      	ldr	r3, [r5, #16]
  4070c2:	6103      	str	r3, [r0, #16]
  4070c4:	696b      	ldr	r3, [r5, #20]
  4070c6:	6143      	str	r3, [r0, #20]
  4070c8:	f105 0218 	add.w	r2, r5, #24
  4070cc:	f100 0318 	add.w	r3, r0, #24
  4070d0:	e6cb      	b.n	406e6a <_realloc_r+0x8e>
  4070d2:	692a      	ldr	r2, [r5, #16]
  4070d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4070d8:	696a      	ldr	r2, [r5, #20]
  4070da:	f8ca 201c 	str.w	r2, [sl, #28]
  4070de:	3518      	adds	r5, #24
  4070e0:	f10a 0220 	add.w	r2, sl, #32
  4070e4:	e7a6      	b.n	407034 <_realloc_r+0x258>
  4070e6:	4632      	mov	r2, r6
  4070e8:	e77f      	b.n	406fea <_realloc_r+0x20e>
  4070ea:	4629      	mov	r1, r5
  4070ec:	4630      	mov	r0, r6
  4070ee:	9301      	str	r3, [sp, #4]
  4070f0:	f7ff fe10 	bl	406d14 <memmove>
  4070f4:	9b01      	ldr	r3, [sp, #4]
  4070f6:	e77e      	b.n	406ff6 <_realloc_r+0x21a>
  4070f8:	68a9      	ldr	r1, [r5, #8]
  4070fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4070fe:	68e9      	ldr	r1, [r5, #12]
  407100:	f8ca 1014 	str.w	r1, [sl, #20]
  407104:	2a24      	cmp	r2, #36	; 0x24
  407106:	d003      	beq.n	407110 <_realloc_r+0x334>
  407108:	3510      	adds	r5, #16
  40710a:	f10a 0218 	add.w	r2, sl, #24
  40710e:	e76c      	b.n	406fea <_realloc_r+0x20e>
  407110:	692a      	ldr	r2, [r5, #16]
  407112:	f8ca 2018 	str.w	r2, [sl, #24]
  407116:	696a      	ldr	r2, [r5, #20]
  407118:	f8ca 201c 	str.w	r2, [sl, #28]
  40711c:	3518      	adds	r5, #24
  40711e:	f10a 0220 	add.w	r2, sl, #32
  407122:	e762      	b.n	406fea <_realloc_r+0x20e>
  407124:	20400454 	.word	0x20400454

00407128 <__ascii_wctomb>:
  407128:	b121      	cbz	r1, 407134 <__ascii_wctomb+0xc>
  40712a:	2aff      	cmp	r2, #255	; 0xff
  40712c:	d804      	bhi.n	407138 <__ascii_wctomb+0x10>
  40712e:	700a      	strb	r2, [r1, #0]
  407130:	2001      	movs	r0, #1
  407132:	4770      	bx	lr
  407134:	4608      	mov	r0, r1
  407136:	4770      	bx	lr
  407138:	238a      	movs	r3, #138	; 0x8a
  40713a:	6003      	str	r3, [r0, #0]
  40713c:	f04f 30ff 	mov.w	r0, #4294967295
  407140:	4770      	bx	lr
  407142:	bf00      	nop

00407144 <__aeabi_drsub>:
  407144:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407148:	e002      	b.n	407150 <__adddf3>
  40714a:	bf00      	nop

0040714c <__aeabi_dsub>:
  40714c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407150 <__adddf3>:
  407150:	b530      	push	{r4, r5, lr}
  407152:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407156:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40715a:	ea94 0f05 	teq	r4, r5
  40715e:	bf08      	it	eq
  407160:	ea90 0f02 	teqeq	r0, r2
  407164:	bf1f      	itttt	ne
  407166:	ea54 0c00 	orrsne.w	ip, r4, r0
  40716a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40716e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407172:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407176:	f000 80e2 	beq.w	40733e <__adddf3+0x1ee>
  40717a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40717e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407182:	bfb8      	it	lt
  407184:	426d      	neglt	r5, r5
  407186:	dd0c      	ble.n	4071a2 <__adddf3+0x52>
  407188:	442c      	add	r4, r5
  40718a:	ea80 0202 	eor.w	r2, r0, r2
  40718e:	ea81 0303 	eor.w	r3, r1, r3
  407192:	ea82 0000 	eor.w	r0, r2, r0
  407196:	ea83 0101 	eor.w	r1, r3, r1
  40719a:	ea80 0202 	eor.w	r2, r0, r2
  40719e:	ea81 0303 	eor.w	r3, r1, r3
  4071a2:	2d36      	cmp	r5, #54	; 0x36
  4071a4:	bf88      	it	hi
  4071a6:	bd30      	pophi	{r4, r5, pc}
  4071a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4071ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4071b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4071b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4071b8:	d002      	beq.n	4071c0 <__adddf3+0x70>
  4071ba:	4240      	negs	r0, r0
  4071bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4071c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4071c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4071c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4071cc:	d002      	beq.n	4071d4 <__adddf3+0x84>
  4071ce:	4252      	negs	r2, r2
  4071d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4071d4:	ea94 0f05 	teq	r4, r5
  4071d8:	f000 80a7 	beq.w	40732a <__adddf3+0x1da>
  4071dc:	f1a4 0401 	sub.w	r4, r4, #1
  4071e0:	f1d5 0e20 	rsbs	lr, r5, #32
  4071e4:	db0d      	blt.n	407202 <__adddf3+0xb2>
  4071e6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4071ea:	fa22 f205 	lsr.w	r2, r2, r5
  4071ee:	1880      	adds	r0, r0, r2
  4071f0:	f141 0100 	adc.w	r1, r1, #0
  4071f4:	fa03 f20e 	lsl.w	r2, r3, lr
  4071f8:	1880      	adds	r0, r0, r2
  4071fa:	fa43 f305 	asr.w	r3, r3, r5
  4071fe:	4159      	adcs	r1, r3
  407200:	e00e      	b.n	407220 <__adddf3+0xd0>
  407202:	f1a5 0520 	sub.w	r5, r5, #32
  407206:	f10e 0e20 	add.w	lr, lr, #32
  40720a:	2a01      	cmp	r2, #1
  40720c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407210:	bf28      	it	cs
  407212:	f04c 0c02 	orrcs.w	ip, ip, #2
  407216:	fa43 f305 	asr.w	r3, r3, r5
  40721a:	18c0      	adds	r0, r0, r3
  40721c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407224:	d507      	bpl.n	407236 <__adddf3+0xe6>
  407226:	f04f 0e00 	mov.w	lr, #0
  40722a:	f1dc 0c00 	rsbs	ip, ip, #0
  40722e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407232:	eb6e 0101 	sbc.w	r1, lr, r1
  407236:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40723a:	d31b      	bcc.n	407274 <__adddf3+0x124>
  40723c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407240:	d30c      	bcc.n	40725c <__adddf3+0x10c>
  407242:	0849      	lsrs	r1, r1, #1
  407244:	ea5f 0030 	movs.w	r0, r0, rrx
  407248:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40724c:	f104 0401 	add.w	r4, r4, #1
  407250:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407254:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407258:	f080 809a 	bcs.w	407390 <__adddf3+0x240>
  40725c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407260:	bf08      	it	eq
  407262:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407266:	f150 0000 	adcs.w	r0, r0, #0
  40726a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40726e:	ea41 0105 	orr.w	r1, r1, r5
  407272:	bd30      	pop	{r4, r5, pc}
  407274:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407278:	4140      	adcs	r0, r0
  40727a:	eb41 0101 	adc.w	r1, r1, r1
  40727e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407282:	f1a4 0401 	sub.w	r4, r4, #1
  407286:	d1e9      	bne.n	40725c <__adddf3+0x10c>
  407288:	f091 0f00 	teq	r1, #0
  40728c:	bf04      	itt	eq
  40728e:	4601      	moveq	r1, r0
  407290:	2000      	moveq	r0, #0
  407292:	fab1 f381 	clz	r3, r1
  407296:	bf08      	it	eq
  407298:	3320      	addeq	r3, #32
  40729a:	f1a3 030b 	sub.w	r3, r3, #11
  40729e:	f1b3 0220 	subs.w	r2, r3, #32
  4072a2:	da0c      	bge.n	4072be <__adddf3+0x16e>
  4072a4:	320c      	adds	r2, #12
  4072a6:	dd08      	ble.n	4072ba <__adddf3+0x16a>
  4072a8:	f102 0c14 	add.w	ip, r2, #20
  4072ac:	f1c2 020c 	rsb	r2, r2, #12
  4072b0:	fa01 f00c 	lsl.w	r0, r1, ip
  4072b4:	fa21 f102 	lsr.w	r1, r1, r2
  4072b8:	e00c      	b.n	4072d4 <__adddf3+0x184>
  4072ba:	f102 0214 	add.w	r2, r2, #20
  4072be:	bfd8      	it	le
  4072c0:	f1c2 0c20 	rsble	ip, r2, #32
  4072c4:	fa01 f102 	lsl.w	r1, r1, r2
  4072c8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4072cc:	bfdc      	itt	le
  4072ce:	ea41 010c 	orrle.w	r1, r1, ip
  4072d2:	4090      	lslle	r0, r2
  4072d4:	1ae4      	subs	r4, r4, r3
  4072d6:	bfa2      	ittt	ge
  4072d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4072dc:	4329      	orrge	r1, r5
  4072de:	bd30      	popge	{r4, r5, pc}
  4072e0:	ea6f 0404 	mvn.w	r4, r4
  4072e4:	3c1f      	subs	r4, #31
  4072e6:	da1c      	bge.n	407322 <__adddf3+0x1d2>
  4072e8:	340c      	adds	r4, #12
  4072ea:	dc0e      	bgt.n	40730a <__adddf3+0x1ba>
  4072ec:	f104 0414 	add.w	r4, r4, #20
  4072f0:	f1c4 0220 	rsb	r2, r4, #32
  4072f4:	fa20 f004 	lsr.w	r0, r0, r4
  4072f8:	fa01 f302 	lsl.w	r3, r1, r2
  4072fc:	ea40 0003 	orr.w	r0, r0, r3
  407300:	fa21 f304 	lsr.w	r3, r1, r4
  407304:	ea45 0103 	orr.w	r1, r5, r3
  407308:	bd30      	pop	{r4, r5, pc}
  40730a:	f1c4 040c 	rsb	r4, r4, #12
  40730e:	f1c4 0220 	rsb	r2, r4, #32
  407312:	fa20 f002 	lsr.w	r0, r0, r2
  407316:	fa01 f304 	lsl.w	r3, r1, r4
  40731a:	ea40 0003 	orr.w	r0, r0, r3
  40731e:	4629      	mov	r1, r5
  407320:	bd30      	pop	{r4, r5, pc}
  407322:	fa21 f004 	lsr.w	r0, r1, r4
  407326:	4629      	mov	r1, r5
  407328:	bd30      	pop	{r4, r5, pc}
  40732a:	f094 0f00 	teq	r4, #0
  40732e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407332:	bf06      	itte	eq
  407334:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407338:	3401      	addeq	r4, #1
  40733a:	3d01      	subne	r5, #1
  40733c:	e74e      	b.n	4071dc <__adddf3+0x8c>
  40733e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407342:	bf18      	it	ne
  407344:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407348:	d029      	beq.n	40739e <__adddf3+0x24e>
  40734a:	ea94 0f05 	teq	r4, r5
  40734e:	bf08      	it	eq
  407350:	ea90 0f02 	teqeq	r0, r2
  407354:	d005      	beq.n	407362 <__adddf3+0x212>
  407356:	ea54 0c00 	orrs.w	ip, r4, r0
  40735a:	bf04      	itt	eq
  40735c:	4619      	moveq	r1, r3
  40735e:	4610      	moveq	r0, r2
  407360:	bd30      	pop	{r4, r5, pc}
  407362:	ea91 0f03 	teq	r1, r3
  407366:	bf1e      	ittt	ne
  407368:	2100      	movne	r1, #0
  40736a:	2000      	movne	r0, #0
  40736c:	bd30      	popne	{r4, r5, pc}
  40736e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407372:	d105      	bne.n	407380 <__adddf3+0x230>
  407374:	0040      	lsls	r0, r0, #1
  407376:	4149      	adcs	r1, r1
  407378:	bf28      	it	cs
  40737a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40737e:	bd30      	pop	{r4, r5, pc}
  407380:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407384:	bf3c      	itt	cc
  407386:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40738a:	bd30      	popcc	{r4, r5, pc}
  40738c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407390:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407394:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407398:	f04f 0000 	mov.w	r0, #0
  40739c:	bd30      	pop	{r4, r5, pc}
  40739e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4073a2:	bf1a      	itte	ne
  4073a4:	4619      	movne	r1, r3
  4073a6:	4610      	movne	r0, r2
  4073a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4073ac:	bf1c      	itt	ne
  4073ae:	460b      	movne	r3, r1
  4073b0:	4602      	movne	r2, r0
  4073b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4073b6:	bf06      	itte	eq
  4073b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4073bc:	ea91 0f03 	teqeq	r1, r3
  4073c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4073c4:	bd30      	pop	{r4, r5, pc}
  4073c6:	bf00      	nop

004073c8 <__aeabi_ui2d>:
  4073c8:	f090 0f00 	teq	r0, #0
  4073cc:	bf04      	itt	eq
  4073ce:	2100      	moveq	r1, #0
  4073d0:	4770      	bxeq	lr
  4073d2:	b530      	push	{r4, r5, lr}
  4073d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073dc:	f04f 0500 	mov.w	r5, #0
  4073e0:	f04f 0100 	mov.w	r1, #0
  4073e4:	e750      	b.n	407288 <__adddf3+0x138>
  4073e6:	bf00      	nop

004073e8 <__aeabi_i2d>:
  4073e8:	f090 0f00 	teq	r0, #0
  4073ec:	bf04      	itt	eq
  4073ee:	2100      	moveq	r1, #0
  4073f0:	4770      	bxeq	lr
  4073f2:	b530      	push	{r4, r5, lr}
  4073f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407400:	bf48      	it	mi
  407402:	4240      	negmi	r0, r0
  407404:	f04f 0100 	mov.w	r1, #0
  407408:	e73e      	b.n	407288 <__adddf3+0x138>
  40740a:	bf00      	nop

0040740c <__aeabi_f2d>:
  40740c:	0042      	lsls	r2, r0, #1
  40740e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407412:	ea4f 0131 	mov.w	r1, r1, rrx
  407416:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40741a:	bf1f      	itttt	ne
  40741c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407420:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407424:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407428:	4770      	bxne	lr
  40742a:	f092 0f00 	teq	r2, #0
  40742e:	bf14      	ite	ne
  407430:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407434:	4770      	bxeq	lr
  407436:	b530      	push	{r4, r5, lr}
  407438:	f44f 7460 	mov.w	r4, #896	; 0x380
  40743c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407440:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407444:	e720      	b.n	407288 <__adddf3+0x138>
  407446:	bf00      	nop

00407448 <__aeabi_ul2d>:
  407448:	ea50 0201 	orrs.w	r2, r0, r1
  40744c:	bf08      	it	eq
  40744e:	4770      	bxeq	lr
  407450:	b530      	push	{r4, r5, lr}
  407452:	f04f 0500 	mov.w	r5, #0
  407456:	e00a      	b.n	40746e <__aeabi_l2d+0x16>

00407458 <__aeabi_l2d>:
  407458:	ea50 0201 	orrs.w	r2, r0, r1
  40745c:	bf08      	it	eq
  40745e:	4770      	bxeq	lr
  407460:	b530      	push	{r4, r5, lr}
  407462:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407466:	d502      	bpl.n	40746e <__aeabi_l2d+0x16>
  407468:	4240      	negs	r0, r0
  40746a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40746e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407472:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407476:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40747a:	f43f aedc 	beq.w	407236 <__adddf3+0xe6>
  40747e:	f04f 0203 	mov.w	r2, #3
  407482:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407486:	bf18      	it	ne
  407488:	3203      	addne	r2, #3
  40748a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40748e:	bf18      	it	ne
  407490:	3203      	addne	r2, #3
  407492:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407496:	f1c2 0320 	rsb	r3, r2, #32
  40749a:	fa00 fc03 	lsl.w	ip, r0, r3
  40749e:	fa20 f002 	lsr.w	r0, r0, r2
  4074a2:	fa01 fe03 	lsl.w	lr, r1, r3
  4074a6:	ea40 000e 	orr.w	r0, r0, lr
  4074aa:	fa21 f102 	lsr.w	r1, r1, r2
  4074ae:	4414      	add	r4, r2
  4074b0:	e6c1      	b.n	407236 <__adddf3+0xe6>
  4074b2:	bf00      	nop

004074b4 <__aeabi_dmul>:
  4074b4:	b570      	push	{r4, r5, r6, lr}
  4074b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4074ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4074be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4074c2:	bf1d      	ittte	ne
  4074c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4074c8:	ea94 0f0c 	teqne	r4, ip
  4074cc:	ea95 0f0c 	teqne	r5, ip
  4074d0:	f000 f8de 	bleq	407690 <__aeabi_dmul+0x1dc>
  4074d4:	442c      	add	r4, r5
  4074d6:	ea81 0603 	eor.w	r6, r1, r3
  4074da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4074de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4074e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4074e6:	bf18      	it	ne
  4074e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4074ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4074f4:	d038      	beq.n	407568 <__aeabi_dmul+0xb4>
  4074f6:	fba0 ce02 	umull	ip, lr, r0, r2
  4074fa:	f04f 0500 	mov.w	r5, #0
  4074fe:	fbe1 e502 	umlal	lr, r5, r1, r2
  407502:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407506:	fbe0 e503 	umlal	lr, r5, r0, r3
  40750a:	f04f 0600 	mov.w	r6, #0
  40750e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407512:	f09c 0f00 	teq	ip, #0
  407516:	bf18      	it	ne
  407518:	f04e 0e01 	orrne.w	lr, lr, #1
  40751c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407520:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407524:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407528:	d204      	bcs.n	407534 <__aeabi_dmul+0x80>
  40752a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40752e:	416d      	adcs	r5, r5
  407530:	eb46 0606 	adc.w	r6, r6, r6
  407534:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407538:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40753c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407540:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407544:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407548:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40754c:	bf88      	it	hi
  40754e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407552:	d81e      	bhi.n	407592 <__aeabi_dmul+0xde>
  407554:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407558:	bf08      	it	eq
  40755a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40755e:	f150 0000 	adcs.w	r0, r0, #0
  407562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407566:	bd70      	pop	{r4, r5, r6, pc}
  407568:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40756c:	ea46 0101 	orr.w	r1, r6, r1
  407570:	ea40 0002 	orr.w	r0, r0, r2
  407574:	ea81 0103 	eor.w	r1, r1, r3
  407578:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40757c:	bfc2      	ittt	gt
  40757e:	ebd4 050c 	rsbsgt	r5, r4, ip
  407582:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407586:	bd70      	popgt	{r4, r5, r6, pc}
  407588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40758c:	f04f 0e00 	mov.w	lr, #0
  407590:	3c01      	subs	r4, #1
  407592:	f300 80ab 	bgt.w	4076ec <__aeabi_dmul+0x238>
  407596:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40759a:	bfde      	ittt	le
  40759c:	2000      	movle	r0, #0
  40759e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4075a2:	bd70      	pople	{r4, r5, r6, pc}
  4075a4:	f1c4 0400 	rsb	r4, r4, #0
  4075a8:	3c20      	subs	r4, #32
  4075aa:	da35      	bge.n	407618 <__aeabi_dmul+0x164>
  4075ac:	340c      	adds	r4, #12
  4075ae:	dc1b      	bgt.n	4075e8 <__aeabi_dmul+0x134>
  4075b0:	f104 0414 	add.w	r4, r4, #20
  4075b4:	f1c4 0520 	rsb	r5, r4, #32
  4075b8:	fa00 f305 	lsl.w	r3, r0, r5
  4075bc:	fa20 f004 	lsr.w	r0, r0, r4
  4075c0:	fa01 f205 	lsl.w	r2, r1, r5
  4075c4:	ea40 0002 	orr.w	r0, r0, r2
  4075c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4075cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4075d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4075d4:	fa21 f604 	lsr.w	r6, r1, r4
  4075d8:	eb42 0106 	adc.w	r1, r2, r6
  4075dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4075e0:	bf08      	it	eq
  4075e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4075e6:	bd70      	pop	{r4, r5, r6, pc}
  4075e8:	f1c4 040c 	rsb	r4, r4, #12
  4075ec:	f1c4 0520 	rsb	r5, r4, #32
  4075f0:	fa00 f304 	lsl.w	r3, r0, r4
  4075f4:	fa20 f005 	lsr.w	r0, r0, r5
  4075f8:	fa01 f204 	lsl.w	r2, r1, r4
  4075fc:	ea40 0002 	orr.w	r0, r0, r2
  407600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407608:	f141 0100 	adc.w	r1, r1, #0
  40760c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407610:	bf08      	it	eq
  407612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407616:	bd70      	pop	{r4, r5, r6, pc}
  407618:	f1c4 0520 	rsb	r5, r4, #32
  40761c:	fa00 f205 	lsl.w	r2, r0, r5
  407620:	ea4e 0e02 	orr.w	lr, lr, r2
  407624:	fa20 f304 	lsr.w	r3, r0, r4
  407628:	fa01 f205 	lsl.w	r2, r1, r5
  40762c:	ea43 0302 	orr.w	r3, r3, r2
  407630:	fa21 f004 	lsr.w	r0, r1, r4
  407634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407638:	fa21 f204 	lsr.w	r2, r1, r4
  40763c:	ea20 0002 	bic.w	r0, r0, r2
  407640:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407648:	bf08      	it	eq
  40764a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40764e:	bd70      	pop	{r4, r5, r6, pc}
  407650:	f094 0f00 	teq	r4, #0
  407654:	d10f      	bne.n	407676 <__aeabi_dmul+0x1c2>
  407656:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40765a:	0040      	lsls	r0, r0, #1
  40765c:	eb41 0101 	adc.w	r1, r1, r1
  407660:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407664:	bf08      	it	eq
  407666:	3c01      	subeq	r4, #1
  407668:	d0f7      	beq.n	40765a <__aeabi_dmul+0x1a6>
  40766a:	ea41 0106 	orr.w	r1, r1, r6
  40766e:	f095 0f00 	teq	r5, #0
  407672:	bf18      	it	ne
  407674:	4770      	bxne	lr
  407676:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40767a:	0052      	lsls	r2, r2, #1
  40767c:	eb43 0303 	adc.w	r3, r3, r3
  407680:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407684:	bf08      	it	eq
  407686:	3d01      	subeq	r5, #1
  407688:	d0f7      	beq.n	40767a <__aeabi_dmul+0x1c6>
  40768a:	ea43 0306 	orr.w	r3, r3, r6
  40768e:	4770      	bx	lr
  407690:	ea94 0f0c 	teq	r4, ip
  407694:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407698:	bf18      	it	ne
  40769a:	ea95 0f0c 	teqne	r5, ip
  40769e:	d00c      	beq.n	4076ba <__aeabi_dmul+0x206>
  4076a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076a4:	bf18      	it	ne
  4076a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076aa:	d1d1      	bne.n	407650 <__aeabi_dmul+0x19c>
  4076ac:	ea81 0103 	eor.w	r1, r1, r3
  4076b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076b4:	f04f 0000 	mov.w	r0, #0
  4076b8:	bd70      	pop	{r4, r5, r6, pc}
  4076ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076be:	bf06      	itte	eq
  4076c0:	4610      	moveq	r0, r2
  4076c2:	4619      	moveq	r1, r3
  4076c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076c8:	d019      	beq.n	4076fe <__aeabi_dmul+0x24a>
  4076ca:	ea94 0f0c 	teq	r4, ip
  4076ce:	d102      	bne.n	4076d6 <__aeabi_dmul+0x222>
  4076d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4076d4:	d113      	bne.n	4076fe <__aeabi_dmul+0x24a>
  4076d6:	ea95 0f0c 	teq	r5, ip
  4076da:	d105      	bne.n	4076e8 <__aeabi_dmul+0x234>
  4076dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4076e0:	bf1c      	itt	ne
  4076e2:	4610      	movne	r0, r2
  4076e4:	4619      	movne	r1, r3
  4076e6:	d10a      	bne.n	4076fe <__aeabi_dmul+0x24a>
  4076e8:	ea81 0103 	eor.w	r1, r1, r3
  4076ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4076f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4076f8:	f04f 0000 	mov.w	r0, #0
  4076fc:	bd70      	pop	{r4, r5, r6, pc}
  4076fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407702:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407706:	bd70      	pop	{r4, r5, r6, pc}

00407708 <__aeabi_ddiv>:
  407708:	b570      	push	{r4, r5, r6, lr}
  40770a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40770e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407716:	bf1d      	ittte	ne
  407718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40771c:	ea94 0f0c 	teqne	r4, ip
  407720:	ea95 0f0c 	teqne	r5, ip
  407724:	f000 f8a7 	bleq	407876 <__aeabi_ddiv+0x16e>
  407728:	eba4 0405 	sub.w	r4, r4, r5
  40772c:	ea81 0e03 	eor.w	lr, r1, r3
  407730:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407734:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407738:	f000 8088 	beq.w	40784c <__aeabi_ddiv+0x144>
  40773c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407740:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407744:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407748:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40774c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407750:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407754:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407758:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40775c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407760:	429d      	cmp	r5, r3
  407762:	bf08      	it	eq
  407764:	4296      	cmpeq	r6, r2
  407766:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40776a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40776e:	d202      	bcs.n	407776 <__aeabi_ddiv+0x6e>
  407770:	085b      	lsrs	r3, r3, #1
  407772:	ea4f 0232 	mov.w	r2, r2, rrx
  407776:	1ab6      	subs	r6, r6, r2
  407778:	eb65 0503 	sbc.w	r5, r5, r3
  40777c:	085b      	lsrs	r3, r3, #1
  40777e:	ea4f 0232 	mov.w	r2, r2, rrx
  407782:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407786:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40778a:	ebb6 0e02 	subs.w	lr, r6, r2
  40778e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407792:	bf22      	ittt	cs
  407794:	1ab6      	subcs	r6, r6, r2
  407796:	4675      	movcs	r5, lr
  407798:	ea40 000c 	orrcs.w	r0, r0, ip
  40779c:	085b      	lsrs	r3, r3, #1
  40779e:	ea4f 0232 	mov.w	r2, r2, rrx
  4077a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4077a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077aa:	bf22      	ittt	cs
  4077ac:	1ab6      	subcs	r6, r6, r2
  4077ae:	4675      	movcs	r5, lr
  4077b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4077b4:	085b      	lsrs	r3, r3, #1
  4077b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4077be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077c2:	bf22      	ittt	cs
  4077c4:	1ab6      	subcs	r6, r6, r2
  4077c6:	4675      	movcs	r5, lr
  4077c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4077cc:	085b      	lsrs	r3, r3, #1
  4077ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4077d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4077d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077da:	bf22      	ittt	cs
  4077dc:	1ab6      	subcs	r6, r6, r2
  4077de:	4675      	movcs	r5, lr
  4077e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4077e4:	ea55 0e06 	orrs.w	lr, r5, r6
  4077e8:	d018      	beq.n	40781c <__aeabi_ddiv+0x114>
  4077ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4077ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4077f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4077f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4077fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4077fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407802:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407806:	d1c0      	bne.n	40778a <__aeabi_ddiv+0x82>
  407808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40780c:	d10b      	bne.n	407826 <__aeabi_ddiv+0x11e>
  40780e:	ea41 0100 	orr.w	r1, r1, r0
  407812:	f04f 0000 	mov.w	r0, #0
  407816:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40781a:	e7b6      	b.n	40778a <__aeabi_ddiv+0x82>
  40781c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407820:	bf04      	itt	eq
  407822:	4301      	orreq	r1, r0
  407824:	2000      	moveq	r0, #0
  407826:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40782a:	bf88      	it	hi
  40782c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407830:	f63f aeaf 	bhi.w	407592 <__aeabi_dmul+0xde>
  407834:	ebb5 0c03 	subs.w	ip, r5, r3
  407838:	bf04      	itt	eq
  40783a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40783e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407842:	f150 0000 	adcs.w	r0, r0, #0
  407846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40784a:	bd70      	pop	{r4, r5, r6, pc}
  40784c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407850:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407854:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407858:	bfc2      	ittt	gt
  40785a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40785e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407862:	bd70      	popgt	{r4, r5, r6, pc}
  407864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407868:	f04f 0e00 	mov.w	lr, #0
  40786c:	3c01      	subs	r4, #1
  40786e:	e690      	b.n	407592 <__aeabi_dmul+0xde>
  407870:	ea45 0e06 	orr.w	lr, r5, r6
  407874:	e68d      	b.n	407592 <__aeabi_dmul+0xde>
  407876:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40787a:	ea94 0f0c 	teq	r4, ip
  40787e:	bf08      	it	eq
  407880:	ea95 0f0c 	teqeq	r5, ip
  407884:	f43f af3b 	beq.w	4076fe <__aeabi_dmul+0x24a>
  407888:	ea94 0f0c 	teq	r4, ip
  40788c:	d10a      	bne.n	4078a4 <__aeabi_ddiv+0x19c>
  40788e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407892:	f47f af34 	bne.w	4076fe <__aeabi_dmul+0x24a>
  407896:	ea95 0f0c 	teq	r5, ip
  40789a:	f47f af25 	bne.w	4076e8 <__aeabi_dmul+0x234>
  40789e:	4610      	mov	r0, r2
  4078a0:	4619      	mov	r1, r3
  4078a2:	e72c      	b.n	4076fe <__aeabi_dmul+0x24a>
  4078a4:	ea95 0f0c 	teq	r5, ip
  4078a8:	d106      	bne.n	4078b8 <__aeabi_ddiv+0x1b0>
  4078aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4078ae:	f43f aefd 	beq.w	4076ac <__aeabi_dmul+0x1f8>
  4078b2:	4610      	mov	r0, r2
  4078b4:	4619      	mov	r1, r3
  4078b6:	e722      	b.n	4076fe <__aeabi_dmul+0x24a>
  4078b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4078bc:	bf18      	it	ne
  4078be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4078c2:	f47f aec5 	bne.w	407650 <__aeabi_dmul+0x19c>
  4078c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4078ca:	f47f af0d 	bne.w	4076e8 <__aeabi_dmul+0x234>
  4078ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4078d2:	f47f aeeb 	bne.w	4076ac <__aeabi_dmul+0x1f8>
  4078d6:	e712      	b.n	4076fe <__aeabi_dmul+0x24a>

004078d8 <__gedf2>:
  4078d8:	f04f 3cff 	mov.w	ip, #4294967295
  4078dc:	e006      	b.n	4078ec <__cmpdf2+0x4>
  4078de:	bf00      	nop

004078e0 <__ledf2>:
  4078e0:	f04f 0c01 	mov.w	ip, #1
  4078e4:	e002      	b.n	4078ec <__cmpdf2+0x4>
  4078e6:	bf00      	nop

004078e8 <__cmpdf2>:
  4078e8:	f04f 0c01 	mov.w	ip, #1
  4078ec:	f84d cd04 	str.w	ip, [sp, #-4]!
  4078f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4078fc:	bf18      	it	ne
  4078fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407902:	d01b      	beq.n	40793c <__cmpdf2+0x54>
  407904:	b001      	add	sp, #4
  407906:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40790a:	bf0c      	ite	eq
  40790c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407910:	ea91 0f03 	teqne	r1, r3
  407914:	bf02      	ittt	eq
  407916:	ea90 0f02 	teqeq	r0, r2
  40791a:	2000      	moveq	r0, #0
  40791c:	4770      	bxeq	lr
  40791e:	f110 0f00 	cmn.w	r0, #0
  407922:	ea91 0f03 	teq	r1, r3
  407926:	bf58      	it	pl
  407928:	4299      	cmppl	r1, r3
  40792a:	bf08      	it	eq
  40792c:	4290      	cmpeq	r0, r2
  40792e:	bf2c      	ite	cs
  407930:	17d8      	asrcs	r0, r3, #31
  407932:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407936:	f040 0001 	orr.w	r0, r0, #1
  40793a:	4770      	bx	lr
  40793c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407944:	d102      	bne.n	40794c <__cmpdf2+0x64>
  407946:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40794a:	d107      	bne.n	40795c <__cmpdf2+0x74>
  40794c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407954:	d1d6      	bne.n	407904 <__cmpdf2+0x1c>
  407956:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40795a:	d0d3      	beq.n	407904 <__cmpdf2+0x1c>
  40795c:	f85d 0b04 	ldr.w	r0, [sp], #4
  407960:	4770      	bx	lr
  407962:	bf00      	nop

00407964 <__aeabi_cdrcmple>:
  407964:	4684      	mov	ip, r0
  407966:	4610      	mov	r0, r2
  407968:	4662      	mov	r2, ip
  40796a:	468c      	mov	ip, r1
  40796c:	4619      	mov	r1, r3
  40796e:	4663      	mov	r3, ip
  407970:	e000      	b.n	407974 <__aeabi_cdcmpeq>
  407972:	bf00      	nop

00407974 <__aeabi_cdcmpeq>:
  407974:	b501      	push	{r0, lr}
  407976:	f7ff ffb7 	bl	4078e8 <__cmpdf2>
  40797a:	2800      	cmp	r0, #0
  40797c:	bf48      	it	mi
  40797e:	f110 0f00 	cmnmi.w	r0, #0
  407982:	bd01      	pop	{r0, pc}

00407984 <__aeabi_dcmpeq>:
  407984:	f84d ed08 	str.w	lr, [sp, #-8]!
  407988:	f7ff fff4 	bl	407974 <__aeabi_cdcmpeq>
  40798c:	bf0c      	ite	eq
  40798e:	2001      	moveq	r0, #1
  407990:	2000      	movne	r0, #0
  407992:	f85d fb08 	ldr.w	pc, [sp], #8
  407996:	bf00      	nop

00407998 <__aeabi_dcmplt>:
  407998:	f84d ed08 	str.w	lr, [sp, #-8]!
  40799c:	f7ff ffea 	bl	407974 <__aeabi_cdcmpeq>
  4079a0:	bf34      	ite	cc
  4079a2:	2001      	movcc	r0, #1
  4079a4:	2000      	movcs	r0, #0
  4079a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4079aa:	bf00      	nop

004079ac <__aeabi_dcmple>:
  4079ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079b0:	f7ff ffe0 	bl	407974 <__aeabi_cdcmpeq>
  4079b4:	bf94      	ite	ls
  4079b6:	2001      	movls	r0, #1
  4079b8:	2000      	movhi	r0, #0
  4079ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4079be:	bf00      	nop

004079c0 <__aeabi_dcmpge>:
  4079c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079c4:	f7ff ffce 	bl	407964 <__aeabi_cdrcmple>
  4079c8:	bf94      	ite	ls
  4079ca:	2001      	movls	r0, #1
  4079cc:	2000      	movhi	r0, #0
  4079ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4079d2:	bf00      	nop

004079d4 <__aeabi_dcmpgt>:
  4079d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079d8:	f7ff ffc4 	bl	407964 <__aeabi_cdrcmple>
  4079dc:	bf34      	ite	cc
  4079de:	2001      	movcc	r0, #1
  4079e0:	2000      	movcs	r0, #0
  4079e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4079e6:	bf00      	nop

004079e8 <__aeabi_dcmpun>:
  4079e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4079ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079f0:	d102      	bne.n	4079f8 <__aeabi_dcmpun+0x10>
  4079f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4079f6:	d10a      	bne.n	407a0e <__aeabi_dcmpun+0x26>
  4079f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4079fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a00:	d102      	bne.n	407a08 <__aeabi_dcmpun+0x20>
  407a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407a06:	d102      	bne.n	407a0e <__aeabi_dcmpun+0x26>
  407a08:	f04f 0000 	mov.w	r0, #0
  407a0c:	4770      	bx	lr
  407a0e:	f04f 0001 	mov.w	r0, #1
  407a12:	4770      	bx	lr

00407a14 <__aeabi_d2iz>:
  407a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407a1c:	d215      	bcs.n	407a4a <__aeabi_d2iz+0x36>
  407a1e:	d511      	bpl.n	407a44 <__aeabi_d2iz+0x30>
  407a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407a28:	d912      	bls.n	407a50 <__aeabi_d2iz+0x3c>
  407a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a3a:	fa23 f002 	lsr.w	r0, r3, r2
  407a3e:	bf18      	it	ne
  407a40:	4240      	negne	r0, r0
  407a42:	4770      	bx	lr
  407a44:	f04f 0000 	mov.w	r0, #0
  407a48:	4770      	bx	lr
  407a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a4e:	d105      	bne.n	407a5c <__aeabi_d2iz+0x48>
  407a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a54:	bf08      	it	eq
  407a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a5a:	4770      	bx	lr
  407a5c:	f04f 0000 	mov.w	r0, #0
  407a60:	4770      	bx	lr
  407a62:	bf00      	nop

00407a64 <sysfont_glyphs>:
	...
  407a84:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  407a94:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  407aa4:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  407abc:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  407acc:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  407adc:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  407af4:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  407b04:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  407b14:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  407b2c:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  407b48:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407b58:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  407b68:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  407b78:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  407ba0:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  407bc8:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  407bd8:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  407bfc:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  407c0c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  407c1c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  407c2c:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  407c44:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  407c54:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  407c64:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  407c7c:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  407c8c:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  407c9c:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  407cb4:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  407cc4:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  407cd4:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  407cec:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  407cfc:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  407d0c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  407d24:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  407d34:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  407d44:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  407d60:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  407d70:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  407d80:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  407d9c:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  407db4:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  407dcc:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  407ddc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  407dec:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  407e04:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  407e14:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  407e24:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  407e3c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  407e4c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  407e5c:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  407e74:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  407e84:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407e94:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  407eac:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  407ebc:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  407ecc:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  407ee4:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407ef4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407f04:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  407f1c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  407f2c:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  407f3c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  407f54:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  407f64:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  407f74:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  407f8c:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  407f9c:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  407fac:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  407fc4:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  407fd4:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  407fe4:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  407ffc:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  40800c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  40801c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  408034:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  408044:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  408054:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  40806c:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  40807c:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  40808c:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  4080a4:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  4080b4:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  4080c4:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  4080dc:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  4080ec:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  4080fc:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  408114:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  408124:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  408134:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  40815c:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  40816c:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  408188:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  4081a0:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  4081b0:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  4081c0:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  4081d8:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  4081e8:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  4081f8:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  408210:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  408220:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  408230:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  408240:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  408250:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  408260:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  408270:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  408280:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  408290:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  4082a0:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  4082b8:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  4082c8:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  4082d8:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  4082f4:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  408310:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  40832c:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  40833c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  40834c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  408364:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  408380:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  40839c:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  4083b8:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  4083d4:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  4083f0:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40840c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  408428:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  408438:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  408448:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  408458:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  408468:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  408478:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  408488:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  408498:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  4084a8:	0000 0000 6564 616c 3a79 0000 6425 0000     ....delay:..%d..

004084b8 <_global_impure_ptr>:
  4084b8:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  4084c8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4084d8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4084e8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4084f8:	296c 0000 0030 0000                         l)..0...

00408500 <blanks.7223>:
  408500:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408510 <zeroes.7224>:
  408510:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408520:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00408530 <__mprec_bigtens>:
  408530:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  408540:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  408550:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408558 <__mprec_tens>:
  408558:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408568:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408578:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408588:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408598:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4085a8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4085b8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4085c8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4085d8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4085e8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4085f8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  408608:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  408618:	9db4 79d9 7843 44ea                         ...yCx.D

00408620 <p05.6055>:
  408620:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  408630:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040863c <_ctype_>:
  40863c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40864c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40865c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40866c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40867c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40868c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40869c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4086ac:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4086bc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408740 <_init>:
  408740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408742:	bf00      	nop
  408744:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408746:	bc08      	pop	{r3}
  408748:	469e      	mov	lr, r3
  40874a:	4770      	bx	lr

0040874c <__init_array_start>:
  40874c:	00404a01 	.word	0x00404a01

00408750 <__frame_dummy_init_array_entry>:
  408750:	00400165                                e.@.

00408754 <_fini>:
  408754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408756:	bf00      	nop
  408758:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40875a:	bc08      	pop	{r3}
  40875c:	469e      	mov	lr, r3
  40875e:	4770      	bx	lr

00408760 <__fini_array_start>:
  408760:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 7a64 0040 0e0a 7d20               ....dz@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0ca0 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	7129 0040 6ce9 0040 0000 0000 863c 0040     )q@..l@.....<.@.
20400954:	8638 0040 84dc 0040 84dc 0040 84dc 0040     8.@...@...@...@.
20400964:	84dc 0040 84dc 0040 84dc 0040 84dc 0040     ..@...@...@...@.
20400974:	84dc 0040 84dc 0040 ffff ffff ffff ffff     ..@...@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
